
vendor/github.com/glycerine/golua/lua/c-golua.c,1487
#define LJ_HASFFI 4,58
#define MT_GOFUNCTION 10,176
#define MT_GOINTERFACE 11,217
#define GOLUA_DEFAULT_MSGHANDLER 13,261
static const char GoStateRegistryKey 15,322
static const char PanicFIDRegistryKey 16,387
void *testudata(testudata19,464
int clua_isgofunction(36,982
int clua_isgostruct(41,1078
unsigned int* clua_checkgosomething(46,1173
size_t clua_getgostate(60,1504
int callback_function(73,1807
int gchook_wrapper(84,2156
unsigned int clua_togofunction(94,2408
unsigned int clua_togostruct(100,2567
void clua_pushgofunction(106,2725
static int callback_c 114,2949
void clua_pushcallback(121,3135
void clua_pushgostruct(126,3212
int default_panicf(134,3434
void clua_setgostate(141,3563
int interface_index_callback(151,3902
int interface_newindex_callback(183,4445
int panic_msghandler(214,4918
void clua_hide_pcall(221,5084
void clua_initstate(234,5344
int callback_panicf(272,6378
GoInterface clua_atpanic(284,6717
int clua_callluacfunc(315,7574
void* allocwrapper(320,7646
lua_State* clua_newstate(325,7794
void clua_setallocf(330,7886
void clua_openbase(335,7983
void clua_openio(343,8122
void clua_openmath(350,8238
void clua_openpackage(357,8360
void clua_openstring(364,8491
void clua_opentable(371,8619
void clua_openos(378,8744
void clua_hook_function(385,8860
void clua_setexecutionlimit(392,9010
uint32_t clua_luajit_ctypeid(398,9178
void clua_luajit_push_cdata_int64(403,9268
void clua_luajit_push_cdata_uint64(408,9372

vendor/github.com/glycerine/golua/lua/golua.h,169
typedef struct { void *t;t3,21
typedef struct { void *t; void *v;v3,21
typedef struct { void *t; void *v; } GoInterface;3,21
#define GOLUA_DEFAULT_MSGHANDLER 5,72

vendor/github.com/LuaJIT/LuaJIT/dynasm/dasm_arm.h,2370
#define DASM_ARCH	12,255
#define DASM_EXTERN(15,301
  DASM_STOP,20,373
  DASM_STOP, DASM_SECTION,20,373
  DASM_STOP, DASM_SECTION, DASM_ESC,20,373
  DASM_STOP, DASM_SECTION, DASM_ESC, DASM_REL_EXT,20,373
  DASM_ALIGN,22,478
  DASM_ALIGN, DASM_REL_LG,22,478
  DASM_ALIGN, DASM_REL_LG, DASM_LABEL_LG,22,478
  DASM_REL_PC,24,573
  DASM_REL_PC, DASM_LABEL_PC,24,573
  DASM_IMM,25,603
  DASM_IMM, DASM_IMM12,25,603
  DASM_IMM, DASM_IMM12, DASM_IMM16,25,603
  DASM_IMM, DASM_IMM12, DASM_IMM16, DASM_IMML8,25,603
  DASM_IMM, DASM_IMM12, DASM_IMM16, DASM_IMML8, DASM_IMML12,25,603
  DASM_IMM, DASM_IMM12, DASM_IMM16, DASM_IMML8, DASM_IMML12, DASM_IMMV8,25,603
  DASM__MAX26,676
#define DASM_MAXSECPOS	30,771
#define DASM_S_OK	33,877
#define DASM_S_NOMEM	34,907
#define DASM_S_PHASE	35,940
#define DASM_S_MATCH_SEC	36,973
#define DASM_S_RANGE_I	37,1009
#define DASM_S_RANGE_SEC	38,1044
#define DASM_S_RANGE_LG	39,1080
#define DASM_S_RANGE_PC	40,1116
#define DASM_S_RANGE_REL	41,1152
#define DASM_S_UNDEF_LG	42,1188
#define DASM_S_UNDEF_PC	43,1224
#define DASM_POS2IDX(46,1327
#define DASM_POS2BIAS(47,1372
#define DASM_SEC2POS(48,1418
#define DASM_POS2SEC(49,1456
#define DASM_POS2PTR(50,1494
typedef const unsigned int *dasm_ActList;dasm_ActList53,1594
typedef struct dasm_Section 56,1666
  int *rbuf;rbuf57,1696
  int *buf;buf58,1763
  size_t bsize;59,1803
  int pos;60,1848
  int epos;61,1890
  int ofs;62,1957
} dasm_Section;63,2001
struct dasm_State 66,2074
  size_t psize;67,2094
  dasm_ActList actionlist;68,2152
  int *lglabels;lglabels69,2213
  size_t lgsize;70,2266
  int *pclabels;pclabels71,2283
  size_t pcsize;72,2333
  void **globals;globals73,2350
  dasm_Section *section;section74,2404
  size_t codesize;75,2462
  int maxsection;76,2521
  int status;77,2576
  dasm_Section sections[sections78,2611
#define DASM_PSZ(82,2756
void dasm_init(86,2859
void dasm_free(110,3500
void dasm_setupglobal(123,3921
void dasm_growpc(131,4226
void dasm_setup(140,4494
#define CK(157,4927
#define CKPL(160,5039
#define CK(164,5225
#define CKPL(165,5253
static int dasm_imm12(168,5294
void dasm_put(177,5536
#undef CK275,8228
int dasm_link(278,8302
#define CK(337,10017
#define CK(340,10112
int dasm_encode(344,10179
#undef CK424,12571
int dasm_getpclabel(427,12609
int dasm_checkstep(440,12987

vendor/github.com/LuaJIT/LuaJIT/dynasm/dasm_arm64.h,2429
#define DASM_ARCH	12,257
#define DASM_EXTERN(15,305
  DASM_STOP,20,377
  DASM_STOP, DASM_SECTION,20,377
  DASM_STOP, DASM_SECTION, DASM_ESC,20,377
  DASM_STOP, DASM_SECTION, DASM_ESC, DASM_REL_EXT,20,377
  DASM_ALIGN,22,482
  DASM_ALIGN, DASM_REL_LG,22,482
  DASM_ALIGN, DASM_REL_LG, DASM_LABEL_LG,22,482
  DASM_REL_PC,24,577
  DASM_REL_PC, DASM_LABEL_PC,24,577
  DASM_IMM,25,607
  DASM_IMM, DASM_IMM6,25,607
  DASM_IMM, DASM_IMM6, DASM_IMM12,25,607
  DASM_IMM, DASM_IMM6, DASM_IMM12, DASM_IMM13W,25,607
  DASM_IMM, DASM_IMM6, DASM_IMM12, DASM_IMM13W, DASM_IMM13X,25,607
  DASM_IMM, DASM_IMM6, DASM_IMM12, DASM_IMM13W, DASM_IMM13X, DASM_IMML,25,607
  DASM__MAX26,679
#define DASM_MAXSECPOS	30,774
#define DASM_S_OK	33,880
#define DASM_S_NOMEM	34,910
#define DASM_S_PHASE	35,943
#define DASM_S_MATCH_SEC	36,976
#define DASM_S_RANGE_I	37,1012
#define DASM_S_RANGE_SEC	38,1047
#define DASM_S_RANGE_LG	39,1083
#define DASM_S_RANGE_PC	40,1119
#define DASM_S_RANGE_REL	41,1155
#define DASM_S_UNDEF_LG	42,1191
#define DASM_S_UNDEF_PC	43,1227
#define DASM_POS2IDX(46,1330
#define DASM_POS2BIAS(47,1375
#define DASM_SEC2POS(48,1421
#define DASM_POS2SEC(49,1459
#define DASM_POS2PTR(50,1497
typedef const unsigned int *dasm_ActList;dasm_ActList53,1597
typedef struct dasm_Section 56,1669
  int *rbuf;rbuf57,1699
  int *buf;buf58,1766
  size_t bsize;59,1806
  int pos;60,1851
  int epos;61,1893
  int ofs;62,1960
} dasm_Section;63,2004
struct dasm_State 66,2077
  size_t psize;67,2097
  dasm_ActList actionlist;68,2155
  int *lglabels;lglabels69,2216
  size_t lgsize;70,2269
  int *pclabels;pclabels71,2286
  size_t pcsize;72,2336
  void **globals;globals73,2353
  dasm_Section *section;section74,2407
  size_t codesize;75,2465
  int maxsection;76,2524
  int status;77,2579
  dasm_Section sections[sections78,2614
#define DASM_PSZ(82,2759
void dasm_init(86,2862
void dasm_free(110,3503
void dasm_setupglobal(123,3924
void dasm_growpc(131,4229
void dasm_setup(140,4497
#define CK(157,4930
#define CKPL(160,5042
#define CK(164,5228
#define CKPL(165,5256
static int dasm_imm12(168,5297
static int dasm_ffs(178,5463
static int dasm_imm13(185,5566
void dasm_put(217,6521
#undef CK330,9498
int dasm_link(333,9572
#define CK(393,11304
#define CK(396,11399
int dasm_encode(400,11466
#undef CK486,14201
int dasm_getpclabel(489,14239
int dasm_checkstep(502,14617

vendor/github.com/LuaJIT/LuaJIT/dynasm/dasm_mips.h,2142
#define DASM_ARCH	12,256
#define DASM_EXTERN(15,303
  DASM_STOP,20,375
  DASM_STOP, DASM_SECTION,20,375
  DASM_STOP, DASM_SECTION, DASM_ESC,20,375
  DASM_STOP, DASM_SECTION, DASM_ESC, DASM_REL_EXT,20,375
  DASM_ALIGN,22,480
  DASM_ALIGN, DASM_REL_LG,22,480
  DASM_ALIGN, DASM_REL_LG, DASM_LABEL_LG,22,480
  DASM_REL_PC,24,575
  DASM_REL_PC, DASM_LABEL_PC,24,575
  DASM_REL_PC, DASM_LABEL_PC, DASM_IMM,24,575
  DASM_REL_PC, DASM_LABEL_PC, DASM_IMM, DASM_IMMS,24,575
  DASM__MAX25,626
#define DASM_MAXSECPOS	29,721
#define DASM_S_OK	32,827
#define DASM_S_NOMEM	33,857
#define DASM_S_PHASE	34,890
#define DASM_S_MATCH_SEC	35,923
#define DASM_S_RANGE_I	36,959
#define DASM_S_RANGE_SEC	37,994
#define DASM_S_RANGE_LG	38,1030
#define DASM_S_RANGE_PC	39,1066
#define DASM_S_RANGE_REL	40,1102
#define DASM_S_UNDEF_LG	41,1138
#define DASM_S_UNDEF_PC	42,1174
#define DASM_POS2IDX(45,1277
#define DASM_POS2BIAS(46,1322
#define DASM_SEC2POS(47,1368
#define DASM_POS2SEC(48,1406
#define DASM_POS2PTR(49,1444
typedef const unsigned int *dasm_ActList;dasm_ActList52,1544
typedef struct dasm_Section 55,1616
  int *rbuf;rbuf56,1646
  int *buf;buf57,1713
  size_t bsize;58,1753
  int pos;59,1798
  int epos;60,1840
  int ofs;61,1907
} dasm_Section;62,1951
struct dasm_State 65,2024
  size_t psize;66,2044
  dasm_ActList actionlist;67,2102
  int *lglabels;lglabels68,2163
  size_t lgsize;69,2216
  int *pclabels;pclabels70,2233
  size_t pcsize;71,2283
  void **globals;globals72,2300
  dasm_Section *section;section73,2354
  size_t codesize;74,2412
  int maxsection;75,2471
  int status;76,2526
  dasm_Section sections[sections77,2561
#define DASM_PSZ(81,2706
void dasm_init(85,2809
void dasm_free(109,3450
void dasm_setupglobal(122,3871
void dasm_growpc(130,4176
void dasm_setup(139,4444
#define CK(156,4877
#define CKPL(159,4989
#define CK(163,5175
#define CKPL(164,5203
void dasm_put(168,5322
#undef CK255,7750
int dasm_link(258,7824
#define CK(316,9477
#define CK(319,9572
int dasm_encode(323,9639
#undef CK387,11475
int dasm_getpclabel(390,11513
int dasm_checkstep(403,11891

vendor/github.com/LuaJIT/LuaJIT/dynasm/dasm_ppc.h,2143
#define DASM_ARCH	12,261
#define DASM_EXTERN(15,307
  DASM_STOP,20,379
  DASM_STOP, DASM_SECTION,20,379
  DASM_STOP, DASM_SECTION, DASM_ESC,20,379
  DASM_STOP, DASM_SECTION, DASM_ESC, DASM_REL_EXT,20,379
  DASM_ALIGN,22,484
  DASM_ALIGN, DASM_REL_LG,22,484
  DASM_ALIGN, DASM_REL_LG, DASM_LABEL_LG,22,484
  DASM_REL_PC,24,579
  DASM_REL_PC, DASM_LABEL_PC,24,579
  DASM_REL_PC, DASM_LABEL_PC, DASM_IMM,24,579
  DASM_REL_PC, DASM_LABEL_PC, DASM_IMM, DASM_IMMSH,24,579
  DASM__MAX25,631
#define DASM_MAXSECPOS	29,726
#define DASM_S_OK	32,832
#define DASM_S_NOMEM	33,862
#define DASM_S_PHASE	34,895
#define DASM_S_MATCH_SEC	35,928
#define DASM_S_RANGE_I	36,964
#define DASM_S_RANGE_SEC	37,999
#define DASM_S_RANGE_LG	38,1035
#define DASM_S_RANGE_PC	39,1071
#define DASM_S_RANGE_REL	40,1107
#define DASM_S_UNDEF_LG	41,1143
#define DASM_S_UNDEF_PC	42,1179
#define DASM_POS2IDX(45,1282
#define DASM_POS2BIAS(46,1327
#define DASM_SEC2POS(47,1373
#define DASM_POS2SEC(48,1411
#define DASM_POS2PTR(49,1449
typedef const unsigned int *dasm_ActList;dasm_ActList52,1549
typedef struct dasm_Section 55,1621
  int *rbuf;rbuf56,1651
  int *buf;buf57,1718
  size_t bsize;58,1758
  int pos;59,1803
  int epos;60,1845
  int ofs;61,1912
} dasm_Section;62,1956
struct dasm_State 65,2029
  size_t psize;66,2049
  dasm_ActList actionlist;67,2107
  int *lglabels;lglabels68,2168
  size_t lgsize;69,2221
  int *pclabels;pclabels70,2238
  size_t pcsize;71,2288
  void **globals;globals72,2305
  dasm_Section *section;section73,2359
  size_t codesize;74,2417
  int maxsection;75,2476
  int status;76,2531
  dasm_Section sections[sections77,2566
#define DASM_PSZ(81,2711
void dasm_init(85,2814
void dasm_free(109,3455
void dasm_setupglobal(122,3876
void dasm_growpc(130,4181
void dasm_setup(139,4449
#define CK(156,4882
#define CKPL(159,4994
#define CK(163,5180
#define CKPL(164,5208
void dasm_put(168,5327
#undef CK259,7805
int dasm_link(262,7879
#define CK(320,9524
#define CK(323,9619
int dasm_encode(327,9686
#undef CK387,11468
int dasm_getpclabel(390,11506
int dasm_checkstep(403,11884

vendor/github.com/LuaJIT/LuaJIT/dynasm/dasm_proto.h,292
#define _DASM_PROTO_H8,203
#define DASM_IDENT	13,267
#define DASM_VERSION	14,301
#define Dst_DECL	17,358
#define Dst_REF	21,416
#define DASM_FDEF	25,466
#define DASM_M_GROW(29,519
#define DASM_M_FREE(43,850
typedef struct dasm_State dasm_State;47,935
#define dasm_checkstep(79,1995

vendor/github.com/LuaJIT/LuaJIT/dynasm/dasm_x86.h,2880
#define DASM_ARCH	12,255
#define DASM_EXTERN(15,301
  DASM_DISP 20,396
  DASM_IMM_S,21,415
  DASM_IMM_S, DASM_IMM_B,21,415
  DASM_IMM_S, DASM_IMM_B, DASM_IMM_W,21,415
  DASM_IMM_S, DASM_IMM_B, DASM_IMM_W, DASM_IMM_D,21,415
  DASM_IMM_S, DASM_IMM_B, DASM_IMM_W, DASM_IMM_D, DASM_IMM_WB,21,415
  DASM_IMM_S, DASM_IMM_B, DASM_IMM_W, DASM_IMM_D, DASM_IMM_WB, DASM_IMM_DB,21,415
  DASM_VREG,22,491
  DASM_VREG, DASM_SPACE,22,491
  DASM_VREG, DASM_SPACE, DASM_SETLABEL,22,491
  DASM_VREG, DASM_SPACE, DASM_SETLABEL, DASM_REL_A,22,491
  DASM_VREG, DASM_SPACE, DASM_SETLABEL, DASM_REL_A, DASM_REL_LG,22,491
  DASM_VREG, DASM_SPACE, DASM_SETLABEL, DASM_REL_A, DASM_REL_LG, DASM_REL_PC,22,491
  DASM_IMM_LG,23,569
  DASM_IMM_LG, DASM_IMM_PC,23,569
  DASM_IMM_LG, DASM_IMM_PC, DASM_LABEL_LG,23,569
  DASM_IMM_LG, DASM_IMM_PC, DASM_LABEL_LG, DASM_LABEL_PC,23,569
  DASM_IMM_LG, DASM_IMM_PC, DASM_LABEL_LG, DASM_LABEL_PC, DASM_ALIGN,23,569
  DASM_EXTERN,24,639
  DASM_EXTERN, DASM_ESC,24,639
  DASM_EXTERN, DASM_ESC, DASM_MARK,24,639
  DASM_EXTERN, DASM_ESC, DASM_MARK, DASM_SECTION,24,639
  DASM_EXTERN, DASM_ESC, DASM_MARK, DASM_SECTION, DASM_STOP24,639
#define DASM_MAXSECPOS	28,782
#define DASM_S_OK	31,888
#define DASM_S_NOMEM	32,918
#define DASM_S_PHASE	33,951
#define DASM_S_MATCH_SEC	34,984
#define DASM_S_RANGE_I	35,1020
#define DASM_S_RANGE_SEC	36,1055
#define DASM_S_RANGE_LG	37,1091
#define DASM_S_RANGE_PC	38,1127
#define DASM_S_RANGE_VREG	39,1163
#define DASM_S_UNDEF_L	40,1200
#define DASM_S_UNDEF_PC	41,1235
#define DASM_POS2IDX(44,1338
#define DASM_POS2BIAS(45,1383
#define DASM_SEC2POS(46,1429
#define DASM_POS2SEC(47,1467
#define DASM_POS2PTR(48,1505
typedef const unsigned char *dasm_ActList;dasm_ActList51,1605
typedef struct dasm_Section 54,1678
  int *rbuf;rbuf55,1708
  int *buf;buf56,1775
  size_t bsize;57,1815
  int pos;58,1860
  int epos;59,1902
  int ofs;60,1969
} dasm_Section;61,2013
struct dasm_State 64,2086
  size_t psize;65,2106
  dasm_ActList actionlist;66,2164
  int *lglabels;lglabels67,2225
  size_t lgsize;68,2278
  int *pclabels;pclabels69,2295
  size_t pcsize;70,2345
  void **globals;globals71,2362
  dasm_Section *section;section72,2416
  size_t codesize;73,2474
  int maxsection;74,2533
  int status;75,2588
  dasm_Section sections[sections76,2623
#define DASM_PSZ(80,2768
void dasm_init(84,2871
void dasm_free(108,3512
void dasm_setupglobal(121,3933
void dasm_growpc(129,4238
void dasm_setup(138,4506
#define CK(155,4939
#define CKPL(158,5056
#define CK(162,5245
#define CKPL(163,5273
void dasm_put(167,5392
#undef CK270,8798
int dasm_link(273,8881
#define dasmb(355,11490
#define dasmw(357,11562
#define dasmd(359,11654
#define dasmw(362,11748
#define dasmd(363,11807
int dasm_encode(367,11906
int dasm_getpclabel(470,15138
int dasm_checkstep(483,15516

vendor/github.com/LuaJIT/LuaJIT/src/host/buildvm.c,1462
#define Dst	39,1078
#define Dst_DECL	40,1095
#define Dst_REF	41,1126
#define DASM_CHECKS	42,1152
#define DASM_EXTERN(49,1316
#define DASM_ALIGNED_WRITES	55,1559
void owrite(77,2131
static void emit_raw(89,2480
static const char *sym_decorate(sym_decorate96,2640
#define NRELOCSYM	127,3462
static int relocmap[relocmap129,3522
static int collect_reloc(132,3591
static void sym_insert(155,4353
static int build_code(170,4709
const char *const bc_names[bc_names246,7057
#define BCNAME(247,7090
#undef BCNAME249,7154
const char *const ir_names[ir_names253,7179
#define IRNAME(254,7212
#undef IRNAME256,7265
const char *const irt_names[irt_names260,7290
#define IRTNAME(261,7324
#undef IRTNAME263,7375
const char *const irfpm_names[irfpm_names267,7401
#define FPMNAME(268,7437
#undef FPMNAME270,7485
const char *const irfield_names[irfield_names274,7511
#define FLNAME(275,7549
#undef FLNAME277,7598
const char *const ircall_names[ircall_names281,7623
#define IRCALLNAME(282,7660
#undef IRCALLNAME284,7746
static const char *const trace_errors[trace_errors288,7775
#define TREDEF(289,7819
static const char *lower(lower294,7886
static void emit_bcdef(306,8125
static void emit_vmdef(319,8503
static const char *const modenames[modenames363,9791
#define BUILDNAME(364,9832
#undef BUILDNAME366,9884
static void usage(371,9952
static BuildMode parsemode(385,10405
static void parseargs(396,10619
int main(432,11305

vendor/github.com/LuaJIT/LuaJIT/src/host/buildvm.h,1593
#define _BUILDVM_H7,119
#define BUILD_MAX_RELOC	19,327
#define BUILD_MAX_FOLD	20,390
#define LIBDEF_PREFIX	23,499
#define FOLDDEF_PREFIX	26,575
#define LABEL_PREFIX	29,646
#define LABEL_PREFIX_BC	30,674
#define LABEL_PREFIX_FF	31,718
#define LABEL_PREFIX_CF	32,762
#define LABEL_PREFIX_FFH	33,806
#define LABEL_PREFIX_LIBCF	34,851
#define LABEL_PREFIX_LIBINIT	35,901
#define BUILDDEF(41,1022
#define BUILDENUM(47,1176
BUILDDEF(48,1215
BUILDDEF(BUILDENUM)48,1215
#undef BUILDENUM49,1235
  BUILD__MAX50,1252
} BuildMode;51,1265
typedef struct BuildReloc 54,1302
  int32_t ofs;55,1330
  int sym;56,1345
  int type;57,1356
} BuildReloc;58,1368
typedef struct BuildSym 60,1383
  const char *name;name61,1409
  int32_t ofs;62,1429
} BuildSym;63,1444
typedef struct BuildCtx 66,1488
  struct dasm_State *D;D68,1568
  BuildMode mode;70,1621
  FILE *fp;fp71,1639
  const char *outname;outname72,1651
  char **args;args73,1674
  uint8_t *code;code75,1735
  size_t codesz;76,1752
  int npc,77,1769
  int npc, nglob,77,1769
  int npc, nglob, nsym,77,1769
  int npc, nglob, nsym, nreloc,77,1769
  int npc, nglob, nsym, nreloc, nrelocsym;77,1769
  void **glob;glob78,1812
  BuildSym *sym;sym79,1827
  const char **relocsym;relocsym80,1844
  int32_t *bc_ofs;bc_ofs81,1869
  const char *beginsym;beginsym82,1888
  const char *const *globnames;globnames84,1949
  const char *const *extnames;extnames85,1981
  const char *dasm_ident;dasm_ident86,2012
  const char *dasm_arch;dasm_arch87,2038
  BuildReloc reloc[reloc89,2084
} BuildCtx;90,2121

vendor/github.com/LuaJIT/LuaJIT/src/host/buildvm_asm.c,450
static void emit_asm_bytes(13,321
static void emit_asm_reloc(27,650
static const char *const jccnames[jccnames49,1244
static void emit_asm_reloc_text(55,1433
static void emit_asm_words(92,2561
static void emit_asm_wordreloc(110,3078
#define TOCPREFIX 139,3926
#define TOCPREFIX 141,3954
#define ELFASM_PX	174,4867
#define ELFASM_PX	176,4896
static void emit_asm_label(180,4957
static void emit_asm_align(230,6186
void emit_asm(248,6585

vendor/github.com/LuaJIT/LuaJIT/src/host/buildvm_fold.c,309
static int lineno;11,246
static uint32_t funcidx;12,265
static uint32_t foldkeys[foldkeys13,290
static uint32_t nkeys;14,332
static int tryhash(17,426
static void printhash(50,1581
static void makehash(61,1926
static uint32_t nexttoken(93,2802
static void foldrule(142,4181
void emit_fold(168,4980

vendor/github.com/LuaJIT/LuaJIT/src/host/buildvm_lib.c,1323
static uint8_t obuf[obuf13,276
static uint8_t *optr;optr14,303
static char modname[modname15,325
static size_t modnamelen;16,350
static char funcname[funcname17,376
static int modstate,18,402
static int modstate, regfunc;18,402
static int ffid,19,432
static int ffid, recffid,19,432
static int ffid, recffid, ffasmfunc;19,432
  REGFUNC_OK,22,477
  REGFUNC_NOREG,23,491
  REGFUNC_NOREGUV24,508
static void libdef_name(27,530
static void libdef_endmodule(50,1094
static void libdef_module(74,1678
static int find_ffofs(97,2351
static void libdef_func(111,2740
static uint8_t *libdef_uleb128(libdef_uleb128156,4115
static void libdef_fixupbc(167,4337
static void libdef_lua(189,4968
static uint32_t find_rec(212,5517
static void libdef_rec(229,5855
static void memcpy_endian(249,6305
  union { uint8_t b;251,6365
  union { uint8_t b; uint32_t u;251,6365
static void libdef_push(262,6621
static void libdef_set(307,7778
static void libdef_regfunc(318,8066
typedef void (*LibDefFunc)LibDefFunc324,8174
typedef struct LibDefHandler 326,8236
  const char *suffix;suffix327,8267
  const char *stop;stop328,8289
  const LibDefFunc func;329,8309
  const int arg;330,8334
} LibDefHandler;331,8351
static const LibDefHandler libdef_handlers[libdef_handlers333,8369
void emit_lib(348,8964

vendor/github.com/LuaJIT/LuaJIT/src/host/buildvm_libbc.h,275
static const int libbc_endian 3,46
static const uint8_t libbc_code[libbc_code5,82
static const struct { const char *name;name45,2638
static const struct { const char *name; int ofs;45,2638
static const struct { const char *name; int ofs; } libbc_map[libbc_map45,2638

vendor/github.com/LuaJIT/LuaJIT/src/host/buildvm_peobj.c,2421
static char *strtab;strtab15,386
static size_t strtabofs;16,407
typedef struct PEheader 21,530
  uint16_t arch;22,556
  uint16_t nsects;23,573
  uint32_t time;24,592
  uint32_t symtabofs;25,609
  uint32_t nsyms;26,631
  uint16_t opthdrsz;27,649
  uint16_t flags;28,670
} PEheader;29,688
typedef struct PEsection 32,719
  char name[name33,746
  uint32_t vsize;34,762
  uint32_t vaddr;35,780
  uint32_t size;36,798
  uint32_t ofs;37,815
  uint32_t relocofs;38,831
  uint32_t lineofs;39,852
  uint16_t nreloc;40,872
  uint16_t nline;41,891
  uint32_t flags;42,909
} PEsection;43,927
typedef struct PEreloc 46,962
  uint32_t vaddr;47,987
  uint32_t symidx;48,1005
  uint16_t type;49,1024
} PEreloc;50,1041
#define PEOBJ_RELOC_SIZE	53,1120
typedef struct PEsym 56,1183
    char name[name58,1216
    uint32_t nameref[nameref59,1234
  } n;60,1259
  uint32_t value;61,1266
  int16_t sect;62,1284
  uint16_t type;63,1300
  uint8_t scl;64,1317
  uint8_t naux;65,1332
} PEsym;66,1348
typedef struct PEsymaux 69,1411
  uint32_t size;70,1437
  uint16_t nreloc;71,1454
  uint16_t nline;72,1473
  uint32_t cksum;73,1491
  uint16_t assoc;74,1509
  uint8_t comdatsel;75,1527
  uint8_t unused[unused76,1548
} PEsymaux;77,1569
#define PEOBJ_SYM_SIZE	80,1649
#define PEOBJ_ARCH_TARGET	84,1743
#define PEOBJ_RELOC_REL32	85,1776
#define PEOBJ_RELOC_DIR32	86,1838
#define PEOBJ_RELOC_OFS	87,1869
#define PEOBJ_TEXT_FLAGS	88,1896
#define PEOBJ_ARCH_TARGET	90,1988
#define PEOBJ_RELOC_REL32	91,2021
#define PEOBJ_RELOC_DIR32	92,2083
#define PEOBJ_RELOC_ADDR32NB	93,2114
#define PEOBJ_RELOC_OFS	94,2148
#define PEOBJ_TEXT_FLAGS	95,2175
#define PEOBJ_ARCH_TARGET	97,2267
#define PEOBJ_RELOC_REL32	98,2300
#define PEOBJ_RELOC_DIR32	99,2331
#define PEOBJ_RELOC_OFS	100,2362
#define PEOBJ_TEXT_FLAGS	101,2392
  PEOBJ_SECT_ABS 106,2511
  PEOBJ_SECT_UNDEF 107,2534
  PEOBJ_SECT_TEXT,108,2559
  PEOBJ_SECT_PDATA,110,2596
  PEOBJ_SECT_XDATA,111,2616
  PEOBJ_SECT_SXDATA,113,2656
  PEOBJ_SECT_RDATA_Z,115,2684
  PEOBJ_NSECTIONS116,2706
#define PEOBJ_TYPE_NULL	120,2748
#define PEOBJ_TYPE_FUNC	121,2775
#define PEOBJ_SCL_EXTERN	124,2834
#define PEOBJ_SCL_STATIC	125,2861
static void emit_peobj_sym(130,2998
static void emit_peobj_sym_sect(158,3780
void emit_peobj(177,4353
  union { uint8_t b;183,4474
  union { uint8_t b; uint32_t u;183,4474
void emit_peobj(385,12017

vendor/github.com/LuaJIT/LuaJIT/src/host/minilua.c,49009
typedef unsigned __int64 U64;26,1448
typedef unsigned long long U64;28,1484
int _CRT_glob 30,1523
TM_INDEX,43,1769
TM_NEWINDEX,44,1779
TM_GC,45,1792
TM_MODE,46,1799
TM_EQ,47,1808
TM_ADD,48,1815
TM_SUB,49,1823
TM_MUL,50,1831
TM_DIV,51,1839
TM_MOD,52,1847
TM_POW,53,1855
TM_UNM,54,1863
TM_LEN,55,1871
TM_LT,56,1879
TM_LE,57,1886
TM_CONCAT,58,1893
TM_CALL,59,1904
TM_N60,1913
}TMS;TMS61,1918
enum OpMode{OpMode62,1924
enum OpMode{iABC,iABC62,1924
enum OpMode{iABC,iABx,62,1924
enum OpMode{iABC,iABx,iAsBx}iAsBx62,1924
OP_MOVE,64,1968
OP_LOADK,65,1977
OP_LOADBOOL,66,1987
OP_LOADNIL,67,2000
OP_GETUPVAL,68,2012
OP_GETGLOBAL,69,2025
OP_GETTABLE,70,2039
OP_SETGLOBAL,71,2052
OP_SETUPVAL,72,2066
OP_SETTABLE,73,2079
OP_NEWTABLE,74,2092
OP_SELF,75,2105
OP_ADD,76,2114
OP_SUB,77,2122
OP_MUL,78,2130
OP_DIV,79,2138
OP_MOD,80,2146
OP_POW,81,2154
OP_UNM,82,2162
OP_NOT,83,2170
OP_LEN,84,2178
OP_CONCAT,85,2186
OP_JMP,86,2197
OP_EQ,87,2205
OP_LT,88,2212
OP_LE,89,2219
OP_TEST,90,2226
OP_TESTSET,91,2235
OP_CALL,92,2247
OP_TAILCALL,93,2256
OP_RETURN,94,2269
OP_FORLOOP,95,2280
OP_FORPREP,96,2292
OP_TFORLOOP,97,2304
OP_SETLIST,98,2317
OP_CLOSE,99,2329
OP_CLOSURE,100,2339
OP_VARARG101,2351
}OpCode;OpCode102,2361
enum OpArgMask{OpArgMask103,2370
OpArgN,104,2386
OpArgU,105,2394
OpArgR,106,2402
OpArgK107,2410
VVOID,110,2434
VNIL,111,2441
VTRUE,112,2447
VFALSE,113,2454
VK,114,2462
VKNUM,115,2466
VLOCAL,116,2473
VUPVAL,117,2481
VGLOBAL,118,2489
VINDEXED,119,2498
VJMP,120,2508
VRELOCABLE,121,2514
VNONRELOC,122,2526
VCALL,123,2537
VVARARG124,2544
}expkind;expkind125,2552
enum RESERVED{RESERVED126,2562
TK_AND=127,2577
TK_AND=257,TK_BREAK,127,2577
TK_DO,128,2598
TK_DO,TK_ELSE,128,2598
TK_DO,TK_ELSE,TK_ELSEIF,128,2598
TK_DO,TK_ELSE,TK_ELSEIF,TK_END,128,2598
TK_DO,TK_ELSE,TK_ELSEIF,TK_END,TK_FALSE,128,2598
TK_DO,TK_ELSE,TK_ELSEIF,TK_END,TK_FALSE,TK_FOR,128,2598
TK_DO,TK_ELSE,TK_ELSEIF,TK_END,TK_FALSE,TK_FOR,TK_FUNCTION,128,2598
TK_IF,129,2658
TK_IF,TK_IN,129,2658
TK_IF,TK_IN,TK_LOCAL,129,2658
TK_IF,TK_IN,TK_LOCAL,TK_NIL,129,2658
TK_IF,TK_IN,TK_LOCAL,TK_NIL,TK_NOT,129,2658
TK_IF,TK_IN,TK_LOCAL,TK_NIL,TK_NOT,TK_OR,129,2658
TK_IF,TK_IN,TK_LOCAL,TK_NIL,TK_NOT,TK_OR,TK_REPEAT,129,2658
TK_RETURN,130,2710
TK_RETURN,TK_THEN,130,2710
TK_RETURN,TK_THEN,TK_TRUE,130,2710
TK_RETURN,TK_THEN,TK_TRUE,TK_UNTIL,130,2710
TK_RETURN,TK_THEN,TK_TRUE,TK_UNTIL,TK_WHILE,130,2710
TK_CONCAT,131,2755
TK_CONCAT,TK_DOTS,131,2755
TK_CONCAT,TK_DOTS,TK_EQ,131,2755
TK_CONCAT,TK_DOTS,TK_EQ,TK_GE,131,2755
TK_CONCAT,TK_DOTS,TK_EQ,TK_GE,TK_LE,131,2755
TK_CONCAT,TK_DOTS,TK_EQ,TK_GE,TK_LE,TK_NE,131,2755
TK_CONCAT,TK_DOTS,TK_EQ,TK_GE,TK_LE,TK_NE,TK_NUMBER,131,2755
TK_NAME,132,2808
TK_NAME,TK_STRING,132,2808
TK_NAME,TK_STRING,TK_EOS132,2808
typedef enum BinOpr{BinOpr134,2836
OPR_ADD,135,2857
OPR_ADD,OPR_SUB,135,2857
OPR_ADD,OPR_SUB,OPR_MUL,135,2857
OPR_ADD,OPR_SUB,OPR_MUL,OPR_DIV,135,2857
OPR_ADD,OPR_SUB,OPR_MUL,OPR_DIV,OPR_MOD,135,2857
OPR_ADD,OPR_SUB,OPR_MUL,OPR_DIV,OPR_MOD,OPR_POW,135,2857
OPR_CONCAT,136,2906
OPR_NE,137,2918
OPR_NE,OPR_EQ,137,2918
OPR_LT,138,2933
OPR_LT,OPR_LE,138,2933
OPR_LT,OPR_LE,OPR_GT,138,2933
OPR_LT,OPR_LE,OPR_GT,OPR_GE,138,2933
OPR_AND,139,2962
OPR_AND,OPR_OR,139,2962
OPR_NOBINOPR140,2978
}BinOpr;BinOpr141,2991
typedef enum UnOpr{UnOpr142,3000
typedef enum UnOpr{OPR_MINUS,OPR_MINUS142,3000
typedef enum UnOpr{OPR_MINUS,OPR_NOT,142,3000
typedef enum UnOpr{OPR_MINUS,OPR_NOT,OPR_LEN,142,3000
typedef enum UnOpr{OPR_MINUS,OPR_NOT,OPR_LEN,OPR_NOUNOPR}OPR_NOUNOPR142,3000
typedef enum UnOpr{OPR_MINUS,OPR_NOT,OPR_LEN,OPR_NOUNOPR}UnOpr;UnOpr142,3000
#define LUA_QL(143,3064
#define luai_apicheck(144,3089
#define lua_number2str(145,3126
#define lua_str2number(146,3178
#define luai_numadd(147,3221
#define luai_numsub(148,3255
#define luai_nummul(149,3289
#define luai_numdiv(150,3323
#define luai_nummod(151,3357
#define luai_numpow(152,3406
#define luai_numunm(153,3441
#define luai_numeq(154,3470
#define luai_numlt(155,3504
#define luai_numle(156,3537
#define luai_numisnan(157,3571
#define lua_number2int(158,3618
#define lua_number2integer(159,3660
#define LUAI_THROW(160,3714
#define LUAI_TRY(161,3755
#define lua_pclose(162,3803
#define lua_upvalueindex(163,3854
typedef struct lua_State lua_State;164,3896
typedef int(*lua_CFunction)lua_CFunction165,3932
typedef const char*(*lua_Reader)lua_Reader166,3974
typedef void*(*lua_Alloc)lua_Alloc167,4039
typedef double lua_Number;168,4110
typedef ptrdiff_t lua_Integer;169,4137
#define lua_pop(178,4618
#define lua_newtable(179,4659
#define lua_pushcfunction(180,4705
#define lua_strlen(181,4761
#define lua_isfunction(182,4802
#define lua_istable(183,4850
#define lua_isnil(184,4895
#define lua_isboolean(185,4938
#define lua_isnone(186,4985
#define lua_isnoneornil(187,5032
#define lua_pushliteral(188,5081
#define lua_setglobal(189,5159
#define lua_tostring(190,5214
typedef struct lua_Debug lua_Debug;191,5265
typedef void(*lua_Hook)lua_Hook192,5301
struct lua_Debug{lua_Debug193,5352
int event;194,5370
const char*name;name195,5381
const char*namewhat;namewhat196,5398
const char*what;what197,5419
const char*source;source198,5436
int currentline;199,5455
int nups;200,5472
int linedefined;201,5482
int lastlinedefined;202,5499
char short_src[short_src203,5520
int i_ci;204,5540
typedef unsigned int lu_int32;206,5553
typedef size_t lu_mem;207,5584
typedef ptrdiff_t l_mem;208,5607
typedef unsigned char lu_byte;209,5632
#define IntPoint(210,5663
typedef union{double u;211,5710
typedef union{double u;void*s;s211,5710
typedef union{double u;void*s;long l;211,5710
typedef union{double u;void*s;long l;}L_Umaxalign;L_Umaxalign211,5710
typedef double l_uacNumber;212,5761
#define check_exp(213,5789
#define UNUSED(214,5815
#define cast(215,5844
#define cast_byte(216,5874
#define cast_num(217,5912
#define cast_int(218,5952
typedef lu_int32 Instruction;219,5985
#define condhardstacktests(220,6015
typedef union GCObject GCObject;221,6054
typedef struct GCheader{GCheader222,6087
GCObject*next;next223,6112
GCObject*next;lu_byte tt;223,6112
GCObject*next;lu_byte tt;lu_byte marked;223,6112
}GCheader;GCheader224,6153
GCObject*gc;gc226,6179
void*p;p227,6192
lua_Number n;228,6200
int b;229,6214
}Value;Value230,6221
typedef struct lua_TValue{lua_TValue231,6229
Value value;232,6256
Value value;int tt;232,6256
}TValue;TValue233,6276
#define ttisnil(234,6285
#define ttisnumber(235,6317
#define ttisstring(236,6352
#define ttistable(237,6387
#define ttisfunction(238,6421
#define ttisboolean(239,6458
#define ttisuserdata(240,6494
#define ttisthread(241,6531
#define ttislightuserdata(242,6566
#define ttype(243,6608
#define gcvalue(244,6634
#define pvalue(245,6694
#define nvalue(246,6756
#define rawtsvalue(247,6811
#define tsvalue(248,6876
#define rawuvalue(249,6916
#define uvalue(250,6981
#define clvalue(251,7018
#define hvalue(252,7082
#define bvalue(253,7141
#define thvalue(254,7197
#define l_isfalse(255,7259
#define checkconsistency(256,7324
#define checkliveness(257,7354
#define setnilvalue(258,7383
#define setnvalue(259,7421
#define setbvalue(260,7492
#define setsvalue(261,7563
#define setuvalue(262,7677
#define setthvalue(263,7791
#define setclvalue(264,7906
#define sethvalue(265,8021
#define setptvalue(266,8135
#define setobj(267,8254
#define setttype(268,8381
#define iscollectable(269,8423
typedef TValue*StkId;StkId270,8461
typedef union TString{TString271,8483
L_Umaxalign dummy;272,8506
GCObject*next;next274,8533
GCObject*next;lu_byte tt;274,8533
GCObject*next;lu_byte tt;lu_byte marked;274,8533
lu_byte reserved;275,8574
unsigned int hash;276,8592
size_t len;277,8611
}tsv;tsv278,8623
}TString;TString279,8629
#define getstr(280,8639
#define svalue(281,8682
typedef union Udata{Udata282,8721
L_Umaxalign dummy;283,8742
GCObject*next;next285,8769
GCObject*next;lu_byte tt;285,8769
GCObject*next;lu_byte tt;lu_byte marked;285,8769
struct Table*metatable;metatable286,8810
struct Table*env;env287,8834
size_t len;288,8852
}uv;uv289,8864
}Udata;Udata290,8869
typedef struct Proto{Proto291,8877
GCObject*next;next292,8899
GCObject*next;lu_byte tt;292,8899
GCObject*next;lu_byte tt;lu_byte marked;292,8899
TValue*k;k293,8940
Instruction*code;code294,8950
struct Proto**p;p295,8968
int*lineinfo;lineinfo296,8985
struct LocVar*locvars;locvars297,8999
TString**upvalues;upvalues298,9022
TString*source;source299,9041
int sizeupvalues;300,9057
int sizek;301,9075
int sizecode;302,9086
int sizelineinfo;303,9100
int sizep;304,9118
int sizelocvars;305,9129
int linedefined;306,9146
int lastlinedefined;307,9163
GCObject*gclist;gclist308,9184
lu_byte nups;309,9201
lu_byte numparams;310,9215
lu_byte is_vararg;311,9234
lu_byte maxstacksize;312,9253
}Proto;Proto313,9275
typedef struct LocVar{LocVar314,9283
TString*varname;varname315,9306
int startpc;316,9323
int endpc;317,9336
}LocVar;LocVar318,9347
typedef struct UpVal{UpVal319,9356
GCObject*next;next320,9378
GCObject*next;lu_byte tt;320,9378
GCObject*next;lu_byte tt;lu_byte marked;320,9378
TValue*v;v321,9419
TValue value;323,9436
struct UpVal*prev;prev325,9458
struct UpVal*next;next326,9477
}l;l327,9496
}u;u328,9500
}UpVal;UpVal329,9504
typedef struct CClosure{CClosure330,9512
GCObject*next;next331,9537
GCObject*next;lu_byte tt;331,9537
GCObject*next;lu_byte tt;lu_byte marked;331,9537
GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;331,9537
GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;331,9537
GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;GCObject*gclist;gclist331,9537
GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;GCObject*gclist;struct Table*env;env331,9537
lua_CFunction f;332,9641
TValue upvalue[upvalue333,9658
}CClosure;CClosure334,9677
typedef struct LClosure{LClosure335,9688
GCObject*next;next336,9713
GCObject*next;lu_byte tt;336,9713
GCObject*next;lu_byte tt;lu_byte marked;336,9713
GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;336,9713
GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;336,9713
GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;GCObject*gclist;gclist336,9713
GCObject*next;lu_byte tt;lu_byte marked;lu_byte isC;lu_byte nupvalues;GCObject*gclist;struct Table*env;env336,9713
struct Proto*p;p337,9817
UpVal*upvals[upvals338,9833
}LClosure;LClosure339,9850
typedef union Closure{Closure340,9861
CClosure c;341,9884
LClosure l;342,9896
}Closure;Closure343,9908
#define iscfunction(344,9918
typedef union TKey{TKey345,9973
Value value;347,10001
Value value;int tt;347,10001
struct Node*next;next348,10021
}nk;nk349,10039
TValue tvk;350,10044
}TKey;TKey351,10056
typedef struct Node{Node352,10063
TValue i_val;353,10084
TKey i_key;354,10098
}Node;Node355,10110
typedef struct Table{Table356,10117
GCObject*next;next357,10139
GCObject*next;lu_byte tt;357,10139
GCObject*next;lu_byte tt;lu_byte marked;357,10139
lu_byte flags;358,10180
lu_byte lsizenode;359,10195
struct Table*metatable;metatable360,10214
TValue*array;array361,10238
Node*node;node362,10252
Node*lastfree;lastfree363,10263
GCObject*gclist;gclist364,10278
int sizearray;365,10295
}Table;Table366,10310
#define lmod(367,10318
#define twoto(368,10397
#define sizenode(369,10430
static const TValue luaO_nilobject_;370,10473
#define ceillog2(371,10510
#define gfasttm(373,10588
#define fasttm(374,10690
#define luaM_reallocv(376,10801
#define luaM_freemem(377,10940
#define luaM_free(378,10994
#define luaM_freearray(379,11052
#define luaM_malloc(380,11118
#define luaM_new(381,11170
#define luaM_newvector(382,11225
#define luaM_growvector(383,11299
#define luaM_reallocvector(384,11430
typedef struct Zio ZIO;391,11747
#define char2int(392,11771
#define zgetc(393,11824
typedef struct Mbuffer{Mbuffer394,11888
char*buffer;buffer395,11912
size_t n;396,11925
size_t buffsize;397,11935
}Mbuffer;Mbuffer398,11952
#define luaZ_initbuffer(399,11962
#define luaZ_buffer(400,12034
#define luaZ_sizebuffer(401,12076
#define luaZ_bufflen(402,12124
#define luaZ_resetbuffer(403,12162
#define luaZ_resizebuffer(404,12206
#define luaZ_freebuffer(405,12332
struct Zio{Zio406,12391
size_t n;407,12403
const char*p;p408,12413
lua_Reader reader;409,12427
void*data;data410,12446
lua_State*L;L411,12457
#define gt(415,12522
#define registry(416,12546
typedef struct stringtable{stringtable417,12585
GCObject**hash;hash418,12613
lu_int32 nuse;419,12629
int size;420,12644
}stringtable;stringtable421,12654
typedef struct CallInfo{CallInfo422,12668
StkId base;423,12693
StkId func;424,12705
StkId top;425,12717
const Instruction*savedpc;savedpc426,12728
int nresults;427,12755
int tailcalls;428,12769
}CallInfo;CallInfo429,12784
#define curr_func(430,12795
#define ci_func(431,12838
#define f_isLua(432,12879
#define isLua(433,12920
typedef struct global_State{global_State434,12977
stringtable strt;435,13006
lua_Alloc frealloc;436,13024
void*ud;ud437,13044
lu_byte currentwhite;438,13053
lu_byte gcstate;439,13075
int sweepstrgc;440,13092
GCObject*rootgc;rootgc441,13108
GCObject**sweepgc;sweepgc442,13125
GCObject*gray;gray443,13144
GCObject*grayagain;grayagain444,13159
GCObject*weak;weak445,13179
GCObject*tmudata;tmudata446,13194
Mbuffer buff;447,13212
lu_mem GCthreshold;448,13226
lu_mem totalbytes;449,13246
lu_mem estimate;450,13265
lu_mem gcdept;451,13282
int gcpause;452,13297
int gcstepmul;453,13310
lua_CFunction panic;454,13325
TValue l_registry;455,13346
struct lua_State*mainthread;mainthread456,13365
UpVal uvhead;457,13394
struct Table*mt[mt458,13408
TString*tmname[tmname459,13432
}global_State;global_State460,13454
struct lua_State{lua_State461,13469
GCObject*next;next462,13487
GCObject*next;lu_byte tt;462,13487
GCObject*next;lu_byte tt;lu_byte marked;462,13487
lu_byte status;463,13528
StkId top;464,13544
StkId base;465,13555
global_State*l_G;l_G466,13567
CallInfo*ci;ci467,13585
const Instruction*savedpc;savedpc468,13598
StkId stack_last;469,13625
StkId stack;470,13643
CallInfo*end_ci;end_ci471,13656
CallInfo*base_ci;base_ci472,13673
int stacksize;473,13691
int size_ci;474,13706
unsigned short nCcalls;475,13719
unsigned short baseCcalls;476,13743
lu_byte hookmask;477,13770
lu_byte allowhook;478,13788
int basehookcount;479,13807
int hookcount;480,13826
lua_Hook hook;481,13841
TValue l_gt;482,13856
TValue env;483,13869
GCObject*openupval;openupval484,13881
GCObject*gclist;gclist485,13901
struct lua_longjmp*errorJmp;errorJmp486,13918
ptrdiff_t errfunc;487,13947
#define G(489,13969
union GCObject{GCObject490,13990
GCheader gch;491,14006
union TString ts;492,14020
union Udata u;493,14038
union Closure cl;494,14053
struct Table h;495,14071
struct Proto p;496,14087
struct UpVal uv;497,14103
struct lua_State th;498,14120
#define rawgco2ts(500,14144
#define gco2ts(501,14201
#define rawgco2u(502,14239
#define gco2u(503,14294
#define gco2cl(504,14329
#define gco2h(505,14383
#define gco2p(506,14435
#define gco2uv(507,14491
#define ngcotouv(508,14549
#define gco2th(509,14620
#define obj2gco(510,14674
#define pcRel(512,14769
#define getline_(513,14817
#define resethookcount(514,14877
#define luaD_checkstack(518,15068
#define incr_top(519,15243
#define savestack(520,15295
#define restorestack(521,15346
#define saveci(522,15404
#define restoreci(523,15454
typedef void(*Pfunc)Pfunc524,15513
static void*luaM_growaux_(luaM_growaux_530,15817
else{else539,16035
newblock=544,16087
*size=size545,16145
static void*luaM_toobig(luaM_toobig548,16179
static void*luaM_realloc_(luaM_realloc_552,16291
#define resetbits(560,16537
#define setbits(561,16585
#define testbits(562,16616
#define bitmask(563,16647
#define bit2mask(564,16674
#define l_setbit(565,16723
#define resetbit(566,16766
#define testbit(567,16811
#define set2bits(568,16854
#define reset2bits(569,16908
#define test2bits(570,16966
#define iswhite(571,17022
#define isblack(572,17071
#define isgray(573,17116
#define otherwhite(574,17160
#define isdead(575,17213
#define changewhite(576,17278
#define gray2black(577,17333
#define valiswhite(578,17382
#define luaC_white(579,17443
#define luaC_checkGC(580,17510
#define luaC_barrier(581,17646
#define luaC_barriert(582,17753
#define luaC_objbarrier(583,17844
#define luaC_objbarriert(584,17960
#define sizestring(590,18317
#define sizeudata(591,18388
#define luaS_new(592,18439
#define luaS_newliteral(593,18490
#define luaS_fix(594,18567
#define tostring(596,18680
#define tonumber(597,18739
#define equalobj(598,18808
static const TValue luaO_nilobject_=604,19173
static int luaO_int2fb(605,19221
static int luaO_fb2int(614,19361
static int luaO_log2(619,19458
int l=630,20052
static int luaO_rawequalObj(634,20110
static int luaO_str2d(649,20422
static void pushstr(660,20739
static const char*luaO_pushvfstring(luaO_pushvfstring664,20840
fmt=716,21670
static const char*luaO_pushfstring(luaO_pushfstring723,21782
static void luaO_chunkid(731,21963
else{else749,22289
#define gnode(764,22542
#define gkey(765,22576
#define gval(766,22608
#define gnext(767,22637
#define key2tval(768,22674
static const char*const luaT_typenames[luaT_typenames772,22883
static void luaT_init(777,23031
int i;785,23261
for(i=0;i<TM_N;TM_N786,23268
G(L)->tmname[tmname787,23289
static const TValue*luaT_gettm(luaT_gettm791,23367
static const TValue*luaT_gettmbyobj(luaT_gettmbyobj799,23567
#define sizeCclosure(813,23853
#define sizeLclosure(814,23938
static Closure*luaF_newCclosure(luaF_newCclosure815,24024
static Closure*luaF_newLclosure(luaF_newLclosure823,24248
static UpVal*luaF_newupval(luaF_newupval832,24513
static UpVal*luaF_findupval(luaF_findupval839,24667
pp=850,24915
uv=852,24930
uv->tt=tt853,24952
uv->marked=marked854,24966
uv->v=v855,24992
uv->next=next856,25005
*pp=pp857,25019
uv->u.l.prev=prev858,25036
uv->u.l.next=next859,25061
uv->u.l.next->u.l.prev=prev860,25094
g->uvhead.u.l.next=next861,25121
static void unlinkupval(864,25157
static void luaF_freeupval(868,25268
static void luaF_close(873,25378
static Proto*luaF_newproto(luaF_newproto889,25710
static void luaF_freeproto(913,26123
static void luaF_freeclosure(922,26487
#define MASK1(927,26646
#define MASK0(928,26695
#define GET_OPCODE(929,26727
#define SET_OPCODE(930,26783
#define GETARG_A(931,26869
#define SETARG_A(932,26924
#define GETARG_B(933,27020
#define SETARG_B(934,27083
#define GETARG_C(935,27203
#define SETARG_C(936,27262
#define GETARG_Bx(937,27370
#define SETARG_Bx(938,27434
#define GETARG_sBx(939,27551
#define SETARG_sBx(940,27607
#define CREATE_ABC(941,27688
#define CREATE_ABx(942,27841
#define ISK(943,27957
#define INDEXK(944,27988
#define RKASK(945,28028
static const lu_byte luaP_opmodes[luaP_opmodes946,28061
#define getBMode(947,28121
#define getCMode(948,28186
#define testTMode(949,28251
typedef struct expdesc{expdesc950,28296
expkind k;951,28320
struct{int info,953,28338
struct{int info,aux;953,28338
struct{int info,aux;}s;s953,28338
lua_Number nval;954,28362
}u;u955,28379
int t;956,28383
int f;957,28390
}expdesc;expdesc958,28397
typedef struct upvaldesc{upvaldesc959,28407
lu_byte k;960,28433
lu_byte info;961,28444
}upvaldesc;upvaldesc962,28458
typedef struct FuncState{FuncState964,28487
Proto*f;f965,28513
Table*h;h966,28522
struct FuncState*prev;prev967,28531
struct LexState*ls;ls968,28554
struct lua_State*L;L969,28574
struct BlockCnt*bl;bl970,28594
int pc;971,28614
int lasttarget;972,28622
int jpc;973,28638
int freereg;974,28647
int nk;975,28660
int np;976,28668
short nlocvars;977,28676
lu_byte nactvar;978,28692
upvaldesc upvalues[upvalues979,28709
unsigned short actvar[actvar980,28733
}FuncState;FuncState981,28761
struct lua_longjmp{lua_longjmp984,28848
struct lua_longjmp*previous;previous985,28868
jmp_buf b;986,28897
volatile int status;987,28908
static void luaD_seterrorobj(989,28932
L->top=top1005,29234
static void restore_stack_limit(1007,29253
static void resetstack(1014,29406
static void luaD_throw(1025,29652
static int luaD_rawrunprotected(1039,29894
static void correctstack(1050,30110
L->base=base1061,30473
static void luaD_reallocstack(1063,30512
static void luaD_reallocCI(1071,30764
static void luaD_growstack(1078,30995
static CallInfo*growCI(growCI1084,31143
static StkId adjust_varargs(1094,31331
static StkId tryfuncTM(1112,31681
#define inc_ci(1124,31991
static int luaD_precall(1125,32098
else{else1144,32522
ci=1149,32625
ci->func=func1150,32639
L->base=base1151,32654
ci->top=top1152,32677
L->savedpc=savedpc1153,32710
ci->tailcalls=tailcalls1154,32730
ci->nresults=nresults1155,32747
for(st=L->top;st<ci->top;top1156,32770
L->top=top1158,32818
static int luaD_poscall(1179,33105
static void luaD_call(1195,33438
static int luaD_pcall(1207,33722
L->errfunc=errfunc1227,34280
struct SParser{SParser1230,34321
ZIO*z;z1231,34337
Mbuffer buff;1232,34344
const char*name;name1233,34358
static void f_parser(1235,34378
static int luaD_protectedparser(1250,34709
static void luaS_resize(1259,34964
tb->size=size1280,35425
tb->hash=hash1281,35443
static TString*newlstr(newlstr1283,35463
static TString*luaS_newlstr(luaS_newlstr1306,36074
static Udata*luaS_newudata(luaS_newudata1324,36528
#define hashpow2(1338,36876
#define hashstr(1339,36930
#define hashboolean(1340,36980
#define hashmod(1341,37018
#define hashpointer(1342,37075
static const Node dummynode_=1343,37122
static Node*hashnum(hashnum1347,37186
static Node*mainposition(mainposition1356,37456
static int arrayindex(1370,37751
static int findindex(1380,37921
else n=1395,38270
static int luaH_next(1401,38362
static int computesizes(1419,38745
*narray=narray1435,38976
static int countint(1438,39000
static int numusearray(1447,39146
static int numusehash(1469,39454
static void setarrayvector(1483,39700
static void setnodevector(1490,39901
t->lsizenode=lsizenode1510,40274
t->lastfree=lastfree1511,40305
static void resize(1513,40334
Node*old=old1530,40790
static void luaH_resizearray(1537,40953
static void rehash(1541,41093
static Table*luaH_new(luaH_new1555,41426
static void luaH_free(1568,41728
static Node*getfreepos(getfreepos1574,41909
static TValue*newkey(newkey1581,42040
othern=1590,42265
gkey(mp)->value=value1604,42479
gkey(mp)->value=key->value;gkey(mp)->tt=tt1604,42479
static const TValue*luaH_getnum(luaH_getnum1608,42571
static const TValue*luaH_getstr(luaH_getstr1622,42897
static const TValue*luaH_get(luaH_get1631,43100
default:default1642,43385
static TValue*luaH_set(luaH_set1653,43541
static TValue*luaH_setnum(luaH_setnum1665,43878
static TValue*luaH_setstr(luaH_setstr1675,44091
static int unbound_search(1685,44300
static int luaH_getn(1704,44613
#define makewhite(1719,44896
#define white2gray(1720,45018
#define black2gray(1721,45071
#define stringmark(1722,45120
#define isfinalized(1723,45173
#define markfinalized(1724,45218
#define markvalue(1725,45266
#define markobject(1726,45383
#define setthreshold(1727,45463
static void removeentry(1728,45532
static void reallymarkobject(1732,45619
case 1738,45729
UpVal*uv=uv1746,45858
gco2p(o)->gclist=gclist1768,46128
g->gray=gray1769,46154
break;1770,46165
default:default1772,46174
static void marktmu(1775,46188
static size_t luaC_separateudata(1785,46340
static int traversetable(1812,46932
i=1837,47497
static void traverseproto(1849,47689
for(i=0;i<f->sizep;sizep1858,47911
for(i=0;i<f->sizelocvars;sizelocvars1862,47973
static void traverseclosure(1867,48069
static void checkstacksizes(1881,48339
static void traversestack(1894,48759
for(o=l->stack;o<l->top;top1902,48937
static l_mem propagatemark(1908,49041
case 1920,49301
case 1927,49459
Proto*p=p1938,49688
g->gray=gray1939,49706
static size_t propagateall(1951,49967
static int iscleared(1956,50070
static void cleartable(1965,50291
i=1976,50475
l=1985,50637
static void freeobj(1988,50654
default:default2007,51070
#define sweepwholelist(2010,51084
static GCObject**sweeplist(sweeplist2011,51151
else{else2022,51467
static void checkSizes(2031,51571
static void GCTM(2041,51850
static void luaC_callGCTM(2067,52418
static void luaC_freeall(2071,52490
static void markmt(2079,52695
static void markroot(2084,52797
static void remarkupvals(2095,53014
static void atomic(2102,53173
static l_mem singlestep(2125,53632
case 2140,53822
case 2148,53998
static void luaC_step(2174,54329
static void luaC_barrierf(2197,54734
static void luaC_barrierback(2204,54881
static void luaC_link(2211,55033
static void luaC_linkupval(2218,55193
lua_Number r;2234,55444
TString*ts;ts2235,55458
}SemInfo;SemInfo2236,55470
typedef struct Token{Token2237,55480
int token;2238,55502
SemInfo seminfo;2239,55513
}Token;Token2240,55530
typedef struct LexState{LexState2241,55538
int current;2242,55563
int linenumber;2243,55576
int lastline;2244,55592
Token t;2245,55606
Token lookahead;2246,55615
struct FuncState*fs;fs2247,55632
struct lua_State*L;L2248,55653
ZIO*z;z2249,55673
Mbuffer*buff;buff2250,55680
TString*source;source2251,55694
char decpoint;2252,55710
}LexState;LexState2253,55725
#define state_size(2256,55837
#define fromstate(2257,55872
#define tostate(2258,55915
typedef struct LG{LG2259,55971
lua_State l;2260,55990
global_State g;2261,56003
}LG;LG2262,56019
static void stack_init(2263,56024
static void freestack(2277,56426
static void f_luaopen(2281,56579
static void preinit_state(2293,56882
static void close_state(2312,57228
static void luaE_freethread(2321,57488
static lua_State*lua_newstate(lua_newstate2326,57641
static void callallgcTM(2373,58530
static void lua_close(2377,58608
#define getcode(2389,58876
#define luaK_codeAsBx(2390,58928
#define luaK_setmultret(2391,59008
static int currentpc(2397,59372
static int currentline(2403,59527
static int lua_getstack(2410,59664
else status=2426,59959
static Proto*getluaproto(getluaproto2429,59991
static void funcinfo(2432,60073
static void info_tailcall(2447,60431
static void collectvalidlines(2455,60655
else{else2459,60755
static int auxgetinfo(2469,60943
for(;*what;what2476,61094
break;2496,61367
break;2500,61394
default:status=status2501,61401
static int lua_getinfo(2506,61440
status=2521,61732
static int isinstack(2531,61927
static void luaG_typeerror(2537,62046
static void luaG_concaterror(2549,62374
static void luaG_aritherror(2553,62514
static int luaG_ordererror(2559,62690
static void addinfo(2568,62991
static void luaG_errormsg(2577,63223
static void luaG_runerror(2588,63481
static int luaZ_fill(2595,63650
static void luaZ_init(2605,63849
static char*luaZ_openspace(luaZ_openspace2612,63980
#define opmode(2619,64133
static const lu_byte luaP_opmodes[luaP_opmodes2620,64200
#define next(2660,65482
#define currIsNewline(2661,65525
static const char*const luaX_tokens[luaX_tokens2662,65589
#define save_and_next(2671,65862
static void save(2672,65919
b->buffer[buffer2681,66169
static void luaX_init(2683,66203
static const char*luaX_token2str(luaX_token2str2691,66379
static const char*txtToken(txtToken2699,66592
static void luaX_lexerror(2710,66795
static void luaX_syntaxerror(2718,67086
static TString*luaX_newstring(luaX_newstring2721,67181
static void inclinenumber(2731,67404
static void luaX_setinput(2739,67610
static int check_next(2751,67863
static void buffreplace(2757,67984
static void read_numeral(2763,68139
static int skip_sep(2776,68525
static void read_long_string(2786,68708
break;2803,69064
static void read_string(2822,69356
continue;2861,70150
continue;2866,70186
seminfo->ts=ts2873,70249
static int llex(2876,70333
continue;2900,70762
case'case2902,70774
ts=2966,71879
else{else2975,72044
static void luaX_next(2984,72099
ls->t.token=token2991,72253
static void luaX_lookahead(2993,72292
#define hasjumps(2996,72388
static int isnumeral(2997,72424
static void luaK_nil(3000,72504
else{else3007,72651
static int luaK_jump(3022,72929
static void luaK_ret(3030,73074
static int condjump(3033,73174
static void fixjump(3037,73288
static int luaK_getlabel(3044,73515
static int getjump(3048,73595
static Instruction*getjumpcontrol(getjumpcontrol3055,73733
static int need_value(3062,73895
static int patchtestreg(3069,74074
static void removevalues(3079,74336
static void patchlistaux(3083,74460
static void dischargejpc(3094,74690
static void luaK_patchlist(3098,74797
static void luaK_patchtohere(3105,74963
static void luaK_concat(3109,75068
static void luaK_checkstack(3121,75271
static void luaK_reserveregs(3129,75508
static void freereg(3133,75599
static void freeexp(3138,75694
static int addk(3142,75786
static int luaK_stringK(3160,76228
static int luaK_numberK(3165,76335
static int boolK(3170,76439
static int nilK(3175,76529
static void luaK_setreturns(3181,76641
static void luaK_setoneret(3191,76887
static void luaK_dischargevars(3201,77083
default:break;break3229,77604
static int code_label(3232,77623
static void discharge2reg(3236,77748
case VRELOCABLE:VRELOCABLE3255,78112
e->u.s.info=info3269,78302
e->k=k3270,78319
static void discharge2anyreg(3272,78337
static void exp2reg(3278,78475
final=3292,78828
e->f=f3296,78929
e->u.s.info=info3297,78945
e->k=k3298,78962
static void luaK_exp2nextreg(3300,78980
static int luaK_exp2anyreg(3306,79130
static void luaK_exp2val(3318,79392
static int luaK_exp2RK(3324,79514
else break;3338,79813
default:break;break3345,79910
static void luaK_storevar(3349,79959
case VUPVAL:VUPVAL3356,80109
case VGLOBAL:VGLOBAL3361,80210
case VINDEXED:VINDEXED3366,80311
static void luaK_self(3377,80460
static void invertjump(3388,80725
static int jumponcond(3392,80854
static void luaK_goiftrue(3404,81155
default:default3417,81359
e->t=t3424,81456
static void luaK_goiffalse(3426,81469
case VJMP:VJMP3434,81611
default:default3438,81648
e->f=f3445,81745
static void codenot(3447,81758
{int temp=3474,82154
{int temp=e->f;e->f=f3474,82154
{int temp=e->f;e->f=e->t;e->t=t3474,82154
static void luaK_indexed(3478,82239
static int constfolding(3482,82346
e1->u.nval=nval3503,82900
static void codearith(3506,82926
e1->u.s.info=info3520,83202
e1->k=k3521,83244
static void codecomp(3524,83266
e1->u.s.info=info3535,83497
e1->k=k3536,83538
static void luaK_prefix(3538,83552
case OPR_NOT:codenot(fs,e);break;3548,83768
default:default3554,83877
static void luaK_infix(3557,83891
static void luaK_posfix(3582,84270
break;3607,84798
case OPR_ADD:codearith(fs,OP_ADD,e1,e2);break;3609,84807
case OPR_SUB:codearith(fs,OP_SUB,e1,e2);break;3610,84854
case OPR_MUL:codearith(fs,OP_MUL,e1,e2);break;3611,84901
case OPR_DIV:codearith(fs,OP_DIV,e1,e2);break;3612,84948
case OPR_MOD:codearith(fs,OP_MOD,e1,e2);break;3613,84995
case OPR_POW:codearith(fs,OP_POW,e1,e2);break;3614,85042
case OPR_EQ:codecomp(fs,OP_EQ,1,e1,e2);break;3615,85089
case OPR_NE:codecomp(fs,OP_EQ,0,e1,e2);break;3616,85135
case OPR_LT:codecomp(fs,OP_LT,1,e1,e2);break;3617,85181
case OPR_LE:codecomp(fs,OP_LE,1,e1,e2);break;3618,85227
case OPR_GT:codecomp(fs,OP_LT,0,e1,e2);break;3619,85273
case OPR_GE:codecomp(fs,OP_LE,0,e1,e2);break;3620,85319
default:default3621,85365
static void luaK_fixline(3624,85379
static int luaK_code(3627,85462
static int luaK_codeABC(3638,85812
static int luaK_codeABx(3641,85939
static void luaK_setlist(3644,86069
fs->freereg=freereg3653,86351
#define hasmultret(3655,86373
#define getlocvar(3656,86421
#define luaY_checklimit(3657,86480
typedef struct BlockCnt{BlockCnt3658,86543
struct BlockCnt*previous;previous3659,86568
int breaklist;3660,86594
lu_byte nactvar;3661,86609
lu_byte upval;3662,86626
lu_byte isbreakable;3663,86641
}BlockCnt;BlockCnt3664,86662
static void anchor_token(3667,86746
static void error_expected(3673,86911
static void errorlimit(3677,87060
static int testnext(3684,87365
static void check(3691,87469
static void checknext(3695,87550
#define check_condition(3699,87622
static void check_match(3700,87691
static TString*str_checkname(str_checkname3711,88005
static void init_exp(3718,88128
static void codestring(3723,88218
static void checkname(3726,88316
static int registerlocalvar(3729,88400
#define new_localvarliteral(3740,88795
static void new_localvar(3741,88899
static void adjustlocalvars(3746,89113
static void removevars(3753,89301
static int indexupvalue(3758,89442
f->upvalues[upvalues3771,89846
fs->upvalues[f->nups].k=k3773,89904
fs->upvalues[f->nups].info=info3774,89945
static int searchvar(3777,90016
static void markupval(3785,90155
static int singlevaraux(3790,90288
else{else3795,90424
static void singlevar(3812,90671
static void adjust_assign(3818,90861
static void enterlevel(3836,91235
#define leavelevel(3840,91355
static void enterblock(3841,91398
static void leaveblock(3849,91589
static void pushclosure(3858,91820
static void open_func(3874,92349
static void close_func(3899,92765
static Proto*luaY_parser(luaY_parser3921,93442
static void field(3934,93806
static void yindex(3942,93967
struct ConsControl{ConsControl3948,94082
expdesc v;3949,94102
expdesc*t;t3950,94113
int nh;3951,94124
int na;3952,94132
int tostore;3953,94140
static void recfield(3955,94156
rkkey=3968,94451
fs->freereg=freereg3971,94567
static void closelistfield(3973,94586
static void lastlistfield(3982,94813
static void listfield(3995,95124
static void constructor(4001,95295
static void parlist(4039,96047
f->numparams=numparams4061,96462
static void body(4064,96552
new_fs.f->lastlinedefined=lastlinedefined4076,96819
static int explist1(4081,96947
static void funcargs(4091,97096
break;4108,97481
base=4124,97686
fs->freereg=freereg4134,97909
static void prefixexp(4136,97931
static void primaryexp(4156,98238
static void simpleexp(4189,98691
case TK_DOTS:TK_DOTS4212,99028
static UnOpr getunopr(4236,99412
static BinOpr getbinopr(4244,99565
lu_byte left;4265,100046
lu_byte right;4266,100060
}priority[priority4267,100075
static BinOpr subexpr(4274,100187
op=4285,100422
static void expr(4298,100681
static int block_follow(4301,100741
static void block(4309,100892
struct LHS_assign{LHS_assign4316,101009
struct LHS_assign*prev;prev4317,101028
expdesc v;4318,101052
static void check_conflict(4320,101066
static void assignment(4341,101477
static int cond(4373,102175
static void breakstat(4380,102294
static void whilestat(4394,102600
static void repeatstat(4410,102956
static int exp1(4433,103443
static void forbody(4441,103552
static void fornum(4459,104094
static void forlist(4478,104553
static void forstat(4496,105073
static int test_then_block(4511,105464
static void ifstat(4519,105606
static void localfunc(4540,106094
static void localstat(4551,106383
static int funcname(4567,106663
static void funcstat(4578,106845
static void exprstat(4587,107042
static void retstat(4598,107231
first=4612,107530
nret=4613,107549
static int statement(4626,107693
static void chunk(4678,108341
static const TValue*luaV_tonumber(luaV_tonumber4688,108540
static int luaV_tostring(4698,108750
static void callTMres(4709,108941
static void callTM(4722,109256
static void luaV_gettable(4732,109502
t=4751,109939
static void luaV_settable(4755,109986
t=4778,110500
static int call_binTM(4782,110550
static const TValue*get_compTM(get_compTM4791,110796
static int call_orderTM(4803,111086
static int l_strcmp(4814,111390
static int luaV_lessthan(4833,111730
static int lessequal(4845,112086
static int luaV_equalval(4859,112496
static void luaV_concat(4883,113113
else{else4892,113412
buffer=4901,113630
tl=4902,113671
size_t l=4904,113695
static void Arith(4914,113859
#define runtime_check(4935,114550
#define RA(4936,114593
#define RB(4937,114625
#define RKB(4938,114698
#define RKC(4939,114811
#define KBx(4940,114924
#define dojump(4941,114996
#define Protect(4942,115031
#define arith_op(4943,115084
static void luaV_execute(4944,115278
case OP_LOADNIL:OP_LOADNIL4972,115722
continue;4977,115796
case OP_GETUPVAL:OP_GETUPVAL4979,115808
case OP_SETUPVAL:OP_SETUPVAL5001,116191
case OP_NEWTABLE:OP_NEWTABLE5011,116374
case OP_SELF:OP_SELF5018,116528
case OP_UNM:OP_UNM5048,116966
continue;5057,117119
case OP_NOT:OP_NOT5059,117131
case OP_LEN:OP_LEN5064,117202
continue;5082,117497
case OP_CONCAT:OP_CONCAT5084,117509
case OP_EQ:OP_EQ5095,117703
case OP_TESTSET:OP_TESTSET5127,118176
continue;5134,118298
case OP_CALL:OP_CALL5136,118310
case OP_TAILCALL:OP_TAILCALL5156,118577
case 5176,119013
case OP_RETURN:OP_RETURN5185,119072
case OP_FORLOOP:OP_FORLOOP5198,119280
continue;5208,119543
case OP_FORPREP:OP_FORPREP5210,119555
case OP_TFORLOOP:OP_TFORLOOP5225,120018
continue;5239,120268
case OP_SETLIST:OP_SETLIST5241,120280
h=5252,120470
last=5253,120484
TValue*val=val5257,120568
continue;5261,120650
continue;5284,121062
case OP_VARARG:OP_VARARG5286,121074
for(j=0;j<b;b5297,121266
continue;5305,121353
#define api_checknelems(5310,121371
#define api_checkvalidindex(5311,121438
#define api_incr_top(5312,121511
static TValue*index2adr(index2adr5313,121581
default:default5332,122039
static Table*getcurrenv(getcurrenv5341,122191
static int lua_checkstack(5349,122330
static lua_CFunction lua_atpanic(5360,122548
static int lua_gettop(5366,122686
static void lua_settop(5369,122757
static void lua_remove(5381,123000
static void lua_insert(5388,123146
static void lua_replace(5396,123315
static void lua_pushvalue(5416,123763
static int lua_type(5420,123865
static const char*lua_typename(lua_typename5424,123980
static int lua_iscfunction(5428,124090
static int lua_isnumber(5432,124190
static int lua_isstring(5437,124304
static int lua_rawequal(5441,124395
static int lua_lessthan(5447,124600
static lua_Number lua_tonumber(5456,124818
static lua_Integer lua_tointeger(5464,124968
static int lua_toboolean(5476,125189
static const char*lua_tolstring(lua_tolstring5480,125292
o=5488,125481
static size_t lua_objlen(5493,125558
static lua_CFunction lua_tocfunction(5507,125841
static void*lua_touserdata(lua_touserdata5511,125974
static void lua_pushnil(5519,126148
static void lua_pushnumber(5523,126226
static void lua_pushinteger(5527,126320
static void lua_pushlstring(5531,126426
static void lua_pushstring(5536,126571
static const char*lua_pushvfstring(lua_pushvfstring5542,126692
static const char*lua_pushfstring(lua_pushfstring5549,126852
static void lua_pushcclosure(5558,127049
static void lua_pushboolean(5570,127322
static int lua_pushthread(5574,127415
static void lua_gettable(5579,127527
static void lua_getfield(5585,127669
static void lua_rawget(5594,127880
static void lua_rawgeti(5600,128036
static void lua_createtable(5607,128210
static int lua_getmetatable(5612,128353
static void lua_getfenv(5637,128714
static void lua_settable(5657,129044
static void lua_setfield(5665,129219
static void lua_rawset(5675,129447
static void lua_rawseti(5684,129675
static int lua_setmetatable(5693,129905
static int lua_setfenv(5726,130423
#define adjustresults(5751,130876
#define checkresults(5752,130960
static void lua_call(5753,131049
struct CallS{CallS5761,131259
StkId func;5762,131273
int nresults;5763,131285
static void f_call(5765,131302
static int lua_pcall(5769,131418
c.func=func5782,131700
c.nresults=nresults5783,131725
status=5784,131746
static int lua_load(5788,131847
static int lua_error(5797,132070
static int lua_next(5802,132157
static void lua_concat(5815,132367
static void*lua_newuserdata(lua_newuserdata5827,132599
#define luaL_getn(5835,132772
#define luaL_setn(5836,132817
typedef struct luaL_Reg{luaL_Reg5837,132851
const char*name;name5838,132876
lua_CFunction func;5839,132893
}luaL_Reg;luaL_Reg5840,132913
#define luaL_argcheck(5854,133512
#define luaL_checkstring(5855,133612
#define luaL_optstring(5856,133673
#define luaL_checkint(5857,133736
#define luaL_optint(5858,133794
#define luaL_typename(5859,133854
#define luaL_getmetatable(5860,133912
#define luaL_opt(5861,133973
typedef struct luaL_Buffer{luaL_Buffer5862,134036
char*p;p5863,134064
int lvl;5864,134072
lua_State*L;L5865,134081
char buffer[buffer5866,134094
}luaL_Buffer;luaL_Buffer5867,134115
#define luaL_addchar(5868,134129
#define luaL_addsize(5869,134234
static int luaL_argerror(5871,134318
static int luaL_typerror(5887,134772
static void tag_error(5892,134959
static void luaL_where(5895,135057
static int luaL_error(5906,135291
static int luaL_newmetatable(5915,135481
static void*luaL_checkudata(luaL_checkudata5925,135700
static void luaL_checkstack(5939,135967
static void luaL_checktype(5943,136106
static void luaL_checkany(5947,136209
static const char*luaL_checklstring(luaL_checklstring5951,136327
static const char*luaL_optlstring(luaL_optlstring5956,136476
static lua_Number luaL_checknumber(5965,136682
static lua_Integer luaL_checkinteger(5971,136840
static lua_Integer luaL_optinteger(5977,137002
static int luaL_getmetafield(5981,137126
static void luaL_register(5995,137361
static int libsize(5999,137469
static void luaI_openlib(6004,137559
for(;l->name;name6020,137991
int i;6021,138010
for(i=0;i<nup;nup6022,138017
static const char*luaL_findtable(luaL_findtable6029,138146
fname=6050,138607
#define bufflen(6054,138650
#define bufffree(6055,138689
static int emptybuffer(6056,138738
static void adjuststack(6066,138897
else break;6077,139113
B->lvl=lvl6080,139168
static char*luaL_prepbuffer(luaL_prepbuffer6083,139195
static void luaL_addlstring(6088,139294
static void luaL_pushresult(6092,139395
static void luaL_addvalue(6097,139492
static void luaL_buffinit(6113,139740
typedef struct LoadF{LoadF6118,139830
int extraline;6119,139852
FILE*f;f6120,139867
char buff[buff6121,139875
}LoadF;LoadF6122,139894
static const char*getF(getF6123,139902
*size=size6132,140076
static int errfile(6135,140157
static int luaL_loadfile(6142,140403
c=6157,140733
status=6170,141036
readstatus=6171,141084
typedef struct LoadS{LoadS6180,141259
const char*s;s6181,141281
size_t size;6182,141295
}LoadS;LoadS6183,141308
static const char*getS(getS6184,141316
static int luaL_loadbuffer(6192,141475
static void*l_alloc(l_alloc6199,141632
static int panic(6209,141794
static lua_State*luaL_newstate(luaL_newstate6215,141936
static int luaB_tonumber(6220,142054
else{else6229,142231
static int luaB_error(6246,142528
static int luaB_setmetatable(6256,142726
static void getfunc(6267,143015
static int luaB_setfenv(6281,143422
static int luaB_rawget(6296,143773
static int luaB_type(6303,143899
static int luaB_next(6308,144004
static int luaB_pairs(6318,144143
static int ipairsaux(6325,144288
static int luaB_ipairs(6333,144450
static int load_aux(6340,144602
static int luaB_loadstring(6349,144725
static int luaB_loadfile(6355,144915
static int luaB_assert(6359,145042
static int luaB_unpack(6365,145214
static int luaB_pcall(6379,145526
static int luaB_newproxy(6387,145711
else{else6398,145951
static const luaL_Reg base_funcs[base_funcs6411,146204
static void auxopen(6426,146562
static void base_open(6432,146721
static int luaopen_base(6448,147175
#define aux_getn(6452,147239
static int tinsert(6453,147299
break;6469,147532
static int tremove(6479,147677
static void addfield(6494,147948
static int tconcat(6501,148168
luaL_pushresult(&b)b6516,148500
static void set2(6519,148533
static int sort_comp(6523,148618
static void auxsort(6537,148864
i=6565,149322
i=l;j=6565,149322
else{else6587,149724
static int sort(6593,149769
static const luaL_Reg tab_funcs[tab_funcs6602,149940
static int luaopen_table(6609,150066
static const char*const fnames[fnames6613,150153
static int pushresult(6614,150206
static void fileerror(6630,150489
#define tofilep(6634,150650
static int io_type(6635,150707
static FILE*tofile(tofile6648,151011
static FILE**newfile(newfile6654,151135
static int io_noclose(6661,151298
static int io_pclose(6666,151411
static int io_fclose(6672,151532
static int aux_close(6678,151652
static int io_close(6683,151771
static int io_gc(6689,151886
static int io_open(6695,151975
static FILE*getiofile(getiofile6702,152187
static int g_iofile(6710,152392
static int io_input(6728,152723
static int io_output(6731,152785
static void aux_lines(6735,152885
static int f_lines(6740,153028
static int io_lines(6745,153102
else{else6750,153210
static int read_number(6760,153388
static int test_eof(6771,153542
static int read_line(6777,153656
l=6787,153861
static int read_chars(6797,153982
luaL_pushresult(&b)b6810,154241
static int g_read(6813,154298
else{else6830,154669
static int io_read(6858,155078
static int f_read(6861,155148
static int io_readline(6864,155212
static int g_write(6882,155601
static int io_write(6898,155941
static int f_write(6901,156013
static int io_flush(6904,156079
static int f_flush(6907,156168
static const luaL_Reg iolib[iolib6910,156251
static const luaL_Reg flib[flib6922,156474
static void createmeta(6931,156630
static void createstdfile(6937,156778
static void newfenv(6947,156990
static int luaopen_io(6952,157124
static int os_pushresult(6968,157489
static int os_remove(6981,157719
static int os_exit(6985,157853
static const luaL_Reg syslib[syslib6988,157925
static int luaopen_os(6993,158013
#define uchar(6997,158091
static ptrdiff_t posrelat(6998,158128
static int str_sub(7002,158237
static int str_lower(7014,158578
static int str_upper(7025,158798
static int str_rep(7036,159018
static int str_byte(7047,159234
static int str_char(7064,159692
luaL_pushresult(&b)b7074,159912
typedef struct MatchState{MatchState7077,159945
const char*src_init;src_init7078,159972
const char*src_end;src_end7079,159993
lua_State*L;L7080,160013
int level;7081,160026
const char*init;init7083,160045
ptrdiff_t len;7084,160062
}capture[capture7085,160077
}MatchState;MatchState7086,160091
static int check_capture(7087,160104
static int capture_to_close(7093,160269
static const char*classend(classend7099,160464
static int match_class(7121,160831
static int matchbracketclass(7138,161253
static int singlematch(7159,161573
static const char*matchbalance(matchbalance7168,161850
static const char*max_expand(max_expand7186,162153
static const char*min_expand(min_expand7198,162408
static const char*start_capture(start_capture7209,162641
static const char*end_capture(end_capture7221,162946
static const char*match_capture(match_capture7230,163174
static const char*match(match7239,163406
goto dflt;7276,164168
default:dflt:dflt7288,164284
static const char*lmemfind(lmemfind7315,164685
static void push_onecapture(7335,165007
else{else7343,165191
static int push_captures(7352,165406
static int str_find_aux(7360,165643
static int str_find(7400,166476
static int str_match(7403,166538
static int gmatch_aux(7406,166601
static int gmatch(7430,167125
static void add_s(7438,167288
static void add_value(7458,167660
static int str_gsub(7488,168165
else break;7517,168740
luaL_addlstring(&b,src,ms.src_end-src)src7520,168771
luaL_pushresult(&b)b7521,168811
static void addquoted(7525,168866
static const char*scanformat(scanformat7553,169269
*form=form7570,169781
static void addintlen(7573,169805
static int str_format(7580,169963
luaL_pushresult(&b)b7644,171226
static const luaL_Reg strlib[strlib7647,171259
static void createmetatable(7661,171522
static int luaopen_string(7671,171737
static const luaL_Reg lualibs[lualibs7676,171843
static void luaL_openlibs(7684,172001
typedef unsigned int UB;7692,172174
static UB barg(7693,172199
union{lua_Number n;7694,172236
union{lua_Number n;U64 b;7694,172236
#define BRET(7699,172395
static int tobit(7700,172459
static int bnot(7702,172507
static int band(7704,172555
static int bor(7706,172656
static int bxor(7708,172756
static int lshift(7710,172857
static int rshift(7712,172931
static int arshift(7714,173005
static int rol(7716,173085
static int ror(7718,173170
static int bswap(7720,173255
static int tohex(7722,173360
static const struct luaL_Reg bitlib[bitlib7734,173663
int main(7749,173912

vendor/github.com/LuaJIT/LuaJIT/src/lauxlib.h,921
#define lauxlib_h9,172
#define LUA_ERRFILE 19,290
typedef struct luaL_Reg 21,330
  const char *name;name22,356
  lua_CFunction func;23,376
} luaL_Reg;24,398
#define LUA_NOREF 59,2229
#define LUA_REFNIL 60,2258
#define luaL_argcheck(101,3937
#define luaL_checkstring(103,4047
#define luaL_optstring(104,4111
#define luaL_checkint(105,4178
#define luaL_optint(106,4238
#define luaL_checklong(107,4301
#define luaL_optlong(108,4363
#define luaL_typename(110,4429
#define luaL_dofile(112,4490
#define luaL_dostring(115,4579
#define luaL_getmetatable(118,4670
#define luaL_opt(120,4744
#define luaL_newlibtable(123,4833
#define luaL_newlib(125,4919
typedef struct luaL_Buffer 135,5153
  char *p;p136,5182
  int lvl;137,5228
  lua_State *L;L138,5285
  char buffer[buffer139,5301
} luaL_Buffer;140,5333
#define luaL_addchar(142,5349
#define luaL_putchar(147,5506
#define luaL_addsize(149,5551

vendor/github.com/LuaJIT/LuaJIT/src/lib_aux.c,1191
#define lib_aux_c13,322
#define LUA_LIB14,340
LUALIB_API int luaL_fileresult(31,631
LUALIB_API int luaL_execresult(49,1061
LUALIB_API const char *luaL_findtable(luaL_findtable81,1755
static int libsize(107,2679
LUALIB_API void luaL_pushmodule(114,2789
LUALIB_API void luaL_openlib(128,3283
LUALIB_API void luaL_register(142,3639
LUALIB_API void luaL_setfuncs(148,3771
LUALIB_API const char *luaL_gsub(luaL_gsub161,4153
#define bufflen(180,4750
#define bufffree(181,4802
static int emptybuffer(183,4864
static void adjuststack(194,5072
LUALIB_API char *luaL_prepbuffer(luaL_prepbuffer212,5507
LUALIB_API void luaL_addlstring(219,5623
LUALIB_API void luaL_addstring(225,5742
LUALIB_API void luaL_pushresult(230,5845
LUALIB_API void luaL_addvalue(237,5958
LUALIB_API void luaL_buffinit(254,6413
#define FREELIST_REF	263,6604
#define abs_index(266,6678
LUALIB_API int luaL_ref(269,6777
LUALIB_API void luaL_unref(291,7494
static int panic(304,7875
static void *mem_alloc(mem_alloc320,8265
LUALIB_API lua_State *luaL_newstate(luaL_newstate332,8468
LUALIB_API lua_State *luaL_newstate(luaL_newstate343,8635
LUA_API lua_State *lua_newstate(lua_newstate358,8937

vendor/github.com/LuaJIT/LuaJIT/src/lib_base.c,1167
#define lib_base_c11,277
#define LUA_LIB12,296
#define LJLIB_MODULE_base41,855
LJLIB_ASM(43,882
LJLIB_PUSH(56,1116
static int ffh_pairs(85,1817
#define ffh_pairs(102,2379
LJLIB_PUSH(105,2453
LJLIB_NOREGUV LJLIB_ASM(111,2548
LJLIB_PUSH(118,2678
LJLIB_ASM_(126,2855
LJLIB_CF(141,3301
LJLIB_CF(157,3689
LJLIB_ASM(183,4322
LJLIB_CF(190,4435
LJLIB_CF(199,4589
LJLIB_CF(208,4771
LJLIB_CF(221,5017
LJLIB_CF(242,5519
LJLIB_ASM(259,5960
LJLIB_ASM(309,7411
LJLIB_CF(325,7876
LJLIB_ASM(337,8100
LJLIB_ASM_(343,8236
LJLIB_CF(363,8698
static const char *reader_func(reader_func374,8989
LJLIB_CF(393,9529
LJLIB_CF(412,10186
LJLIB_CF(417,10236
LJLIB_CF(430,10569
LJLIB_CF(436,10657
LJLIB_PUSH(456,11250
LJLIB_PUSH(483,12032
LJLIB_PUSH(522,12994
#define LJLIB_MODULE_coroutine529,13137
LJLIB_CF(548,13642
LJLIB_CF(561,13834
LJLIB_CF(567,13933
LJLIB_ASM(577,14147
static int ffh_resume(583,14240
LJLIB_ASM(597,14696
LJLIB_NOREG LJLIB_ASM(604,14861
void LJ_FASTCALL lj_ffh_coroutine_wrap_err(617,15234
LJLIB_CF(629,15540
static void setpc_wrap_aux(641,15806
static void newproxy_weaktable(648,16009
LUALIB_API int luaopen_base(659,16341

vendor/github.com/LuaJIT/LuaJIT/src/lib_bit.c,301
#define lib_bit_c6,107
#define LUA_LIB7,125
#define LJLIB_MODULE_bit29,538
static int bit_result64(32,578
static int32_t bit_checkbit(40,783
LJLIB_ASM(55,1118
LJLIB_ASM(67,1348
LJLIB_ASM(79,1592
LJLIB_ASM(91,1849
LJLIB_ASM_(109,2312
LJLIB_ASM_(140,3236
LUALIB_API int luaopen_bit(175,4239

vendor/github.com/LuaJIT/LuaJIT/src/lib_debug.c,850
#define lib_debug_c9,244
#define LUA_LIB10,264
#define LJLIB_MODULE_debug24,522
LJLIB_CF(26,550
LJLIB_CF(32,631
LJLIB_CF(41,775
LJLIB_CF(52,942
LJLIB_CF(59,1029
static void settabss(70,1261
static void settabsi(76,1381
static void settabsb(82,1494
static lua_State *getthread(getthread88,1607
static void treatstackoption(99,1799
LJLIB_CF(110,2013
LJLIB_CF(161,3584
LJLIB_CF(187,4164
static int debug_getupvalue(201,4517
LJLIB_CF(217,4866
LJLIB_CF(222,4931
LJLIB_CF(228,5021
LJLIB_CF(239,5324
LJLIB_CF(260,5805
LJLIB_CF(271,5990
#define KEY_HOOK	286,6332
static void hookf(288,6367
static int makemask(303,6796
static char *unmakemask(unmakemask313,7065
LJLIB_CF(323,7299
LJLIB_CF(344,7867
LJLIB_CF(362,8371
#define LEVELS1	381,8880
#define LEVELS2	382,8941
LJLIB_CF(384,9004
LUALIB_API int luaopen_debug(400,9390

vendor/github.com/LuaJIT/LuaJIT/src/lib_ffi.c,1471
#define lib_ffi_c6,94
#define LUA_LIB7,112
static CTypeID ffi_checkctype(39,728
static GCcdata *ffi_checkcdata(ffi_checkcdata69,1607
static void *ffi_checkptr(ffi_checkptr78,1831
static int32_t ffi_checkint(90,2153
#define LJLIB_MODULE_ffi_meta104,2523
static int ffi_index_meta(107,2605
LJLIB_CF(146,3598
LJLIB_CF(163,4065
static int ffi_arith(183,4634
LJLIB_CF(190,4843
LJLIB_CF(195,4925
LJLIB_CF(200,5008
LJLIB_CF(205,5090
LJLIB_CF(210,5172
LJLIB_CF(218,5329
LJLIB_CF(245,6045
LJLIB_CF(250,6128
LJLIB_CF(255,6211
LJLIB_CF(260,6294
LJLIB_CF(265,6377
LJLIB_CF(270,6460
LJLIB_CF(275,6543
LJLIB_CF(281,6660
static int ffi_pairs(328,8058
LJLIB_CF(342,8481
LJLIB_CF(347,8546
LJLIB_PUSH(352,8613
#define LJLIB_MODULE_ffi_clib358,8759
LJLIB_CF(373,9181
LJLIB_CF(393,9692
LJLIB_CF(418,10403
#define LJLIB_MODULE_ffi_callback430,10696
static int ffi_callback_set(432,10731
LJLIB_CF(457,11443
LJLIB_CF(462,11512
LJLIB_PUSH(468,11617
#define LJLIB_MODULE_ffi474,11759
LJLIB_CF(493,12157
LJLIB_CF(530,13324
LJLIB_CF(548,13923
LJLIB_CF(560,14224
LJLIB_CF(584,14998
LJLIB_CF(614,15989
LJLIB_CF(636,16611
LJLIB_CF(646,16867
LJLIB_CF(669,17493
LJLIB_CF(678,17644
LJLIB_CF(699,18214
LJLIB_CF(713,18572
#define H_(723,18831
LJLIB_CF(726,18907
#undef H_762,19795
LJLIB_PUSH(764,19806
LJLIB_PUSH(790,20559
LJLIB_PUSH(806,21075
LJLIB_PUSH(816,21357
static void ffi_register_module(838,21983
LUALIB_API int luaopen_ffi(848,22282

vendor/github.com/LuaJIT/LuaJIT/src/lib_init.c,200
#define lib_init_c9,239
#define LUA_LIB10,258
static const luaL_Reg lj_lib_load[lj_lib_load18,356
static const luaL_Reg lj_lib_preload[lj_lib_preload32,768
LUALIB_API void luaL_openlibs(39,889

vendor/github.com/LuaJIT/LuaJIT/src/lib_io.c,1510
#define lib_io_c12,281
#define LUA_LIB13,298
typedef struct IOFileUD 30,595
  FILE *fp;fp31,621
  uint32_t type;32,653
} IOFileUD;33,687
#define IOFILE_TYPE_FILE	35,700
#define IOFILE_TYPE_PIPE	36,747
#define IOFILE_TYPE_STDF	37,786
#define IOFILE_TYPE_MASK	38,841
#define IOFILE_FLAG_CLOSE	40,869
#define IOSTDF_UD(42,937
#define IOSTDF_IOF(43,995
static IOFileUD *io_tofilep(io_tofilep47,1143
static IOFileUD *io_tofile(io_tofile55,1366
static FILE *io_stdfile(io_stdfile63,1519
static IOFileUD *io_file_new(io_file_new71,1692
static IOFileUD *io_file_open(io_file_open83,2040
static int io_file_close(93,2343
static int io_file_readnum(126,3174
static int io_file_readline(145,3548
static void io_file_readall(162,3982
static int io_file_readlen(176,4299
static int io_file_read(192,4681
static int io_file_write(229,5746
static int io_file_iter(249,6281
static int io_file_lines(274,7009
#define LJLIB_MODULE_io_method285,7281
LJLIB_CF(287,7313
LJLIB_CF(294,7465
LJLIB_CF(299,7542
LJLIB_CF(304,7644
LJLIB_CF(309,7764
LJLIB_CF(352,8722
LJLIB_CF(363,9073
LJLIB_CF(369,9147
LJLIB_CF(377,9326
LJLIB_PUSH(387,9524
#define LJLIB_MODULE_io393,9666
LJLIB_CF(407,10028
LJLIB_CF(427,10560
LJLIB_CF(438,10805
LJLIB_CF(443,10864
LJLIB_CF(448,10948
LJLIB_CF(453,11073
static int io_std_getset(458,11216
LJLIB_CF(475,11643
LJLIB_CF(480,11716
LJLIB_CF(485,11791
LJLIB_CF(499,12199
static GCobj *io_std_new(io_std_new515,12595
LUALIB_API int luaopen_io(528,12995

vendor/github.com/LuaJIT/LuaJIT/src/lib_jit.c,1425
#define lib_jit_c6,94
#define LUA_LIB7,112
#define LJLIB_MODULE_jit41,733
static int setjitmode(43,759
LJLIB_CF(68,1534
LJLIB_CF(73,1596
LJLIB_CF(78,1660
static void flagbits_to_strings(92,1992
LJLIB_CF(101,2233
LJLIB_CF(116,2595
LJLIB_PUSH(144,3400
#define LJLIB_MODULE_jit_util153,3649
static void setintfield(175,4192
LJLIB_CF(181,4384
LJLIB_CF(223,5999
LJLIB_CF(240,6378
LJLIB_CF(260,6848
static GCtrace *jit_checktrace(jit_checktrace276,7263
static const char *const jit_trlinkname[jit_trlinkname286,7506
LJLIB_CF(292,7712
LJLIB_CF(312,8374
LJLIB_CF(330,8937
LJLIB_CF(359,9686
LJLIB_CF(381,10405
LJLIB_CF(394,10753
LJLIB_CF(418,11476
static int luaopen_jit_util(432,11720
#define LJLIB_MODULE_jit_opt442,11907
static int jitopt_level(445,11969
static int jitopt_flag(460,12421
static int jitopt_param(488,13086
LJLIB_CF(512,13723
#define LJLIB_MODULE_jit_profile539,14295
static const char KEY_PROFILE_THREAD 543,14403
static const char KEY_PROFILE_FUNC 544,14447
static void jit_profile_callback(546,14490
LJLIB_CF(570,15174
LJLIB_CF(589,15848
LJLIB_CF(604,16252
static int luaopen_jit_profile(625,16677
static const int32_t jit_param_default[jit_param_default637,16918
#define JIT_PARAMINIT(638,16975
#undef JIT_PARAMINIT640,17052
static uint32_t jit_cpudetect(650,17194
#define JIT_F_SSE2	658,17406
static void jit_init(743,19755
LUALIB_API int luaopen_jit(756,20037

vendor/github.com/LuaJIT/LuaJIT/src/lib_math.c,649
#define lib_math_c8,114
#define LUA_LIB9,133
#define LJLIB_MODULE_math21,349
LJLIB_ASM(23,376
LJLIB_ASM_(28,462
LJLIB_ASM_(36,681
LJLIB_LUA(66,1752
LJLIB_ASM_(75,2008
LJLIB_ASM(89,2253
LJLIB_ASM_(95,2406
struct RandomState 109,2887
  uint64_t gen[gen110,2908
  int valid;111,2965
typedef union { uint64_t u64;115,3080
typedef union { uint64_t u64; double d;115,3080
typedef union { uint64_t u64; double d; } U64double;115,3080
#define TW223_GEN(118,3200
LJ_NOINLINE uint64_t LJ_FASTCALL lj_math_random_step(124,3427
static void random_init(135,3733
LJLIB_PUSH(153,4229
LJLIB_PUSH(206,5493
LUALIB_API int luaopen_math(218,5823

vendor/github.com/LuaJIT/LuaJIT/src/lib_os.c,448
#define lib_os_c12,279
#define LUA_LIB13,296
#define LJLIB_MODULE_os38,695
LJLIB_CF(40,720
LJLIB_CF(64,1102
LJLIB_CF(70,1238
LJLIB_CF(77,1429
LJLIB_CF(102,1888
LJLIB_CF(112,2055
LJLIB_CF(125,2370
static void setfield(133,2563
static void setboolfield(139,2688
static int getboolfield(147,2890
static int getfield(156,3074
LJLIB_CF(171,3362
LJLIB_CF(229,4830
LJLIB_CF(254,5521
LJLIB_CF(263,5760
LUALIB_API int luaopen_os(287,6404

vendor/github.com/LuaJIT/LuaJIT/src/lib_package.c,2293
#define lib_package_c9,246
#define LUA_LIB10,268
#define PACKAGE_ERR_LIB	23,520
#define PACKAGE_ERR_FUNC	24,547
#define PACKAGE_ERR_LOAD	25,574
#define PACKAGE_LIB_FAIL	28,645
#define setprogdir(29,677
#define SYMPREFIX_CF	32,739
#define SYMPREFIX_BC	33,774
static void ll_unloadlib(39,854
static void *ll_load(ll_load44,911
static lua_CFunction ll_sym(51,1112
static const char *ll_bcsym(ll_bcsym58,1298
#define WIN32_LEAN_AND_MEAN70,1580
#define GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS 74,1677
#define GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT 75,1727
#undef setprogdir79,1848
static void setprogdir(81,1867
static void pusherror(96,2290
static void ll_unloadlib(115,2921
static void *ll_load(ll_load120,2993
static lua_CFunction ll_sym(128,3169
static const char *ll_bcsym(ll_bcsym135,3359
#undef PACKAGE_LIB_FAIL151,3838
#define PACKAGE_LIB_FAIL	152,3862
#define DLMSG	154,3897
static void ll_unloadlib(156,3970
static void *ll_load(ll_load161,4026
static lua_CFunction ll_sym(168,4164
static const char *ll_bcsym(ll_bcsym175,4311
static void **ll_register(ll_register185,4503
static const char *mksymname(mksymname204,5096
static int ll_loadfunc(216,5465
static int lj_cf_package_loadlib(245,6341
static int lj_cf_package_unloadlib(260,6845
static int readable(270,7127
static const char *pushnexttemplate(pushnexttemplate278,7303
static const char *searchpath searchpath289,7694
static int lj_cf_package_searchpath(311,8606
static const char *findfile(findfile326,8998
static void loaderror(337,9324
static int lj_cf_package_loader_lua(343,9524
static int lj_cf_package_loader_c(354,9874
static int lj_cf_package_loader_croot(364,10218
static int lj_cf_package_loader_preload(383,10868
#define sentinel	401,11536
static int lj_cf_package_require(403,11571
static void setfenv(452,13535
static void dooptions(464,13859
static void modinit(474,14068
static int lj_cf_package_module(488,14568
static int lj_cf_package_seeall(506,14993
#define AUXMARK	521,15415
static void setpath(523,15438
static const luaL_Reg package_lib[package_lib544,15958
static const luaL_Reg package_global[package_global551,16144
static const lua_CFunction package_loaders[package_loaders557,16286
LUALIB_API int luaopen_package(566,16462

vendor/github.com/LuaJIT/LuaJIT/src/lib_string.c,1706
#define lib_string_c9,245
#define LUA_LIB10,266
#define LJLIB_MODULE_string32,691
LJLIB_LUA(34,720
LJLIB_ASM(65,1534
LJLIB_ASM(79,1909
LJLIB_CF(87,2080
LJLIB_ASM(106,2513
LJLIB_ASM_(111,2639
LJLIB_CF(123,3017
#define uchar(139,3547
#define CAP_UNFINISHED	141,3593
#define CAP_POSITION	142,3621
typedef struct MatchState 144,3648
  const char *src_init;src_init145,3676
  const char *src_end;src_end146,3729
  lua_State *L;L147,3787
  int level;148,3803
  int depth;149,3873
    const char *init;init151,3897
    ptrdiff_t len;152,3919
  } capture[capture153,3938
} MatchState;154,3968
#define L_ESC	156,3983
static int check_capture(158,4003
static int capture_to_close(166,4193
static const char *classend(classend175,4437
static const unsigned char match_class_map[match_class_map196,4890
static int match_class(202,5138
static int matchbracketclass(216,5425
static int singlematch(239,5877
static const char *matchbalance(matchbalance251,6221
static const char *max_expand(max_expand272,6663
static const char *min_expand(min_expand287,7134
static const char *start_capture(start_capture301,7474
static const char *end_capture(end_capture315,7883
static const char *match_capture(match_capture326,8230
static const char *match(match338,8514
static void push_onecapture(423,11049
static int push_captures(440,11616
static int str_find_aux(450,11928
LJLIB_CF(503,13451
LJLIB_CF(508,13521
LJLIB_NOREG LJLIB_CF(513,13578
LJLIB_CF(537,14255
static void add_s(547,14461
static void add_value(568,15024
LJLIB_CF(600,15814
static GCstr *string_fmt_tostring(string_fmt_tostring644,16938
LJLIB_CF(661,17458
LUALIB_API int luaopen_string(735,19355

vendor/github.com/LuaJIT/LuaJIT/src/lib_table.c,448
#define lib_table_c9,244
#define LUA_LIB10,264
#define LJLIB_MODULE_table26,559
LJLIB_LUA(28,587
LJLIB_CF(79,1559
LJLIB_LUA(108,2366
static void set2(174,3857
static int sort_comp(180,3955
static void auxsort(196,4371
LJLIB_CF(259,6305
LJLIB_PUSH(271,6522
LJLIB_NOREG LJLIB_CF(288,6978
LJLIB_NOREG LJLIB_CF(296,7143
static int luaopen_table_new(302,7246
static int luaopen_table_clear(307,7360
LUALIB_API int luaopen_table(316,7586

vendor/github.com/LuaJIT/LuaJIT/src/lj_alloc.c,7665
#define lj_alloc_c23,820
#define LUA_CORE24,839
#define _GNU_SOURCE28,984
#define MAX_SIZE_T	37,1106
#define MALLOC_ALIGNMENT	38,1139
#define DEFAULT_GRANULARITY	40,1178
#define DEFAULT_TRIM_THRESHOLD	41,1237
#define DEFAULT_MMAP_THRESHOLD	42,1313
#define MAX_RELEASE_CHECK_RATE	43,1375
#define SIZE_T_SIZE	48,1531
#define SIZE_T_BITSIZE	49,1569
#define SIZE_T_ZERO	53,1718
#define SIZE_T_ONE	54,1751
#define SIZE_T_TWO	55,1783
#define TWO_SIZE_T_SIZES	56,1815
#define FOUR_SIZE_T_SIZES	57,1857
#define SIX_SIZE_T_SIZES	58,1900
#define CHUNK_ALIGN_MASK	61,2022
#define align_offset(64,2139
#define MFAIL	70,2370
#define CMFAIL	71,2409
#define IS_DIRECT_BIT	73,2475
#define WIN32_LEAN_AND_MEAN79,2593
#define LJ_ALLOC_VIRTUALALLOC	82,2643
#define LJ_ALLOC_NTAVM	85,2698
#define LJ_ALLOC_MMAP	94,2852
#define LJ_ALLOC_MMAP_PROBE	98,2889
#define LJ_ALLOC_MBITS	101,2932
#define LJ_ALLOC_MBITS	104,3076
#define LJ_ALLOC_MBITS	106,3142
#define LJ_ALLOC_MMAP32	112,3270
#define LJ_ALLOC_MREMAP	116,3325
typedef long (*PNTAVM)PNTAVM126,3491
static PNTAVM ntavm;128,3608
#define NTAVM_ZEROBITS	133,3786
static void init_mmap(135,3813
#define INIT_MMAP(140,3942
static void *CALL_MMAP(CALL_MMAP143,4028
static void *DIRECT_MMAP(DIRECT_MMAP154,4357
static void *CALL_MMAP(CALL_MMAP167,4677
static void *DIRECT_MMAP(DIRECT_MMAP176,4945
static int CALL_MUNMAP(188,5234
#define MMAP_PROT	210,5798
#define MAP_ANONYMOUS	212,5889
#define MMAP_FLAGS	214,5928
#define MMAP_FLAGS_PROBE	219,6022
#define MMAP_FLAGS_PROBE	221,6079
#define LJ_ALLOC_MMAP_PROBE_MAX	224,6123
#define LJ_ALLOC_MMAP_PROBE_LINEAR	225,6159
#define LJ_ALLOC_MMAP_PROBE_LOWER	227,6197
static uintptr_t mmap_probe_seed(236,6515
static void *mmap_probe(mmap_probe248,6778
#define LJ_ALLOC_MMAP32_START	303,8470
#define LJ_ALLOC_MMAP32_START	305,8526
static void *mmap_map32(mmap_map32308,8579
#define CALL_MMAP(333,9107
#define CALL_MMAP(335,9175
static void *CALL_MMAP(CALL_MMAP337,9223
static void init_mmap(350,9534
#define INIT_MMAP(356,9702
static int CALL_MUNMAP(360,9743
static void *CALL_MREMAP_(CALL_MREMAP_370,9962
#define CALL_MREMAP(378,10131
#define CALL_MREMAP_NOMOVE	379,10212
#define CALL_MREMAP_MAYMOVE	380,10241
#define CALL_MREMAP_MV	382,10293
#define CALL_MREMAP_MV	384,10342
#define INIT_MMAP(392,10428
#define DIRECT_MMAP(396,10487
#define CALL_MREMAP(400,10552
struct malloc_chunk 405,10698
  size_t               prev_foot;406,10720
  size_t               head;407,10796
  struct malloc_chunk *fd;fd408,10858
  struct malloc_chunk *bk;bk409,10934
typedef struct malloc_chunk  mchunk;412,10965
typedef struct malloc_chunk *mchunkptr;mchunkptr413,11002
typedef struct malloc_chunk *sbinptr;sbinptr414,11042
typedef size_t bindex_t;415,11114
typedef unsigned int binmap_t;416,11175
typedef unsigned int flag_t;417,11236
#define MCHUNK_SIZE	421,11395
#define CHUNK_OVERHEAD	423,11434
#define DIRECT_CHUNK_OVERHEAD	426,11528
#define DIRECT_FOOT_PAD	428,11638
#define MIN_CHUNK_SIZE\MIN_CHUNK_SIZE431,11750
#define chunk2mem(435,11896
#define mem2chunk(436,11961
#define align_as_chunk(438,12079
#define MAX_REQUEST	441,12195
#define MIN_REQUEST	442,12243
#define pad_request(445,12355
#define request2size(449,12510
#define PINUSE_BIT	454,12679
#define CINUSE_BIT	455,12712
#define INUSE_BITS	456,12745
#define FENCEPOST_HEAD	459,12822
#define cinuse(462,12915
#define pinuse(463,12959
#define chunksize(464,13003
#define clear_pinuse(466,13054
#define clear_cinuse(467,13106
#define chunk_plus_offset(470,13206
#define chunk_minus_offset(471,13274
#define next_chunk(474,13396
#define prev_chunk(475,13475
#define next_pinuse(478,13585
#define get_foot(481,13675
#define set_foot(482,13744
#define set_size_and_pinuse_of_free_chunk(485,13857
#define set_free_with_pinuse(489,14010
#define is_direct(492,14111
#define overhead_for(496,14256
struct malloc_tree_chunk 501,14417
  size_t                    prev_foot;503,14511
  size_t                    head;504,14550
  struct malloc_tree_chunk *fd;fd505,14584
  struct malloc_tree_chunk *bk;bk506,14616
  struct malloc_tree_chunk *child[child508,14649
  struct malloc_tree_chunk *parent;parent509,14687
  bindex_t                  index;510,14723
typedef struct malloc_tree_chunk  tchunk;513,14762
typedef struct malloc_tree_chunk *tchunkptr;tchunkptr514,14804
typedef struct malloc_tree_chunk *tbinptr;tbinptr515,14849
#define leftmost_child(518,14963
struct malloc_segment 522,15121
  char        *base;base523,15145
  size_t       size;524,15197
  struct malloc_segment *next;next525,15251
typedef struct malloc_segment  msegment;528,15314
typedef struct malloc_segment *msegmentptr;msegmentptr529,15355
#define NSMALLBINS	534,15513
#define NTREEBINS	535,15539
#define SMALLBIN_SHIFT	536,15564
#define SMALLBIN_WIDTH	537,15593
#define TREEBIN_SHIFT	538,15648
#define MIN_LARGE_SIZE	539,15676
#define MAX_SMALL_SIZE	540,15730
#define MAX_SMALL_REQUEST 541,15784
struct malloc_state 543,15865
  binmap_t   smallmap;544,15887
  binmap_t   treemap;545,15910
  size_t     dvsize;546,15932
  size_t     topsize;547,15953
  mchunkptr  dv;548,15975
  mchunkptr  top;549,15992
  size_t     trim_check;550,16010
  size_t     release_checks;551,16035
  mchunkptr  smallbins[smallbins552,16064
  tbinptr    treebins[treebins553,16106
  msegment   seg;554,16140
typedef struct malloc_state *mstate;mstate557,16162
#define is_initialized(559,16200
#define page_align(564,16346
#define granularity_align(568,16469
#define mmap_align(573,16611
#define mmap_align(575,16660
#define segment_holds(579,16745
static msegmentptr segment_holding(583,16880
static int has_segment_link(595,17159
#define TOP_FOOT_SIZE\TOP_FOOT_SIZE611,17573
#define is_small(616,17765
#define small_index(617,17825
#define small_index2size(618,17874
#define MIN_SMALL_INDEX	619,17927
#define smallbin_at(622,18049
#define treebin_at(623,18122
#define compute_tree_index(626,18219
#define bit_for_tree_index(640,18578
#define leftshift_for_tree_index(644,18759
#define minsize_for_tree_index(649,18960
#define idx2bit(656,19240
#define mark_smallmap(659,19323
#define clear_smallmap(660,19381
#define smallmap_is_marked(661,19440
#define mark_treemap(663,19504
#define clear_treemap(664,19561
#define treemap_is_marked(665,19619
#define left_bits(668,19736
#define set_inuse(671,19832
#define set_inuse_and_pinuse(676,20041
#define set_size_and_pinuse_of_inuse_chunk(681,20232
#define insert_small_chunk(687,20448
#define unlink_small_chunk(702,20756
#define unlink_first_small_chunk(715,21016
#define replace_dv(727,21273
#define insert_large_chunk(740,21562
#define unlink_large_chunk(779,22323
#define insert_chunk(827,23326
#define unlink_chunk(831,23482
static void *direct_alloc(direct_alloc837,23714
static mchunkptr direct_resize(856,24363
static void init_top(886,25469
static void init_bins(902,25993
static void *prepend_alloc(prepend_alloc913,26270
static void add_segment(946,27296
static void *alloc_sys(alloc_sys994,28880
static size_t release_unused_segments(1056,30508
static int alloc_trim(1098,31538
static void *tmalloc_large(tmalloc_large1141,32925
static void *tmalloc_small(tmalloc_small1205,34693
void *lj_alloc_create(lj_alloc_create1237,35419
void lj_alloc_destroy(1261,36079
static LJ_NOINLINE void *lj_alloc_malloc(lj_alloc_malloc1273,36300
static LJ_NOINLINE void *lj_alloc_free(lj_alloc_free1356,38900
static LJ_NOINLINE void *lj_alloc_realloc(lj_alloc_realloc1427,40646
void *lj_alloc_f(lj_alloc_f1477,42137

vendor/github.com/LuaJIT/LuaJIT/src/lj_alloc.h,25
#define _LJ_ALLOC_H7,89

vendor/github.com/LuaJIT/LuaJIT/src/lj_api.c,4259
#define lj_api_c9,247
#define LUA_CORE10,264
#define api_checknelems(34,763
#define api_checkvalidindex(35,834
static TValue *index2adr(index2adr37,899
static TValue *stkindex2adr(stkindex2adr65,1705
static GCtab *getcurrenv(getcurrenv76,1949
LUA_API int lua_status(84,2172
LUA_API int lua_checkstack(89,2234
LUALIB_API void luaL_checkstack(99,2486
LUA_API void lua_xmove(105,2639
LUA_API const lua_Number *lua_version(lua_version118,2955
LUA_API int lua_gettop(127,3177
LUA_API void lua_settop(132,3253
LUA_API void lua_remove(149,3752
LUA_API void lua_insert(157,3923
static void copy_slot(165,4118
LUA_API void lua_replace(187,4788
LUA_API void lua_copy(194,4911
LUA_API void lua_pushvalue(199,5022
LUA_API int lua_type(207,5212
LUALIB_API void luaL_checktype(230,5800
LUALIB_API void luaL_checkany(236,5926
LUA_API const char *lua_typename(lua_typename242,6059
LUA_API int lua_iscfunction(248,6162
LUA_API int lua_isnumber(254,6298
LUA_API int lua_isstring(261,6477
LUA_API int lua_isuserdata(267,6604
LUA_API int lua_rawequal(273,6736
LUA_API int lua_equal(280,6944
LUA_API int lua_lessthan(313,7843
LUA_API lua_Number lua_tonumber(336,8476
LUA_API int64_t lua_cdata_to_int64(348,8742
LUA_API uint64_t lua_cdata_to_uint64(365,9099
LUA_API lua_Number lua_tonumberx(384,9464
LUALIB_API lua_Number luaL_checknumber(400,9817
LUALIB_API lua_Number luaL_optnumber(411,10108
LUA_API lua_Integer lua_tointeger(424,10452
LUA_API lua_Integer lua_tointegerx(447,10914
LUALIB_API lua_Integer luaL_checkinteger(476,11488
LUALIB_API lua_Integer luaL_optinteger(499,11994
LUA_API int lua_toboolean(524,12558
LUA_API const char *lua_tolstring(lua_tolstring530,12672
LUALIB_API const char *luaL_checklstring(luaL_checklstring549,13119
LUALIB_API const char *luaL_optlstring(luaL_optlstring567,13563
LUALIB_API int luaL_checkoption(589,14127
LUA_API size_t lua_objlen(602,14493
LUA_API lua_CFunction lua_tocfunction(620,14887
LUA_API void *lua_touserdata(lua_touserdata631,15149
LUA_API lua_State *lua_tothread(lua_tothread642,15365
LUA_API const void *lua_topointer(lua_topointer648,15506
LUA_API void lua_pushnil(655,15688
LUA_API void lua_pushnumber(661,15766
LUA_API void lua_pushinteger(669,15956
LUA_API void lua_pushlstring(675,16059
LUA_API void lua_pushstring(684,16237
LUA_API const char *lua_pushvfstring(lua_pushvfstring697,16463
LUA_API const char *lua_pushfstring(lua_pushfstring704,16618
LUA_API void lua_pushcclosure(715,16841
LUA_API void lua_pushboolean(730,17186
LUA_API void lua_pushlightuserdata(736,17286
LUA_API void lua_createtable(742,17410
LUALIB_API int luaL_newmetatable(749,17567
LUA_API int lua_pushthread(765,17951
LUA_API lua_State *lua_newthread(lua_newthread772,18074
LUA_API void *lua_newuserdata(lua_newuserdata782,18242
LUA_API void lua_concat(794,18515
LUA_API void lua_gettable(820,19132
LUA_API void lua_getfield(834,19438
LUA_API void lua_rawget(851,19821
LUA_API void lua_rawgeti(858,19992
LUA_API int lua_getmetatable(871,20239
LUALIB_API int luaL_getmetafield(888,20599
LUA_API void lua_getfenv(901,20898
LUA_API int lua_next(917,21291
LUA_API const char *lua_getupvalue(lua_getupvalue931,21620
LUA_API void *lua_upvalueid(lua_upvalueid942,21864
LUA_API void lua_upvaluejoin(951,22110
LUALIB_API void *luaL_testudata(luaL_testudata962,22530
LUALIB_API void *luaL_checkudata(luaL_checkudata974,22925
LUA_API void lua_settable(983,23181
LUA_API void lua_setfield(1003,23651
LUA_API void lua_rawset(1024,24168
LUA_API void lua_rawseti(1036,24421
LUA_API int lua_setmetatable(1048,24683
LUALIB_API void luaL_setmetatable(1087,25714
LUA_API int lua_setfenv(1093,25858
LUA_API const char *lua_setupvalue(lua_setupvalue1116,26376
static TValue *api_call_base(api_call_base1134,26799
#define api_call_base(1143,26991
LUA_API void lua_call(1146,27050
LUA_API int lua_pcall(1153,27265
static TValue *cpcall(cpcall1173,27797
LUA_API int lua_cpcall(1186,28195
LUALIB_API int luaL_callmeta(1197,28502
LUA_API int lua_isyieldable(1212,28880
LUA_API int lua_yield(1217,28964
LUA_API int lua_resume(1257,30075
LUA_API int lua_gc(1271,30477
LUA_API lua_Alloc lua_getallocf(1318,31539
LUA_API void lua_setallocf(1325,31674

vendor/github.com/LuaJIT/LuaJIT/src/lj_arch.h,7444
#define _LJ_ARCH_H7,131
#define LUAJIT_LE	12,193
#define LUAJIT_BE	13,213
#define LUAJIT_ARCH_X86	16,262
#define LUAJIT_ARCH_x86	17,289
#define LUAJIT_ARCH_X64	18,316
#define LUAJIT_ARCH_x64	19,343
#define LUAJIT_ARCH_ARM	20,370
#define LUAJIT_ARCH_arm	21,397
#define LUAJIT_ARCH_ARM64	22,424
#define LUAJIT_ARCH_arm64	23,452
#define LUAJIT_ARCH_PPC	24,480
#define LUAJIT_ARCH_ppc	25,507
#define LUAJIT_ARCH_MIPS	26,534
#define LUAJIT_ARCH_mips	27,561
#define LUAJIT_ARCH_MIPS32	28,588
#define LUAJIT_ARCH_mips32	29,617
#define LUAJIT_ARCH_MIPS64	30,646
#define LUAJIT_ARCH_mips64	31,675
#define LUAJIT_OS_OTHER	34,722
#define LUAJIT_OS_WINDOWS	35,749
#define LUAJIT_OS_LINUX	36,777
#define LUAJIT_OS_OSX	37,804
#define LUAJIT_OS_BSD	38,829
#define LUAJIT_OS_POSIX	39,854
#define LUAJIT_TARGET	45,1015
#define LUAJIT_TARGET	47,1140
#define LUAJIT_TARGET	49,1257
#define LUAJIT_TARGET	51,1322
#define LUAJIT_TARGET	53,1552
#define LUAJIT_TARGET	55,1681
#define LUAJIT_TARGET	57,1805
#define LUAJIT_OS	68,2026
#define LUAJIT_OS	70,2087
#define LUAJIT_OS	72,2167
#define LUAJIT_OS	76,2373
#define LUAJIT_OS	78,2473
#define LJ_TARGET_CYGWIN	80,2533
#define LUAJIT_OS	81,2560
#define LUAJIT_OS	83,2600
#define LJ_OS_NAME	90,2717
#define LJ_OS_NAME	92,2781
#define LJ_OS_NAME	94,2841
#define LJ_OS_NAME	96,2899
#define LJ_OS_NAME	98,2959
#define LJ_OS_NAME	100,2992
#define LJ_TARGET_WINDOWS	103,3027
#define LJ_TARGET_LINUX	104,3086
#define LJ_TARGET_OSX	105,3142
#define LJ_TARGET_IOS	106,3194
#define LJ_TARGET_POSIX	107,3309
#define LJ_TARGET_DLOPEN	108,3366
#define LJ_TARGET_PS3	111,3430
#define LJ_TARGET_CONSOLE	112,3455
#define LJ_TARGET_PS4	116,3508
#define LJ_TARGET_CONSOLE	117,3533
#undef NULL118,3561
#define NULL 119,3573
#define LJ_TARGET_PSVITA	123,3621
#define LJ_TARGET_CONSOLE	124,3648
#define LJ_TARGET_XBOX360	128,3705
#define LJ_TARGET_CONSOLE	129,3733
#define LJ_TARGET_XBOXONE	133,3785
#define LJ_TARGET_CONSOLE	134,3813
#define LJ_TARGET_GC64	135,3841
#define LJ_NUMMODE_SINGLE	138,3875
#define LJ_NUMMODE_SINGLE_DUAL	139,3934
#define LJ_NUMMODE_DUAL	140,4004
#define LJ_NUMMODE_DUAL_SINGLE	141,4060
#define LJ_ARCH_NAME	146,4209
#define LJ_ARCH_BITS	147,4237
#define LJ_ARCH_ENDIAN	148,4262
#define LJ_ABI_WIN	150,4338
#define LJ_ABI_WIN	152,4366
#define LJ_TARGET_X86	154,4395
#define LJ_TARGET_X86ORX64	155,4420
#define LJ_TARGET_EHRETREG	156,4449
#define LJ_TARGET_MASKSHIFT	157,4478
#define LJ_TARGET_MASKROT	158,4508
#define LJ_TARGET_UNALIGNED	159,4536
#define LJ_ARCH_NUMMODE	160,4566
#define LJ_ARCH_NAME	164,4655
#define LJ_ARCH_BITS	165,4683
#define LJ_ARCH_ENDIAN	166,4708
#define LJ_ABI_WIN	168,4784
#define LJ_ABI_WIN	170,4812
#define LJ_TARGET_X64	172,4841
#define LJ_TARGET_X86ORX64	173,4866
#define LJ_TARGET_EHRETREG	174,4895
#define LJ_TARGET_JUMPRANGE	175,4924
#define LJ_TARGET_MASKSHIFT	176,4976
#define LJ_TARGET_MASKROT	177,5006
#define LJ_TARGET_UNALIGNED	178,5034
#define LJ_ARCH_NUMMODE	179,5064
#define LJ_TARGET_GC64	181,5138
#define LJ_ARCH_NAME	186,5212
#define LJ_ARCH_BITS	187,5240
#define LJ_ARCH_ENDIAN	188,5265
#define LJ_ARCH_HASFPU	190,5342
#define LJ_ABI_SOFTFP	193,5421
#define LJ_ABI_EABI	195,5453
#define LJ_TARGET_ARM	196,5476
#define LJ_TARGET_EHRETREG	197,5501
#define LJ_TARGET_JUMPRANGE	198,5530
#define LJ_TARGET_MASKSHIFT	199,5583
#define LJ_TARGET_MASKROT	200,5613
#define LJ_TARGET_UNIFYROT	201,5641
#define LJ_ARCH_NUMMODE	202,5695
#define LJ_ARCH_VERSION	205,5787
#define LJ_ARCH_VERSION	207,5913
#define LJ_ARCH_VERSION	209,5964
#define LJ_ARCH_VERSION	211,6090
#define LJ_ARCH_VERSION	213,6124
#define LJ_ARCH_BITS	218,6202
#define LJ_ARCH_NAME	220,6254
#define LJ_ARCH_ENDIAN	221,6286
#define LJ_ARCH_NAME	223,6326
#define LJ_ARCH_ENDIAN	224,6356
#define LJ_TARGET_ARM64	226,6397
#define LJ_TARGET_EHRETREG	227,6424
#define LJ_TARGET_JUMPRANGE	228,6453
#define LJ_TARGET_MASKSHIFT	229,6507
#define LJ_TARGET_MASKROT	230,6537
#define LJ_TARGET_UNIFYROT	231,6565
#define LJ_TARGET_GC64	232,6619
#define LJ_ARCH_NUMMODE	233,6645
#define LJ_ARCH_VERSION	235,6687
#define LJ_ARCH_ENDIAN	241,6822
#define LJ_ARCH_ENDIAN	243,6862
#define LJ_ARCH_BITS	248,6921
#define LJ_ARCH_NAME	250,6978
#define LJ_ARCH_NAME	252,7016
#define LJ_ARCH_BITS	255,7059
#define LJ_ARCH_NAME	256,7084
#define LJ_ARCH_HASFPU	260,7192
#define LJ_ARCH_HASFPU	262,7224
#define LJ_ABI_SOFTFP	268,7343
#define LJ_ABI_SOFTFP	270,7374
#define LJ_ARCH_NUMMODE	276,7439
#define LJ_ARCH_NUMMODE	278,7486
#define LJ_TARGET_PPC	281,7542
#define LJ_TARGET_EHRETREG	282,7567
#define LJ_TARGET_JUMPRANGE	283,7596
#define LJ_TARGET_MASKSHIFT	284,7649
#define LJ_TARGET_MASKROT	285,7679
#define LJ_TARGET_UNIFYROT	286,7707
#define LJ_ARCH_PPC32ON64	289,7784
#define LJ_ARCH_NOFFI	290,7812
#define LJ_ARCH_PPC64	292,7862
#define LJ_TARGET_GC64	293,7887
#define LJ_ARCH_NOJIT	294,7913
#define LJ_ARCH_VERSION	298,7971
#define LJ_ARCH_VERSION	300,8016
#define LJ_ARCH_VERSION	302,8062
#define LJ_ARCH_VERSION	304,8107
#define LJ_ARCH_VERSION	306,8152
#define LJ_ARCH_VERSION	308,8186
#define LJ_ARCH_SQRT	311,8236
#define LJ_ARCH_ROUND	314,8283
#define LJ_ARCH_CELL	317,8327
#define LJ_ARCH_XENON	320,8380
#define LJ_ARCH_NAME	327,8600
#define LJ_ARCH_NAME	329,8637
#define LJ_ARCH_ENDIAN	331,8677
#define LJ_ARCH_NAME	334,8757
#define LJ_ARCH_NAME	336,8792
#define LJ_ARCH_ENDIAN	338,8830
#define LJ_ARCH_HASFPU	343,8926
#define LJ_ARCH_HASFPU	345,8958
#define LJ_ABI_SOFTFP	351,9052
#define LJ_ABI_SOFTFP	353,9083
#define LJ_ARCH_BITS	358,9163
#define LJ_TARGET_MIPS32	359,9188
#define LJ_ARCH_BITS	361,9221
#define LJ_TARGET_MIPS64	362,9246
#define LJ_TARGET_GC64	363,9273
#define LJ_TARGET_MIPS	365,9306
#define LJ_TARGET_EHRETREG	366,9332
#define LJ_TARGET_JUMPRANGE	367,9361
#define LJ_TARGET_MASKSHIFT	368,9428
#define LJ_TARGET_MASKROT	369,9458
#define LJ_TARGET_UNIFYROT	370,9486
#define LJ_ARCH_NUMMODE	371,9540
#define LJ_ARCH_VERSION	374,9629
#define LJ_ARCH_VERSION	376,9663
#define LJ_PAGESIZE	384,9773
#define LJ_DUALNUM	467,12397
#define LJ_DUALNUM	469,12425
#define LJ_OS_NOJIT	476,12661
#define LJ_GC64	482,12746
#define LJ_GC64	484,12772
#define LJ_FR2	489,12837
#define LJ_FR2	491,12862
#define LJ_HASJIT	496,13013
#define LJ_HASJIT	498,13040
#define LJ_HASFFI	503,13170
#define LJ_HASFFI	505,13197
#define LJ_HASPROFILE	509,13262
#define LJ_HASPROFILE	511,13309
#define LJ_PROFILE_SIGPROF	512,13334
#define LJ_HASPROFILE	514,13383
#define LJ_PROFILE_PTHREAD	515,13408
#define LJ_HASPROFILE	517,13482
#define LJ_PROFILE_WTHREAD	518,13507
#define LJ_HASPROFILE	520,13542
#define LJ_ARCH_HASFPU	524,13598
#define LJ_ABI_SOFTFP	527,13653
#define LJ_SOFTFP	529,13685
#define LJ_SOFTFP32	530,13722
#define LJ_LE	533,13797
#define LJ_BE	534,13815
#define LJ_ENDIAN_SELECT(535,13833
#define LJ_ENDIAN_LOHI(536,13869
#define LJ_LE	538,13913
#define LJ_BE	539,13931
#define LJ_ENDIAN_SELECT(540,13949
#define LJ_ENDIAN_LOHI(541,13985
#define LJ_32	545,14054
#define LJ_64	546,14072
#define LJ_32	548,14096
#define LJ_64	549,14114
#define LJ_TARGET_UNALIGNED	553,14168
#define LUAJIT_NO_LOG2558,14374
#define LUAJIT_NO_EXP2561,14450
#define LJ_NO_SYSTEM	564,14573
#define LUAJIT_NO_UNWIND	569,14719
#define LJ_NO_UNWIND	573,14859
#define LJ_52	578,14966
#define LJ_52	580,14990

vendor/github.com/LuaJIT/LuaJIT/src/lj_asm.c,4893
#define lj_asm_c6,120
#define LUA_CORE7,137
typedef struct ASMState 40,726
  RegCost cost[cost41,752
  MCode *mcp;mcp43,833
  MCode *mclim;mclim44,890
  MCode *mcp_prev;mcp_prev46,976
  IRIns *ir;ir49,1034
  jit_State *J;J50,1100
  x86ModRM mrm;53,1167
  RegSet freeset;56,1225
  RegSet modset;57,1272
  RegSet weakset;58,1338
  RegSet phiset;59,1398
  uint32_t flags;61,1444
  int loopinv;62,1496
  int32_t evenspill;64,1568
  int32_t oddspill;65,1617
  IRRef curins;67,1672
  IRRef stopins;68,1729
  IRRef orignins;69,1799
  IRRef snapref;71,1842
  IRRef snaprename;72,1914
  SnapNo snapno;73,1982
  SnapNo loopsnapno;74,2030
  IRRef fuseref;76,2080
  IRRef sectref;77,2147
  IRRef loopref;78,2209
  BCReg topslot;80,2271
  int32_t gcsteps;81,2338
  GCtrace *T;T83,2410
  GCtrace *parent;parent84,2450
  MCode *mcbot;mcbot86,2500
  MCode *mctop;mctop87,2549
  MCode *mcloop;mcloop88,2596
  MCode *invmcp;invmcp89,2652
  MCode *flagmcp;flagmcp90,2719
  MCode *realign;realign91,2790
  intptr_t krefk[krefk94,2861
  IRRef1 phireg[phireg96,2900
  uint16_t parentmap[parentmap97,2958
} ASMState;98,3035
#define IR(100,3048
#define ASMREF_TMP1	102,3084
#define ASMREF_TMP2	103,3136
#define ASMREF_L	104,3189
#define iscrossref(107,3295
#define FUSE_DISABLED	110,3415
#define mayfuse(111,3450
#define neverfuse(112,3497
#define canfuse(113,3551
#define opisfusableload(114,3616
#define MCLIM_REDZONE	119,3853
static LJ_NORET LJ_NOINLINE void asm_mclimit(121,3879
static LJ_AINLINE void checkmclim(126,4020
#define ra_iskref(143,4491
#define ra_krefreg(144,4538
#define ra_krefk(145,4598
static LJ_AINLINE void ra_setkref(147,4644
#define ra_iskref(155,4820
#define ra_krefreg(156,4846
#define ra_krefk(157,4883
static const uint8_t field_ofs[field_ofs161,4954
#define FLOFS(162,5002
#undef FLOFS164,5058
#define emit_spload(185,5516
#define emit_spstore(187,5597
#define RIDNAME(199,5856
static const char *const ra_regname[ra_regname200,5885
#undef RIDNAME206,5992
static char ra_dbg_buf[ra_dbg_buf208,6008
static char *ra_dbg_p;ra_dbg_p209,6039
static char *ra_dbg_merge;ra_dbg_merge210,6062
static MCode *ra_dbg_mcp;ra_dbg_mcp211,6089
static void ra_dstart(213,6116
static void ra_dflush(220,6218
static void ra_dprintf(226,6330
#define RA_DBG_START(280,7783
#define RA_DBG_FLUSH(281,7818
#define RA_DBG_REF(282,7853
#define RA_DBGX(285,7986
#define RA_DBG_START(288,8025
#define RA_DBG_FLUSH(289,8058
#define RA_DBG_REF(290,8091
#define RA_DBGX(291,8122
#define ra_free(296,8239
#define ra_modified(297,8290
#define ra_weak(298,8343
#define ra_noweak(299,8394
#define ra_used(301,8449
static void ra_setup(304,8548
static Reg ra_rematk(318,8932
static int32_t ra_spill(371,10425
static Reg ra_releasetmp(395,11043
static Reg ra_restore(407,11336
static void ra_save(428,11909
#define MINCOST(434,12054
static Reg ra_evict(440,12299
static Reg ra_pick(462,12999
static Reg ra_scratch(472,13218
static void ra_evictset(481,13430
static void ra_evictk(504,13974
static Reg ra_allock(533,14626
static void ra_allockreg(586,16011
#define ra_allockreg(597,16260
static Reg ra_allocref(604,16543
static Reg ra_alloc1(647,17894
static void ra_addrename(657,18173
static void ra_rename(667,18484
static Reg ra_dest(690,19404
static void ra_destreg(711,19977
static void ra_left(725,20370
static void ra_leftov(772,21777
static void ra_destpair(796,22449
static int asm_snap_canremat(849,24282
static int asm_sunk_store(859,24521
static void asm_snap_alloc1(876,25020
static void asm_snap_alloc(931,26921
static int asm_snap_checkrename(956,27779
static void asm_snap_prep(975,28404
static int32_t asm_stack_adjust(998,29125
static uint32_t ir_khash(1006,29313
static void asm_snew(1034,30092
static void asm_tnew(1046,30447
static void asm_tdup(1058,30843
static void asm_gcstep(1072,31218
static void asm_bufhdr(1089,31737
static void asm_bufput(1117,32596
static void asm_bufstr(1164,34119
static void asm_tostr(1176,34460
static void asm_conv64(1199,35132
static void asm_newref(1229,36041
static void asm_lref(1243,36480
static void asm_collectargs(1256,36800
static uint32_t asm_callx_flags(1272,37314
static void asm_callid(1293,37962
static void asm_call(1303,38192
static void asm_fppow(1313,38436
static int asm_fpjoin_pow(1323,38678
static void asm_phi_break(1341,39191
static void asm_phi_shuffle(1375,40685
static void asm_phi_copyspill(1452,43026
static void asm_phi_fixup(1512,44819
static void asm_phi(1531,45268
static void asm_loop(1570,46771
static void asm_ir(1611,47845
static void asm_head_root(1741,51986
static void asm_head_side(1761,52733
static BCReg asm_baseslot(1928,57997
static void asm_tail_link(1943,58338
static void asm_setup_regsp(2000,60434
void lj_asm_trace(2256,67198
#undef IR2407,72398

vendor/github.com/LuaJIT/LuaJIT/src/lj_asm.h,24
#define _LJ_ASM_H7,138

vendor/github.com/LuaJIT/LuaJIT/src/lj_asm_arm.h,3592
static Reg ra_hintalloc(9,243
static Reg ra_scratchpair(22,593
static Reg ra_alloc2(53,1471
static MCode *asm_exitstub_gen(asm_exitstub_gen80,2383
static void asm_exitstub_setup(102,3183
static void asm_guardcc(113,3579
#define CONFLICT_SEARCH_LIM	129,4076
static int noconflict(132,4182
static int32_t asm_fuseabase(145,4554
static Reg asm_fuseahuref(155,4865
static uint32_t asm_fuseopm(195,5958
static IRRef asm_fuselsl2(226,6952
static void asm_fusexref(236,7254
static int asm_fusemadd(314,9482
static void asm_gencall(339,10357
static void asm_setupresult(426,12952
static void asm_callx(456,13899
static void asm_retf(480,14719
static void asm_tointg(501,15542
static void asm_tobit(513,15975
static void asm_conv(525,16378
static void asm_strto(595,19150
static void asm_tvptr(661,20877
static void asm_aref(693,21817
static void asm_href(721,22678
static void asm_hrefk(860,27640
static void asm_uref(910,29280
static void asm_fref(934,30112
static void asm_strref(940,30217
static ARMIns asm_fxloadins(974,31337
static ARMIns asm_fxstoreins(987,31692
static void asm_fload(998,32006
static void asm_fstore(1022,32697
static void asm_xload(1037,33117
static void asm_xstore_(1045,33374
#define asm_xstore(1055,33661
static void asm_ahuvload(1057,33712
static void asm_ahustore(1099,34980
static void asm_sload(1129,35868
static void asm_cnew(1211,38587
#define asm_cnew(1272,40702
static void asm_tbar(1277,40825
static void asm_obar(1297,41685
static void asm_fparith(1328,42877
static void asm_fpunary(1336,43127
static void asm_callround(1343,43333
static void asm_fpmath(1365,44262
static int asm_swapops(1378,44589
static void asm_intop(1396,45211
static void asm_intop_s(1415,45809
static void asm_intneg(1425,46015
static void asm_intmul(1433,46290
static void asm_add(1455,47247
static void asm_sub(1467,47491
static void asm_mul(1479,47736
#define asm_addov(1490,47910
#define asm_subov(1491,47952
#define asm_mulov(1492,47994
#define asm_div(1495,48052
#define asm_pow(1496,48110
#define asm_abs(1497,48173
#define asm_atan2(1498,48231
#define asm_ldexp(1499,48290
#define asm_mod(1502,48357
static void asm_neg(1504,48421
static void asm_bitop(1515,48605
#define asm_bnot(1541,49354
static void asm_bswap(1543,49408
#define asm_band(1560,50026
#define asm_bor(1561,50079
#define asm_bxor(1562,50132
static void asm_bitshift(1564,50186
#define asm_bshl(1581,50851
#define asm_bshr(1582,50908
#define asm_bsar(1583,50965
#define asm_bror(1584,51022
#define asm_brol(1585,51079
static void asm_intmin_max(1587,51119
static void asm_sfpmin_max(1612,51931
static void asm_fpmin_max(1636,52854
static void asm_min_max(1648,53278
#define asm_min(1660,53486
#define asm_max(1661,53545
static const uint8_t asm_compmap[asm_compmap1666,53730
static void asm_sfpcomp(1683,54300
static void asm_fpcomp(1704,55058
static void asm_intcomp(1729,55712
static void asm_comp(1778,57485
#define asm_equal(1788,57638
static void asm_int64comp(1792,57730
static void asm_hiop(1831,59106
static void asm_prof(1914,61406
static void asm_stack_check(1925,61772
static void asm_stack_restore(1964,63067
static void asm_gc_check(2022,65210
static void asm_loop_fixup(2054,66381
static void asm_head_lreg(2069,66849
static void asm_head_root_base(2080,67082
static RegSet asm_head_side_base(2091,67369
static void asm_tail_fixup(2114,68020
static void asm_tail_prep(2133,68547
static Reg asm_setup_call_slots(2148,68998
static void asm_setup_target(2180,69977
void lj_asm_patchexit(2189,70297

vendor/github.com/LuaJIT/LuaJIT/src/lj_asm_arm64.h,3687
static Reg ra_hintalloc(12,353
static Reg ra_alloc2(25,731
static void asm_exitstub_setup(51,1593
static MCode *asm_exitstub_addr(asm_exitstub_addr67,2176
static void asm_guardcc(74,2378
static void asm_guardtnb(88,2758
static void asm_guardcnb(102,3174
#define CONFLICT_SEARCH_LIM	118,3653
static int asm_isk32(120,3685
static int noconflict(136,4082
static int32_t asm_fuseabase(149,4454
#define FUSE_REG	158,4695
static Reg asm_fuseahuref(161,4794
static uint32_t asm_fuseopm(208,6041
static void asm_fusexref(252,7478
static int asm_fusemadd(331,9627
static int asm_fuseandshift(352,10366
static int asm_fuseorshift(382,11320
static void asm_gencall(413,12444
static void asm_setupresult(453,13600
static void asm_callx(476,14230
static void asm_retf(500,15064
static void asm_tointg(520,15875
static void asm_tobit(530,16219
static void asm_conv(541,16614
static void asm_strto(613,19490
static void asm_tvstore64(647,20443
static void asm_tvptr(672,21369
static void asm_aref(690,21926
static void asm_href(718,22784
static void asm_hrefk(865,28046
static void asm_uref(900,29232
static void asm_fref(924,30083
static void asm_strref(930,30188
static A64Ins asm_fxloadins(949,30787
static A64Ins asm_fxstoreins(962,31151
static void asm_fload(973,31452
static void asm_fstore(996,32063
static void asm_xload(1007,32392
static void asm_xstore(1014,32623
static void asm_ahuvload(1023,32872
static void asm_ahustore(1066,34600
static void asm_sload(1107,35941
static void asm_cnew(1189,38968
#define asm_cnew(1234,40742
static void asm_tbar(1239,40865
static void asm_obar(1259,41731
static void asm_fparith(1288,42872
static void asm_fpunary(1296,43122
static void asm_fpmath(1303,43328
static int asm_swapops(1318,43771
static void asm_intop(1338,44565
static void asm_intop_s(1356,45132
static void asm_intneg(1366,45338
static void asm_intmul(1374,45628
static void asm_add(1390,46257
static void asm_sub(1400,46479
static void asm_mul(1410,46702
static void asm_div(1419,46853
static void asm_pow(1430,47094
#define asm_addov(1441,47341
#define asm_subov(1442,47383
#define asm_mulov(1443,47425
#define asm_abs(1445,47468
#define asm_atan2(1446,47524
#define asm_ldexp(1447,47583
static void asm_mod(1449,47643
static void asm_neg(1460,47890
static void asm_band(1469,48041
static void asm_borbxor(1483,48315
static void asm_bor(1504,48999
#define asm_bxor(1511,49126
static void asm_bnot(1513,49183
static void asm_bswap(1522,49417
static void asm_bitshift(1529,49624
#define asm_bshl(1569,51025
#define asm_bshr(1570,51094
#define asm_bsar(1571,51163
#define asm_bror(1572,51232
#define asm_brol(1573,51301
static void asm_intmin_max(1575,51341
static void asm_fpmin_max(1584,51670
static void asm_min_max(1593,51978
#define asm_max(1601,52148
#define asm_min(1602,52207
static const uint8_t asm_compmap[asm_compmap1607,52392
static void asm_fpcomp(1623,52948
static void asm_intcomp(1646,53565
static void asm_comp(1711,55880
#define asm_equal(1719,56011
static void asm_hiop(1724,56208
static void asm_prof(1731,56405
static void asm_stack_check(1744,56818
static void asm_stack_restore(1781,58026
static void asm_gc_check(1811,58961
static void asm_loop_fixup(1842,60087
static void asm_head_lreg(1860,60704
static void asm_head_root_base(1871,60937
static RegSet asm_head_side_base(1882,61224
static void asm_tail_fixup(1905,61875
static void asm_tail_prep(1926,62534
static Reg asm_setup_call_slots(1941,62985
static void asm_setup_target(1959,63561
static void asm_mcode_fixup(1967,63815
#define LJ_TARGET_MCODE_FIXUP	1975,64001
void lj_asm_patchexit(1981,64186

vendor/github.com/LuaJIT/LuaJIT/src/lj_asm_mips.h,3697
static Reg ra_hintalloc(9,244
static Reg ra_alloc1z(22,593
static Reg ra_alloc2(36,952
#define MIPS_SPAREJUMP	62,1849
static void asm_sparejump_setup(65,1928
static void asm_exitstub_setup(81,2403
#define asm_exitstub_addr(93,2879
static void asm_guard(96,2973
#define CONFLICT_SEARCH_LIM	114,3583
static int noconflict(117,3689
static int32_t asm_fuseabase(130,4061
static Reg asm_fuseahuref(140,4372
static void asm_fusexref(185,5551
static void asm_gencall(227,6705
static void asm_setupresult(327,9291
static void asm_callx(381,10645
static void asm_callround(409,11491
static void asm_retf(425,12121
static void asm_tointg(443,12783
static void asm_tobit(454,13142
static void asm_tointg(465,13538
static void asm_tobit(482,14227
static void asm_conv(490,14410
static void asm_strto(724,23011
static void asm_tvstore64(770,24452
static void asm_tvptr(795,25279
static void asm_aref(826,26342
static void asm_href(855,27218
  *l_loop l_loop973,31006
  khash 982,31324
  } else 985,31452
static void asm_hrefk(1051,33783
static void asm_uref(1111,35648
static void asm_fref(1133,36471
static void asm_strref(1139,36576
static MIPSIns asm_fxloadins(1191,38230
static MIPSIns asm_fxstoreins(1204,38638
static void asm_fload(1215,39007
static void asm_fstore(1239,39635
static void asm_xload(1252,40013
static void asm_xstore_(1260,40267
#define asm_xstore(1270,40558
static void asm_ahuvload(1272,40609
static void asm_ahustore(1329,42198
static void asm_sload(1380,43801
static void asm_cnew(1511,48062
#define asm_cnew(1574,50262
static void asm_tbar(1579,50385
static void asm_obar(1595,51069
static void asm_fparith(1624,52234
static void asm_fpunary(1632,52464
static void asm_fpmath(1641,52681
#define asm_fpadd(1657,53066
#define asm_fpsub(1658,53125
#define asm_fpmul(1659,53184
#define asm_fpadd(1661,53275
#define asm_fpsub(1662,53339
#define asm_fpmul(1663,53403
static void asm_add(1666,53475
static void asm_sub(1691,54105
static void asm_mul(1707,54474
static void asm_mod(1727,54943
static void asm_pow(1739,55216
static void asm_div(1750,55472
static void asm_neg(1766,55799
#define asm_abs(1789,56448
static void asm_abs(1791,56539
#define asm_atan2(1799,56732
#define asm_ldexp(1800,56791
static void asm_arithov(1802,56851
#define asm_addov(1836,58316
#define asm_subov(1837,58362
static void asm_mulov(1839,58409
static void asm_add64(1854,58927
static void asm_sub64(1903,60424
static void asm_neg64(1923,61064
static void asm_bnot(1937,61499
static void asm_bswap(1951,61897
static void asm_bitop(1982,62952
#define asm_band(1997,63390
#define asm_bor(1998,63456
#define asm_bxor(1999,63520
static void asm_bitshift(2001,63587
#define asm_bshl(2017,64200
#define asm_bshr(2018,64269
#define asm_bsar(2019,64338
#define asm_brol(2020,64407
static void asm_bror(2022,64447
static void asm_sfpmin_max(2044,65233
static void asm_min_max(2065,65727
#define asm_min(2097,66735
#define asm_max(2098,66783
static void asm_sfpcomp(2104,66949
static void asm_comp(2169,68620
static void asm_equal(2208,69935
static void asm_comp64(2227,70476
static void asm_comp64eq(2248,71290
static void asm_hiop(2265,71966
static void asm_prof(2352,74529
static void asm_stack_check(2364,74943
static void asm_stack_restore(2395,76076
static void asm_gc_check(2461,78440
static void asm_loop_fixup(2490,79486
static void asm_head_root_base(2506,79974
static RegSet asm_head_side_base(2521,80382
static void asm_tail_fixup(2545,81191
static void asm_tail_prep(2555,81557
static Reg asm_setup_call_slots(2564,81866
static void asm_setup_target(2597,82871
void lj_asm_patchexit(2606,83117

vendor/github.com/LuaJIT/LuaJIT/src/lj_asm_ppc.h,3416
static Reg ra_hintalloc(9,243
static Reg ra_alloc2(22,621
static void asm_exitstub_setup(48,1500
static MCode *asm_exitstub_addr(asm_exitstub_addr64,2070
static void asm_guardcc(71,2272
#define CONFLICT_SEARCH_LIM	87,2763
static int noconflict(90,2869
static int32_t asm_fuseabase(103,3241
#define AHUREF_LSX	113,3524
static Reg asm_fuseahuref(116,3636
static void asm_fusexref(166,4982
static void asm_fusexrefx(214,6430
static int asm_fusemadd(231,6878
static void asm_gencall(254,7634
static void asm_setupresult(308,8990
static void asm_callx(348,10141
static void asm_retf(374,11056
static void asm_tointg(393,11740
static void asm_tobit(414,12613
static void asm_conv(427,13049
static void asm_strto(518,17046
static void asm_tvptr(563,18466
static void asm_aref(588,19352
static void asm_href(617,20212
static void asm_hrefk(747,24544
static void asm_uref(790,25985
static void asm_fref(813,26804
static void asm_strref(819,26909
static PPCIns asm_fxloadins(856,28088
static PPCIns asm_fxstoreins(869,28460
static void asm_fload(880,28768
static void asm_fstore(904,29380
static void asm_xload(916,29722
static void asm_xstore_(926,30040
#define asm_xstore(944,30685
static void asm_ahuvload(946,30736
static void asm_ahustore(995,32264
static void asm_sload(1036,33434
static void asm_cnew(1121,36450
#define asm_cnew(1178,38489
static void asm_tbar(1183,38612
static void asm_obar(1200,39333
static void asm_fparith(1229,40484
static void asm_fpunary(1240,40786
static void asm_fpmath(1247,40978
static void asm_add(1258,41260
static void asm_sub(1303,42463
static void asm_mul(1335,43337
#define asm_div(1364,44064
#define asm_mod(1365,44120
#define asm_pow(1366,44183
static void asm_neg(1368,44247
#define asm_abs(1389,44678
#define asm_atan2(1390,44734
#define asm_ldexp(1391,44793
static void asm_arithov(1393,44853
#define asm_addov(1408,45273
#define asm_subov(1409,45330
#define asm_mulov(1410,45388
static void asm_add64(1413,45462
static void asm_sub64(1446,46307
static void asm_neg64(1479,47191
static void asm_bnot(1491,47512
static void asm_bswap(1518,48229
static void asm_fuseandsh(1540,48948
static void asm_band(1569,49683
static void asm_bitop(1624,51230
#define asm_bor(1650,52032
#define asm_bxor(1651,52094
static void asm_bitshift(1653,52159
#define asm_bshl(1678,52935
#define asm_bshr(1679,52994
#define asm_bsar(1680,53053
#define asm_brol(1681,53122
#define asm_bror(1684,53254
static void asm_sfpmin_max(1687,53308
static void asm_min_max(1717,54436
#define asm_min(1747,55610
#define asm_max(1748,55658
#define CC_UNSIGNED	1752,55787
#define CC_TWO	1753,55847
static const uint8_t asm_compmap[asm_compmap1756,55955
static void asm_intcomp_(1771,56620
static void asm_comp(1804,57742
#define asm_equal(1826,58467
static void asm_sfpcomp(1830,58548
static void asm_comp64(1868,59568
static void asm_hiop(1893,60473
static void asm_prof(1968,62704
static void asm_stack_check(1980,63098
static void asm_stack_restore(2004,64112
static void asm_gc_check(2061,66173
static void asm_loop_fixup(2090,67220
static void asm_head_root_base(2105,67722
static RegSet asm_head_side_base(2119,68096
static void asm_tail_fixup(2142,68871
static void asm_tail_prep(2163,69507
static Reg asm_setup_call_slots(2177,69913
static void asm_setup_target(2195,70573
void lj_asm_patchexit(2203,70829

vendor/github.com/LuaJIT/LuaJIT/src/lj_asm_x86.h,3844
static MCode *asm_exitstub_gen(asm_exitstub_gen9,286
static void asm_exitstub_setup(43,1643
static void asm_guardcc(57,2169
#define CONFLICT_SEARCH_LIM	81,2934
static int asm_isk32(84,3022
static int noconflict(112,3687
static IRRef asm_fuseabase(128,4153
static void asm_fusearef(150,4929
static void asm_fuseahuref(181,6066
static void asm_fusefref(231,7284
static void asm_fusestrref(271,8337
static void asm_fusexref(305,9307
static Reg asm_fuseloadk64(367,11100
static Reg asm_fuseload(406,12365
static Reg asm_fuseloadm(495,15420
#define asm_fuseloadm(502,15618
static int asm_count_call_slots(508,15843
static void asm_gencall(541,16753
static void asm_setupresult(646,19969
static void *asm_callx_func(asm_callx_func703,21814
static void asm_callx(724,22350
static void asm_retf(757,23481
static void asm_tointg(781,24258
static void asm_tobit(794,24707
static void asm_conv(807,25096
static void asm_conv_fp_int64(936,30452
static void asm_conv_int64_fp(965,31631
static void asm_conv64(1014,33673
static void asm_strto(1023,33825
static void asm_tvptr(1045,34672
static void asm_aref(1088,36101
static void asm_href(1106,36671
static void asm_hrefk(1269,42161
static void asm_uref(1345,44638
static void asm_fref(1369,45460
static void asm_strref(1376,45624
static void asm_fxload(1390,46087
#define asm_fload(1417,46872
#define asm_xload(1418,46917
static void asm_fxstore(1420,46963
#define asm_fstore(1483,48948
#define asm_xstore(1484,48995
static Reg asm_load_lightud64(1487,49065
static void asm_ahuvload(1506,49556
static void asm_ahustore(1588,51922
static void asm_sload(1656,53888
static void asm_cnew(1775,57848
#define asm_cnew(1852,60442
static void asm_tbar(1857,60565
static void asm_obar(1872,61116
static void asm_x87load(1905,62321
static void asm_fpmath(1925,62964
#define asm_atan2(1965,64639
static void asm_ldexp(1967,64699
static void asm_fppowi(1983,65135
static void asm_pow(1996,65566
static int asm_swapops(2007,65803
static void asm_fparith(2031,66705
static void asm_intarith(2055,67285
static int asm_lea(2121,69720
static void asm_add(2178,71406
static void asm_sub(2187,71659
static void asm_mul(2195,71877
static void asm_div(2203,72031
static void asm_mod(2214,72279
static void asm_neg_not(2225,72535
static void asm_neg(2232,72723
#define asm_abs(2240,72873
static void asm_intmin_max(2242,72929
static void asm_min(2253,73337
static void asm_max(2261,73487
#define asm_addov(2270,73697
#define asm_subov(2271,73753
#define asm_mulov(2272,73809
#define asm_bnot(2274,73869
static void asm_bswap(2276,73924
#define asm_band(2284,74140
#define asm_bor(2285,74195
#define asm_bxor(2286,74249
static void asm_bitshift(2288,74305
#define asm_bshl(2343,76289
#define asm_bshr(2344,76353
#define asm_bsar(2345,76417
#define asm_brol(2346,76481
#define asm_bror(2347,76539
#define VCC_U	2352,76728
#define VCC_P	2353,76767
#define VCC_S	2354,76820
#define VCC_PS	2355,76873
#define COMPFLAGS(2358,76948
static const uint16_t asm_compmap[asm_compmap2359,77016
static void asm_comp(2375,77756
#define asm_equal(2532,83490
static void asm_comp_int64(2536,83606
static void asm_hiop(2609,86056
static void asm_prof(2669,87831
static void asm_stack_check(2680,88163
static void asm_stack_restore(2709,89276
static void asm_gc_check(2781,91518
static void asm_loop_fixup(2813,92600
static void asm_head_root_base(2860,94235
static RegSet asm_head_side_base(2874,94636
static void asm_tail_fixup(2898,95433
static void asm_tail_prep(2943,96689
static Reg asm_setup_call_slots(2969,97550
static void asm_setup_target(2985,98048
static const uint8_t map_op1[map_op12993,98236
static const uint8_t map_op2[map_op23020,99781
static uint32_t asm_x86_inslen(3039,101118
void lj_asm_patchexit(3094,102474

vendor/github.com/LuaJIT/LuaJIT/src/lj_bc.c,45
#define lj_bc_c6,109
#define LUA_CORE7,125

vendor/github.com/LuaJIT/LuaJIT/src/lj_bc.h,2049
#define _LJ_BC_H7,127
#define BCMAX_A	25,544
#define BCMAX_B	26,566
#define BCMAX_C	27,588
#define BCMAX_D	28,610
#define BCBIAS_J	29,634
#define NO_REG	30,658
#define NO_JMP	31,682
#define bc_op(34,751
#define bc_a(35,787
#define bc_b(36,829
#define bc_c(37,865
#define bc_d(38,908
#define bc_j(39,944
#define setbc_byte(42,1032
#define setbc_op(44,1128
#define setbc_a(45,1173
#define setbc_b(46,1217
#define setbc_c(47,1261
#define setbc_d(48,1305
#define setbc_j(50,1389
#define BCINS_ABC(53,1493
#define BCINS_AD(55,1592
#define BCINS_AJ(57,1670
#define BCDEF(71,2087
#define BCENUM(201,5944
BCDEF(202,5992
BCDEF(BCENUM)202,5992
#undef BCENUM203,6006
  BC__MAX204,6020
} BCOp;205,6030
#define FF_next_N	231,7329
  FORL_IDX,235,7417
  FORL_IDX, FORL_STOP,235,7417
  FORL_IDX, FORL_STOP, FORL_STEP,235,7417
  FORL_IDX, FORL_STOP, FORL_STEP, FORL_EXT235,7417
  BCMnone,240,7522
  BCMnone, BCMdst,240,7522
  BCMnone, BCMdst, BCMbase,240,7522
  BCMnone, BCMdst, BCMbase, BCMvar,240,7522
  BCMnone, BCMdst, BCMbase, BCMvar, BCMrbase,240,7522
  BCMnone, BCMdst, BCMbase, BCMvar, BCMrbase, BCMuv,240,7522
  BCMlit,241,7602
  BCMlit, BCMlits,241,7602
  BCMlit, BCMlits, BCMpri,241,7602
  BCMlit, BCMlits, BCMpri, BCMnum,241,7602
  BCMlit, BCMlits, BCMpri, BCMnum, BCMstr,241,7602
  BCMlit, BCMlits, BCMpri, BCMnum, BCMstr, BCMtab,241,7602
  BCMlit, BCMlits, BCMpri, BCMnum, BCMstr, BCMtab, BCMfunc,241,7602
  BCMlit, BCMlits, BCMpri, BCMnum, BCMstr, BCMtab, BCMfunc, BCMjump,241,7602
  BCMlit, BCMlits, BCMpri, BCMnum, BCMstr, BCMtab, BCMfunc, BCMjump, BCMcdata,241,7602
  BCM_max242,7681
} BCMode;243,7691
#define BCM___	244,7701
#define bcmode_a(246,7726
#define bcmode_b(247,7778
#define bcmode_c(248,7836
#define bcmode_d(249,7894
#define bcmode_hasd(250,7928
#define bcmode_mm(251,7997
#define BCMODE(253,8048
#define BCMODE_FF	255,8140
static LJ_AINLINE int bc_isret(257,8161
LJ_DATA const uint16_t lj_bc_mode[lj_bc_mode262,8282
LJ_DATA const uint16_t lj_bc_ofs[lj_bc_ofs263,8319

vendor/github.com/LuaJIT/LuaJIT/src/lj_bcdef.h,110
LJ_DATADEF const uint16_t lj_bc_ofs[lj_bc_ofs3,46
LJ_DATADEF const uint16_t lj_bc_mode[lj_bc_mode160,1038

vendor/github.com/LuaJIT/LuaJIT/src/lj_bcdump.h,850
#define _LJ_BCDUMP_H7,129
#define BCDUMP_HEAD1	32,914
#define BCDUMP_HEAD2	33,941
#define BCDUMP_HEAD3	34,968
#define BCDUMP_VERSION	39,1151
#define BCDUMP_F_BE	42,1205
#define BCDUMP_F_STRIP	43,1231
#define BCDUMP_F_FFI	44,1260
#define BCDUMP_F_FR2	45,1287
#define BCDUMP_F_KNOWN	47,1315
  BCDUMP_KGC_CHILD,51,1445
  BCDUMP_KGC_CHILD, BCDUMP_KGC_TAB,51,1445
  BCDUMP_KGC_CHILD, BCDUMP_KGC_TAB, BCDUMP_KGC_I64,51,1445
  BCDUMP_KGC_CHILD, BCDUMP_KGC_TAB, BCDUMP_KGC_I64, BCDUMP_KGC_U64,51,1445
  BCDUMP_KGC_COMPLEX,52,1513
  BCDUMP_KGC_COMPLEX, BCDUMP_KGC_STR52,1513
  BCDUMP_KTAB_NIL,57,1619
  BCDUMP_KTAB_NIL, BCDUMP_KTAB_FALSE,57,1619
  BCDUMP_KTAB_NIL, BCDUMP_KTAB_FALSE, BCDUMP_KTAB_TRUE,57,1619
  BCDUMP_KTAB_INT,58,1675
  BCDUMP_KTAB_INT, BCDUMP_KTAB_NUM,58,1675
  BCDUMP_KTAB_INT, BCDUMP_KTAB_NUM, BCDUMP_KTAB_STR58,1675

vendor/github.com/LuaJIT/LuaJIT/src/lj_bcread.c,1022
#define lj_bcread_c6,98
#define LUA_CORE7,118
#define bcread_flags(27,500
#define bcread_swap(28,535
#define bcread_oldtop(30,619
#define bcread_savetop(31,678
static LJ_NOINLINE void bcread_error(37,867
static LJ_NOINLINE void bcread_fill(48,1196
static LJ_AINLINE void bcread_need(91,2505
static LJ_AINLINE void bcread_want(98,2711
static LJ_AINLINE uint8_t *bcread_mem(bcread_mem105,2885
static void bcread_block(114,3082
static LJ_AINLINE uint32_t bcread_byte(120,3214
static LJ_AINLINE uint32_t bcread_uleb128(127,3378
static uint32_t bcread_uleb128_33(135,3582
static void bcread_dbg(154,4032
static const void *bcread_varinfo(bcread_varinfo172,4610
static void bcread_ktabk(181,4828
static GCtab *bcread_ktab(bcread_ktab200,5388
static void bcread_kgc(224,6008
static void bcread_knum(263,7347
static void bcread_bytecode(280,7730
static void bcread_uv(294,8170
GCproto *lj_bcread_proto(lj_bcread_proto309,8536
static int bcread_header(388,11049
GCproto *lj_bcread(lj_bcread421,12009

vendor/github.com/LuaJIT/LuaJIT/src/lj_bcwrite.c,616
#define lj_bcwrite_c6,98
#define LUA_CORE7,119
typedef struct BCWriteCtx 25,425
  SBuf sb;26,453
  GCproto *pt;pt27,487
  lua_Writer wfunc;28,526
  void *wdata;wdata29,570
  int strip;30,615
  int status;31,654
} BCWriteCtx;32,705
static void bcwrite_ktabk(37,861
static void bcwrite_ktab(71,1867
static void bcwrite_kgc(111,3055
static void bcwrite_knum(169,4766
static char *bcwrite_bytecode(bcwrite_bytecode202,5764
static void bcwrite_proto(234,6842
static void bcwrite_header(301,8828
static void bcwrite_footer(324,9520
static TValue *cpwriter(cpwriter333,9736
int lj_bcwrite(345,10079

vendor/github.com/LuaJIT/LuaJIT/src/lj_buf.c,764
#define lj_buf_c6,98
#define LUA_CORE7,115
static void buf_grow(19,356
LJ_NOINLINE char *LJ_FASTCALL lj_buf_need2(31,681
LJ_NOINLINE char *LJ_FASTCALL lj_buf_more2(40,883
void LJ_FASTCALL lj_buf_shrink(50,1145
char * LJ_FASTCALL lj_buf_tmp(63,1470
SBuf *lj_buf_putmem(lj_buf_putmem72,1686
SBuf * LJ_FASTCALL lj_buf_putchar(80,1843
SBuf * LJ_FASTCALL lj_buf_putstr(88,1981
SBuf * LJ_FASTCALL lj_buf_putstr_reverse(99,2246
SBuf * LJ_FASTCALL lj_buf_putstr_lower(110,2481
SBuf * LJ_FASTCALL lj_buf_putstr_upper(128,2873
SBuf *lj_buf_putstr_rep(lj_buf_putstr_rep146,3265
SBuf *lj_buf_puttab(lj_buf_puttab170,3861
GCstr * LJ_FASTCALL lj_buf_tostr(204,4814
GCstr *lj_buf_cat2str(lj_buf_cat2str210,4949
uint32_t LJ_FASTCALL lj_buf_ruleb128(220,5241

vendor/github.com/LuaJIT/LuaJIT/src/lj_buf.h,694
#define _LJ_BUF_H7,116
#define sbufB(14,258
#define sbufP(15,298
#define sbufE(16,338
#define sbufL(17,378
#define sbufsz(18,423
#define sbuflen(19,479
#define sbufleft(20,536
#define setsbufP(21,594
#define setsbufL(22,642
static LJ_AINLINE void lj_buf_init(30,963
static LJ_AINLINE void lj_buf_reset(36,1114
static LJ_AINLINE SBuf *lj_buf_tmp_(lj_buf_tmp_41,1191
static LJ_AINLINE void lj_buf_free(49,1326
static LJ_AINLINE char *lj_buf_need(lj_buf_need54,1434
static LJ_AINLINE char *lj_buf_more(lj_buf_more61,1584
static LJ_AINLINE char *lj_buf_wmem(lj_buf_wmem73,1962
static LJ_AINLINE void lj_buf_putb(78,2080
static LJ_AINLINE GCstr *lj_buf_str(lj_buf_str98,2833

vendor/github.com/LuaJIT/LuaJIT/src/lj_carith.c,744
typedef struct CDArith 24,487
  uint8_t *p[p25,512
  CType *ct[ct26,529
} CDArith;27,545
static int carith_checkarg(30,607
static int carith_ptr(92,2484
static int carith_int64(158,4787
static int lj_carith_meta(220,6687
int lj_carith_op(264,8210
#define B64DEF(280,8645
#define B64DEF(284,8818
B64DEF(288,8913
B64DEF(289,8952
B64DEF(290,8991
B64DEF(291,9051
B64DEF(292,9096
#undef B64DEF294,9142
uint64_t lj_carith_shift64(296,9157
uint64_t lj_carith_check64(310,9639
int64_t lj_carith_mul64(355,11031
uint64_t lj_carith_divu64(362,11137
int64_t lj_carith_divi64(369,11284
uint64_t lj_carith_modu64(377,11486
int64_t lj_carith_modi64(384,11631
uint64_t lj_carith_powu64(392,11838
int64_t lj_carith_powi64(412,12161

vendor/github.com/LuaJIT/LuaJIT/src/lj_carith.h,27
#define _LJ_CARITH_H7,121

vendor/github.com/LuaJIT/LuaJIT/src/lj_ccall.c,3987
#define CCALL_HANDLE_STRUCTRET 25,476
#define CCALL_HANDLE_COMPLEXRET 30,655
#define CCALL_HANDLE_STRUCTRET 36,737
#define CCALL_HANDLE_STRUCTRET2 48,1148
#define CCALL_HANDLE_STRUCTRET 54,1268
#define CCALL_HANDLE_COMPLEXRET 63,1494
#define CCALL_HANDLE_COMPLEXRET2 75,1775
#define CCALL_HANDLE_STRUCTARG 79,1906
#define CCALL_HANDLE_COMPLEXARG 82,2004
#define CCALL_HANDLE_REGARG 85,2090
#define CCALL_HANDLE_STRUCTRET 99,2559
#define CCALL_HANDLE_COMPLEXRET 104,2759
#define CCALL_HANDLE_COMPLEXRET2 106,2815
#define CCALL_HANDLE_STRUCTARG 110,2946
#define CCALL_HANDLE_COMPLEXARG 117,3218
#define CCALL_HANDLE_REGARG 125,3506
#define CCALL_HANDLE_STRUCTRET 135,3809
#define CCALL_HANDLE_STRUCTRET2 144,4105
#define CCALL_HANDLE_COMPLEXRET 149,4266
#define CCALL_HANDLE_COMPLEXRET2 153,4377
#define CCALL_HANDLE_STRUCTARG 161,4687
#define CCALL_HANDLE_COMPLEXARG 170,5055
#define CCALL_HANDLE_REGARG 173,5165
#define CCALL_HANDLE_STRUCTRET 195,5775
#define CCALL_HANDLE_COMPLEXRET 200,5934
#define CCALL_HANDLE_COMPLEXRET2 204,6068
#define CCALL_HANDLE_STRUCTARG 207,6139
#define CCALL_HANDLE_COMPLEXARG 210,6241
#define CCALL_HANDLE_REGARG_FP1213,6322
#define CCALL_HANDLE_REGARG_FP2214,6354
#define CCALL_HANDLE_STRUCTRET 218,6394
#define CCALL_HANDLE_STRUCTRET2 222,6531
#define CCALL_HANDLE_COMPLEXRET 226,6673
#define CCALL_HANDLE_COMPLEXRET2 229,6787
#define CCALL_HANDLE_STRUCTARG 232,6891
#define CCALL_HANDLE_COMPLEXARG 236,7043
#define CCALL_HANDLE_REGARG_FP1 239,7140
#define CCALL_HANDLE_REGARG_FP2	268,7945
#define CCALL_HANDLE_REGARG 272,7988
#define CCALL_HANDLE_RET 290,8530
#define CCALL_HANDLE_STRUCTRET 296,8720
#define CCALL_HANDLE_STRUCTRET2 300,8838
#define CCALL_HANDLE_COMPLEXRET 310,9189
#define CCALL_HANDLE_COMPLEXRET2 314,9300
#define CCALL_HANDLE_STRUCTARG 323,9626
#define CCALL_HANDLE_COMPLEXARG 332,9983
#define CCALL_HANDLE_REGARG 336,10124
#define CCALL_HANDLE_RET 363,11021
#define CCALL_HANDLE_STRUCTRET 372,11253
#define CCALL_HANDLE_COMPLEXRET 376,11379
#define CCALL_HANDLE_COMPLEXRET2 380,11486
#define CCALL_HANDLE_STRUCTARG 383,11582
#define CCALL_HANDLE_COMPLEXARG 387,11720
#define CCALL_HANDLE_GPR 390,11801
#define CCALL_HANDLE_REGARG 406,12288
#define CCALL_HANDLE_REGARG 408,12340
#define CCALL_HANDLE_RET 422,12679
#define CCALL_HANDLE_STRUCTRET 430,12950
#define CCALL_HANDLE_COMPLEXRET 434,13076
#define CCALL_HANDLE_COMPLEXRET2 439,13201
#define CCALL_HANDLE_COMPLEXRET2 450,13614
#define CCALL_HANDLE_STRUCTARG 460,13947
#define CCALL_HANDLE_COMPLEXARG 463,14049
#define CCALL_HANDLE_GPR 466,14130
#define CCALL_HANDLE_REGARG 482,14621
#define CCALL_HANDLE_REGARG 493,15015
#define CCALL_HANDLE_RET 498,15168
#define CCALL_HANDLE_STRUCTRET 506,15402
#define CCALL_HANDLE_STRUCTRET2 510,15514
#define CCALL_HANDLE_COMPLEXRET 513,15624
#define CCALL_HANDLE_COMPLEXRET2 519,15774
#define CCALL_HANDLE_COMPLEXARG 527,16062
#define CCALL_HANDLE_RET 531,16216
#define CCALL_HANDLE_COMPLEXRET2 537,16392
#define CCALL_HANDLE_COMPLEXARG 546,16718
#define CCALL_HANDLE_RET 553,16848
#define CCALL_HANDLE_STRUCTARG 559,16980
#define CCALL_HANDLE_REGARG 562,17082
#define CCALL_HANDLE_STRUCTRET2 580,17551
static int ccall_classify_struct(589,17826
#define CCALL_RCL_INT	625,18826
#define CCALL_RCL_SSE	626,18850
#define CCALL_RCL_MEM	627,18874
static void ccall_classify_ct(633,19035
static int ccall_classify_struct(651,19698
static int ccall_struct_reg(669,20416
static int ccall_struct_arg(688,21044
static void ccall_struct_ret(705,21614
static unsigned int ccall_classify_struct(726,22170
static unsigned int ccall_classify_struct(773,23535
#define FTYPE_FLOAT	818,24789
#define FTYPE_DOUBLE	819,24811
static unsigned int ccall_classify_struct(822,24886
static void ccall_copy_struct(851,25629
CTypeID lj_ccall_ctid_vararg(890,26650
static int ccall_set_args(918,27516
static int ccall_get_results(1105,33151
int lj_ccall_func(1145,34540

vendor/github.com/LuaJIT/LuaJIT/src/lj_ccall.h,2635
#define _LJ_CCALL_H7,122
#define CCALL_NARG_GPR	19,323
#define CCALL_NARG_FPR	20,379
#define CCALL_NRET_GPR	21,405
#define CCALL_NRET_FPR	22,431
#define CCALL_ALIGN_STACKARG	23,492
#define CCALL_NARG_GPR	25,577
#define CCALL_NARG_FPR	26,603
#define CCALL_NRET_GPR	27,629
#define CCALL_NRET_FPR	28,655
#define CCALL_SPS_EXTRA	29,681
#define CCALL_NARG_GPR	31,714
#define CCALL_NARG_FPR	32,740
#define CCALL_NRET_GPR	33,766
#define CCALL_NRET_FPR	34,792
#define CCALL_VECTOR_REG	35,818
#define CCALL_SPS_FREE	38,886
#define CCALL_ALIGN_CALLSTATE	39,912
} FPRArg;48,1073
typedef intptr_t GPRArg;50,1084
#define CCALL_NARG_GPR	54,1131
#define CCALL_NRET_GPR	55,1157
#define CCALL_NARG_FPR	57,1226
#define CCALL_NRET_FPR	58,1252
#define CCALL_NARG_FPR	60,1284
#define CCALL_NRET_FPR	61,1310
#define CCALL_SPS_FREE	63,1343
typedef intptr_t GPRArg;65,1370
typedef union FPRArg 66,1395
  double d;67,1418
  float f[f68,1430
} FPRArg;69,1444
#define CCALL_NARG_GPR	73,1478
#define CCALL_NRET_GPR	74,1504
#define CCALL_NARG_FPR	75,1530
#define CCALL_NRET_FPR	76,1556
#define CCALL_SPS_FREE	77,1582
typedef intptr_t GPRArg;79,1609
typedef union FPRArg 80,1634
  double d;81,1657
  struct { LJ_ENDIAN_LOHI(float f; , float g;82,1669
  struct { LJ_ENDIAN_LOHI(uint32_t lo; , uint32_t hi;83,1719
} FPRArg;84,1777
#define CCALL_NARG_GPR	88,1809
#define CCALL_NARG_FPR	89,1835
#define CCALL_NRET_GPR	90,1883
#define CCALL_NRET_FPR	91,1935
#define CCALL_SPS_EXTRA	92,1983
#define CCALL_SPS_FREE	93,2010
typedef intptr_t GPRArg;95,2037
typedef double FPRArg;96,2062
#define CCALL_NARG_GPR	100,2110
#define CCALL_NARG_FPR	101,2136
#define CCALL_NRET_GPR	102,2184
#define CCALL_NRET_FPR	103,2232
#define CCALL_SPS_EXTRA	104,2280
#define CCALL_SPS_FREE	105,2307
typedef intptr_t GPRArg;107,2334
typedef union FPRArg 108,2359
  double d;109,2382
  struct { LJ_ENDIAN_LOHI(float f; , float g;110,2394
} FPRArg;111,2444
#define CCALL_NARG_GPR	116,2535
#define CCALL_NARG_FPR	117,2561
#define CCALL_NRET_GPR	118,2587
#define CCALL_NRET_FPR	119,2613
#define CCALL_SPS_EXTRA	120,2661
#define CCALL_SPS_FREE	121,2688
typedef intptr_t GPRArg;123,2715
typedef union FPRArg 124,2740
  double d;125,2763
  struct { LJ_ENDIAN_LOHI(float f; , float g;126,2775
} FPRArg;127,2825
#define CCALL_SPS_EXTRA	134,2944
#define CCALL_VECTOR_REG	137,3003
#define CCALL_ALIGN_STACKARG	140,3066
#define CCALL_ALIGN_CALLSTATE	143,3134
#define CCALL_NUM_GPR 146,3174
#define CCALL_NUM_FPR 148,3268
#define CCALL_MAXSTACK	155,3509
typedef LJ_ALIGN(CCALL_ALIGN_CALLSTATE)159,3617
} CCallState;182,4483

vendor/github.com/LuaJIT/LuaJIT/src/lj_ccallback.c,2426
#define CALLBACK_MCODE_SIZE	26,504
#define CALLBACK_SLOT2OFS(31,606
#define CALLBACK_OFS2SLOT(32,649
#define CALLBACK_MAX_SLOT	33,690
#define CALLBACK_MCODE_HEAD	37,745
#define CALLBACK_MCODE_GROUP	38,789
#define CALLBACK_SLOT2OFS(40,863
static MSize CALLBACK_OFS2SLOT(43,968
#define CALLBACK_MAX_SLOT 51,1168
#define CALLBACK_MCODE_HEAD	56,1297
#define CALLBACK_MCODE_HEAD	60,1353
#define CALLBACK_MCODE_HEAD	64,1407
#define CALLBACK_MCODE_HEAD	68,1464
#define CALLBACK_MCODE_HEAD	72,1521
#define CALLBACK_SLOT2OFS(77,1606
#define CALLBACK_OFS2SLOT(78,1649
#define CALLBACK_MAX_SLOT	79,1690
#define CALLBACK_SLOT2OFS(84,1753
#define CALLBACK_OFS2SLOT(85,1819
#define CALLBACK_MAX_SLOT	86,1883
static void *callback_slot2ptr(callback_slot2ptr90,2024
MSize lj_ccallback_ptr2slot(96,2203
#define callback_mcode_init(110,2654
static void callback_mcode_init(112,2723
static void callback_mcode_init(149,3939
static void callback_mcode_init(171,4890
static void callback_mcode_init(191,5558
static void callback_mcode_init(210,6273
#define callback_mcode_init(243,7764
#define WIN32_LEAN_AND_MEAN250,7919
#define MAP_ANONYMOUS 257,8036
static void callback_mcode_new(263,8152
void lj_ccallback_mcode_free(296,9086
#define CALLBACK_HANDLE_REGARG 316,9557
#define CALLBACK_HANDLE_REGARG 330,10027
#define CALLBACK_HANDLE_REGARG 339,10263
#define CALLBACK_HANDLE_REGARG_FP1	358,10600
#define CALLBACK_HANDLE_REGARG_FP2359,10649
#define CALLBACK_HANDLE_REGARG_FP1 363,10692
#define CALLBACK_HANDLE_REGARG_FP2	384,11177
#define CALLBACK_HANDLE_REGARG 388,11223
#define CALLBACK_HANDLE_REGARG 399,11503
#define CALLBACK_HANDLE_GPR 422,12061
#define CALLBACK_HANDLE_REGARG 435,12435
#define CALLBACK_HANDLE_REGARG 439,12514
#define CALLBACK_HANDLE_RET 452,12848
#define CALLBACK_HANDLE_GPR 459,13038
#define CALLBACK_HANDLE_REGARG 468,13277
#define CALLBACK_HANDLE_REGARG 478,13651
#define CALLBACK_HANDLE_RET 483,13732
#define CALLBACK_HANDLE_REGARG 490,13928
#define CALLBACK_HANDLE_REGARG 497,14136
#define CALLBACK_HANDLE_RET 506,14304
static void callback_conv_args(515,14573
static void callback_conv_result(623,17469
lua_State * LJ_FASTCALL lj_ccallback_enter(670,18918
void LJ_FASTCALL lj_ccallback_leave(692,19527
static MSize callback_slot_new(717,20354
static CType *callback_checkfunc(callback_checkfunc741,21064
void *lj_ccallback_new(lj_ccallback_new774,22053

vendor/github.com/LuaJIT/LuaJIT/src/lj_ccallback.h,30
#define _LJ_CCALLBACK_H7,130

vendor/github.com/LuaJIT/LuaJIT/src/lj_cconv.c,691
LJ_NORET static void cconv_err_conv(20,372
LJ_NORET static void cconv_err_convtv(37,996
LJ_NORET static void cconv_err_initov(49,1406
static CType *cconv_childqual(cconv_childqual58,1756
int lj_cconv_compatptr(76,2242
void lj_cconv_ct_ct(118,3818
int lj_cconv_tv_ct(373,11900
int lj_cconv_tv_bf(419,13371
static void cconv_array_tab(462,14749
static void cconv_substruct_tab(489,15669
static void cconv_struct_tab(527,16915
void lj_cconv_ct_tv(536,17227
void lj_cconv_bf_tv(633,20049
static void cconv_array_init(669,21411
static void cconv_substruct_init(687,22051
static void cconv_struct_init(713,22946
int lj_cconv_multi_init(727,23426
void lj_cconv_ct_init(739,23990

vendor/github.com/LuaJIT/LuaJIT/src/lj_cconv.h,439
#define _LJ_CCONV_H7,121
  CCX_B,16,249
  CCX_I,17,270
  CCX_F,18,294
  CCX_C,19,332
  CCX_V,20,356
  CCX_P,21,379
  CCX_A,22,403
  CCX_S	23,428
static LJ_AINLINE uint32_t cconv_idx(27,536
#define cconv_idx2(40,895
#define CCX(43,982
#define CCF_CAST	46,1061
#define CCF_FROMTV	47,1090
#define CCF_SAME	48,1121
#define CCF_IGNQUAL	49,1150
#define CCF_ARG_SHIFT	51,1183
#define CCF_ARG(52,1207
#define CCF_GETARG(53,1249

vendor/github.com/LuaJIT/LuaJIT/src/lj_cdata.c,349
GCcdata *lj_cdata_newref(lj_cdata_newref20,416
GCcdata *lj_cdata_newv(lj_cdata_newv29,724
GCcdata *lj_cdata_newx(lj_cdata_newx53,1552
void LJ_FASTCALL lj_cdata_free(62,1825
void lj_cdata_setfin(87,2689
CType *lj_cdata_index(lj_cdata_index109,3317
static void cdata_getconst(212,6680
int lj_cdata_get(224,7110
void lj_cdata_set(258,8013

vendor/github.com/LuaJIT/LuaJIT/src/lj_cdata.h,253
#define _LJ_CDATA_H7,120
static LJ_AINLINE void *cdata_getptr(cdata_getptr16,244
static LJ_AINLINE void cdata_setptr(27,529
static LJ_AINLINE GCcdata *lj_cdata_new(lj_cdata_new38,845
static LJ_AINLINE GCcdata *lj_cdata_new_(lj_cdata_new_52,1265

vendor/github.com/LuaJIT/LuaJIT/src/lj_char.c,108
#define lj_char_c19,793
#define LUA_CORE20,811
LJ_DATADEF const uint8_t lj_char_bits[lj_char_bits24,851

vendor/github.com/LuaJIT/LuaJIT/src/lj_char.h,863
#define _LJ_CHAR_H7,79
#define LJ_CHAR_CNTRL	11,120
#define LJ_CHAR_SPACE	12,147
#define LJ_CHAR_PUNCT	13,174
#define LJ_CHAR_DIGIT	14,201
#define LJ_CHAR_XDIGIT	15,228
#define LJ_CHAR_UPPER	16,256
#define LJ_CHAR_LOWER	17,283
#define LJ_CHAR_IDENT	18,310
#define LJ_CHAR_ALPHA	19,337
#define LJ_CHAR_ALNUM	20,389
#define LJ_CHAR_GRAPH	21,441
#define lj_char_isa(24,566
#define lj_char_iscntrl(25,620
#define lj_char_isspace(26,679
#define lj_char_ispunct(27,738
#define lj_char_isdigit(28,797
#define lj_char_isxdigit(29,856
#define lj_char_isupper(30,917
#define lj_char_islower(31,976
#define lj_char_isident(32,1035
#define lj_char_isalpha(33,1094
#define lj_char_isalnum(34,1153
#define lj_char_isgraph(35,1212
#define lj_char_toupper(37,1272
#define lj_char_tolower(38,1333
LJ_DATA const uint8_t lj_char_bits[lj_char_bits40,1388

vendor/github.com/LuaJIT/LuaJIT/src/lj_clib.c,1846
#define CLIB_DEFHANDLE	29,518
#define CLIB_DEFHANDLE	31,591
#define CLIB_DEFHANDLE	33,643
LJ_NORET LJ_NOINLINE static void clib_error_(36,679
#define clib_error(41,777
#define CLIB_SOPREFIX	44,847
#define CLIB_SOPREFIX	46,881
#define CLIB_SOEXT	50,935
#define CLIB_SOEXT	52,988
#define CLIB_SOEXT	54,1022
static const char *clib_extname(clib_extname57,1057
static const char *clib_check_lds(clib_check_lds82,1632
static const char *clib_resolve_lds(clib_resolve_lds95,2034
static void *clib_loadlib(clib_loadlib116,2555
static void clib_unloadlib(133,3057
static void *clib_getsym(clib_getsym139,3178
#define WIN32_LEAN_AND_MEAN147,3314
#define GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS	151,3411
#define GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT	152,3460
#define CLIB_DEFHANDLE	156,3580
  CLIB_HANDLE_EXE,160,3649
  CLIB_HANDLE_DLL,161,3668
  CLIB_HANDLE_CRT,162,3687
  CLIB_HANDLE_KERNEL32,163,3706
  CLIB_HANDLE_USER32,164,3730
  CLIB_HANDLE_GDI32,165,3752
  CLIB_HANDLE_MAX166,3773
static void *clib_def_handle[clib_def_handle169,3795
LJ_NORET LJ_NOINLINE static void clib_error(171,3843
static int clib_needext(190,4498
static const char *clib_extname(clib_extname199,4638
static void *clib_loadlib(clib_loadlib208,4815
static void clib_unloadlib(218,5115
static void *clib_getsym(clib_getsym234,5467
#define CLIB_DEFHANDLE	270,6734
LJ_NORET LJ_NOINLINE static void clib_error(272,6763
static void *clib_loadlib(clib_loadlib278,6950
static void clib_unloadlib(285,7151
static void *clib_getsym(clib_getsym290,7211
static CTSize clib_func_argsize(302,7496
static const char *clib_extsym(clib_extsym318,7823
TValue *lj_clib_index(lj_clib_index329,8113
static CLibrary *clib_new(clib_new383,9868
void lj_clib_load(397,10263
void lj_clib_unload(405,10476
void lj_clib_default(412,10601

vendor/github.com/LuaJIT/LuaJIT/src/lj_clib.h,162
#define _LJ_CLIB_H7,122
#define CLNS_INDEX	14,218
typedef struct CLibrary 17,315
  void *handle;handle18,341
  GCtab *cache;cache19,406
} CLibrary;20,478

vendor/github.com/LuaJIT/LuaJIT/src/lj_cparse.c,3164
static const char *const ctoknames[ctoknames34,899
#define CTOKSTR(35,940
#undef CTOKSTR37,989
static const char *cp_tok2str(cp_tok2str44,1096
static LJ_AINLINE int cp_iseol(56,1411
static LJ_AINLINE CPChar cp_rawpeek(62,1523
static LJ_AINLINE CPChar cp_get(70,1690
static LJ_NOINLINE CPChar cp_get_bs(78,1905
static LJ_AINLINE void cp_save(90,2173
static void cp_newline(96,2320
LJ_NORET static void cp_errmsg(103,2452
LJ_NORET LJ_NOINLINE static void cp_err_token(129,3199
LJ_NORET LJ_NOINLINE static void cp_err_badidx(134,3338
LJ_NORET LJ_NOINLINE static void cp_err(140,3538
static CPToken cp_number(148,3780
static CPToken cp_ident(164,4306
static CPToken cp_param(175,4646
static CPToken cp_string(207,5503
static void cp_comment_c(264,6874
static void cp_comment_cpp(277,7140
static CPToken cp_next_(284,7307
static LJ_NOINLINE CPToken cp_next(330,8734
#define CPNS_DEFAULT 338,8946
#define CPNS_STRUCT	340,9050
typedef CTypeID CPDeclIdx;342,9115
typedef uint32_t CPscl;343,9178
typedef struct CPDecl 346,9263
  CPDeclIdx top;347,9287
  CPDeclIdx pos;348,9336
  CPDeclIdx specpos;349,9400
  uint32_t mode;350,9469
  CPState *cp;cp351,9509
  GCstr *name;name352,9547
  GCstr *redir;redir353,9610
  CTypeID nameid;354,9657
  CTInfo attr;355,9723
  CTInfo fattr;356,9757
  CTInfo specattr;357,9801
  CTInfo specfattr;358,9844
  CTSize bits;359,9897
  CType stack[stack360,9948
} CPDecl;361,10016
static void cp_init(369,10295
static void cp_cleanup(384,10640
static int cp_opt(391,10778
static void cp_check(398,10919
static int cp_istypedecl(405,11091
static void cp_expr_comma(427,11970
static void cp_expr_sizeof(433,12120
static void cp_expr_prefix(459,12760
static void cp_expr_postfix(520,14826
static void cp_expr_infix(563,16151
static void cp_expr_unary(697,19826
static void cp_expr_sub(706,20059
static void cp_expr_kint(713,20216
static CTSize cp_expr_ksize(722,20448
static CPDeclIdx cp_add(733,20748
static CPDeclIdx cp_push(748,21245
static void cp_push_attributes(754,21396
static void cp_push_type(771,21957
static CTypeID cp_decl_intern(814,23485
#define H_(932,27717
static void cp_decl_reset(935,27826
static CTypeID cp_decl_constinit(948,28164
static CTSize cp_decl_sizeattr(977,29036
static void cp_decl_align(990,29339
static void cp_decl_asm(1002,29650
static void cp_decl_mode(1020,30075
static void cp_decl_gccattribute(1053,30893
static void cp_decl_msvcattribute(1124,33117
static void cp_decl_attributes(1147,33688
static CTypeID cp_struct_name(1176,34510
static CTSize cp_field_align(1215,35846
static void cp_struct_layout(1236,36484
static CTypeID cp_decl_struct(1317,39555
static CTypeID cp_decl_enum(1396,42147
static CPscl cp_decl_spec(1451,43923
static void cp_decl_array(1564,47169
static void cp_decl_func(1578,47594
static void cp_declarator(1638,49476
static CTypeID cp_decl_abstract(1707,51564
static void cp_pragma(1717,51781
static void cp_line(1753,52828
static void cp_decl_multi(1763,53153
static void cp_decl_single(1847,55975
#undef H_1856,56190
static TValue *cpcparser(cpcparser1861,56320
int lj_cparse(1878,56757

vendor/github.com/LuaJIT/LuaJIT/src/lj_cparse.h,1064
#define _LJ_CPARSE_H7,124
#define CPARSE_MAX_BUF	15,227
#define CPARSE_MAX_DECLSTACK	16,287
#define CPARSE_MAX_DECLDEPTH	17,356
#define CPARSE_MAX_PACKSTACK	18,428
#define CPARSE_MODE_MULTI	21,527
#define CPARSE_MODE_ABSTRACT	22,592
#define CPARSE_MODE_DIRECT	23,658
#define CPARSE_MODE_FIELD	24,720
#define CPARSE_MODE_NOIMPLICIT	25,787
#define CPARSE_MODE_SKIP	26,857
typedef int CPChar;28,925
typedef int CPToken;29,996
typedef struct CPValue 32,1086
    int32_t i32;34,1121
    uint32_t u32;35,1166
  CTypeID id;37,1218
} CPValue;38,1263
typedef struct CPState 41,1297
  CPChar c;42,1322
  CPToken tok;43,1360
  CPValue val;44,1397
  GCstr *str;str45,1432
  CType *ct;ct46,1492
  const char *p;p47,1532
  SBuf sb;48,1589
  lua_State *L;L49,1633
  CTState *cts;cts50,1667
  TValue *param;param51,1704
  const char *srcname;srcname52,1746
  BCLine linenumber;53,1796
  int depth;54,1843
  uint32_t tmask;55,1892
  uint32_t mode;56,1947
  uint8_t packstack[packstack57,1985
  uint8_t curpack;58,2059
} CPState;59,2123

vendor/github.com/LuaJIT/LuaJIT/src/lj_crecord.c,2545
#define lj_ffrecord_c6,119
#define LUA_CORE7,141
#define IR(37,752
#define emitir(40,846
#define emitconv(42,919
static GCcdata *argv2cdata(argv2cdata47,1097
static CTypeID crec_constructor(61,1535
static CTypeID argv2ctype(71,1854
static IRType crec_ct2irt(97,2668
#define CREC_COPY_MAXUNROLL	125,3525
#define CREC_COPY_MAXLEN	126,3557
#define CREC_FILL_MAXUNROLL	128,3588
#define CREC_COPY_REGWIN	132,3706
#define CREC_COPY_REGWIN	134,3772
#define CREC_COPY_REGWIN	136,3806
typedef struct CRecMemList 140,3886
  CTSize ofs;141,3915
  IRType tp;142,3953
  TRef trofs;143,3993
  TRef trval;144,4039
} CRecMemList;145,4080
static MSize crec_copy_struct(148,4151
static MSize crec_copy_unroll(181,5118
static void crec_copy_emit(205,5672
static void crec_copy(227,6384
static MSize crec_fill_unroll(276,7882
static void crec_fill_emit(299,8380
static void crec_fill(311,8719
static int crec_isnonzero(365,10908
static TRef crec_ct_ct(388,11411
static TRef crec_tv_ct(547,16355
static TRef crec_ct_tv(598,18407
static TRef crec_reassoc_ofs(698,22141
static void crec_tailcall(716,22736
static void crec_index_meta(729,23058
static void crec_index_bf(755,24011
void LJ_FASTCALL recff_cdata_index(796,25881
static void crec_finalizer(939,30484
static void crec_alloc(954,30902
static TRef crec_call_args(1077,35126
static void crec_snap_caller(1174,37855
static int crec_call(1196,38577
void LJ_FASTCALL recff_cdata_call(1265,40974
static TRef crec_arith_int64(1295,41766
static TRef crec_arith_ptr(1351,43535
static TRef crec_arith_meta(1413,45792
void LJ_FASTCALL recff_cdata_arith(1450,47056
void LJ_FASTCALL recff_clib_index(1552,50389
static TRef crec_toint(1598,51966
void LJ_FASTCALL recff_ffi_new(1603,52110
void LJ_FASTCALL recff_ffi_errno(1608,52240
void LJ_FASTCALL recff_ffi_string(1616,52431
void LJ_FASTCALL recff_ffi_copy(1633,53011
void LJ_FASTCALL recff_ffi_fill(1651,53721
void LJ_FASTCALL recff_ffi_typeof(1675,54606
void LJ_FASTCALL recff_ffi_istype(1687,54971
void LJ_FASTCALL recff_ffi_abi(1699,55271
void LJ_FASTCALL recff_ffi_xof(1712,55705
void LJ_FASTCALL recff_ffi_gc(1729,56360
static CTypeID crec_bit64_type(1740,56722
void LJ_FASTCALL recff_bit64_tobit(1753,57218
int LJ_FASTCALL recff_bit64_unary(1763,57516
int LJ_FASTCALL recff_bit64_nary(1776,57932
int LJ_FASTCALL recff_bit64_shift(1799,58659
TRef recff_bit64_tohex(1832,59766
void LJ_FASTCALL lj_crecord_tonumber(1869,61043
#undef IR1886,61644
#undef emitir1887,61654
#undef emitconv1888,61668

vendor/github.com/LuaJIT/LuaJIT/src/lj_crecord.h,28
#define _LJ_CRECORD_H7,141

vendor/github.com/LuaJIT/LuaJIT/src/lj_ctype.c,1862
#define CTTDDEF(22,414
#define CTKWDEF(47,1099
static CTInfo lj_ctype_typeinfo[lj_ctype_typeinfo115,3371
#define CTTYINFODEF(116,3409
#define CTTDINFODEF(117,3487
#define CTKWINFODEF(118,3549
#undef CTTYINFODEF122,3685
#undef CTTDINFODEF123,3704
#undef CTKWINFODEF124,3723
static const char * const lj_ctype_typenames 129,3808
#define CTTDNAMEDEF(130,3855
#define CTKWNAMEDEF(131,3896
#undef CTTDNAMEDEF134,3983
#undef CTKWNAMEDEF135,4002
#define CTTYPEINFO_NUM	138,4024
#define CTTYPETAB_MIN	140,4126
#define CTTYPETAB_MIN	142,4170
#define ct_hashtype(147,4285
#define ct_hashname(148,4353
CTypeID lj_ctype_new(152,4479
CTypeID lj_ctype_intern(181,5224
static void ctype_addtype(208,5962
void lj_ctype_addname(216,6175
CTypeID lj_ctype_getname(224,6394
CType *lj_ctype_getfieldq(lj_ctype_getfieldq241,6870
CType *lj_ctype_rawref(lj_ctype_rawref271,7690
CTSize lj_ctype_size(280,7940
CTSize lj_ctype_vlsize(287,8165
CTInfo lj_ctype_info(310,8986
cTValue *lj_ctype_meta(lj_ctype_meta336,9810
#define CTREPR_MAX	358,10524
typedef struct CTRepr 360,10549
  char *pb,pb361,10573
  char *pb, *pe;pe361,10573
  CTState *cts;cts362,10590
  lua_State *L;L363,10606
  int needsp;364,10622
  int ok;365,10636
  char buf[buf366,10646
} CTRepr;367,10670
static void ctype_prepstr(370,10703
#define ctype_preplit(381,10965
static void ctype_prepc(384,11062
static void ctype_prepnum(391,11203
static void ctype_appc(401,11440
static void ctype_appnum(408,11592
static void ctype_prepqual(420,11923
static void ctype_preptype(427,12123
static void ctype_repr(441,12527
GCstr *lj_ctype_repr(lj_ctype_repr539,15358
GCstr *lj_ctype_repr_int64(lj_ctype_repr_int64555,15837
GCstr *lj_ctype_repr_complex(lj_ctype_repr_complex573,16309
CTState *lj_ctype_init(lj_ctype_init592,16959
void lj_ctype_freestate(626,17957

vendor/github.com/LuaJIT/LuaJIT/src/lj_ctype.h,6039
#define _LJ_CTYPE_H7,120
  CT_NUM,19,380
  CT_STRUCT,20,432
  CT_PTR,21,469
  CT_ARRAY,22,508
  CT_MAYCONVERT 23,550
  CT_MAYCONVERT = CT_ARRAY,23,550
  CT_VOID,24,578
  CT_ENUM,25,607
  CT_HASSIZE 26,638
  CT_HASSIZE = CT_ENUM,26,638
  CT_FUNC,27,717
  CT_TYPEDEF,28,745
  CT_ATTRIB,29,775
  CT_FIELD,31,853
  CT_BITFIELD,32,914
  CT_CONSTVAL,33,959
  CT_EXTERN,34,997
  CT_KW	35,1037
#define CTF_BOOL	64,2474
#define CTF_FP	65,2533
#define CTF_CONST	66,2588
#define CTF_VOLATILE	67,2641
#define CTF_UNSIGNED	68,2700
#define CTF_LONG	69,2764
#define CTF_VLA	70,2810
#define CTF_REF	71,2877
#define CTF_VECTOR	72,2928
#define CTF_COMPLEX	73,2980
#define CTF_UNION	74,3034
#define CTF_VARARG	75,3085
#define CTF_SSEREGPARM	76,3136
#define CTF_QUAL	78,3209
#define CTF_ALIGN	79,3251
#define CTF_UCHAR	80,3299
#define CTFP_ALIGNED	83,3402
#define CTFP_PACKED	84,3458
#define CTFP_CCONV	86,3555
#define CTMASK_CID	89,3653
#define CTMASK_NUM	90,3711
#define CTSHIFT_NUM	91,3770
#define CTMASK_ALIGN	92,3793
#define CTSHIFT_ALIGN	93,3848
#define CTMASK_ATTRIB	94,3873
#define CTSHIFT_ATTRIB	95,3927
#define CTMASK_CCONV	96,3953
#define CTSHIFT_CCONV	97,4011
#define CTMASK_REGPARM	98,4036
#define CTSHIFT_REGPARM	99,4087
#define CTMASK_VSIZEP	101,4151
#define CTSHIFT_VSIZEP	102,4209
#define CTMASK_MSIZEP	103,4234
#define CTSHIFT_MSIZEP	104,4301
#define CTBSZ_MAX	107,4391
#define CTBSZ_FIELD	108,4452
#define CTMASK_BITPOS	109,4515
#define CTMASK_BITBSZ	110,4541
#define CTMASK_BITCSZ	111,4567
#define CTSHIFT_BITPOS	112,4593
#define CTSHIFT_BITBSZ	113,4618
#define CTSHIFT_BITCSZ	114,4643
#define CTF_INSERT(116,4670
enum { CTCC_CDECL,121,4860
enum { CTCC_CDECL, CTCC_THISCALL,121,4860
enum { CTCC_CDECL, CTCC_THISCALL, CTCC_FASTCALL,121,4860
enum { CTCC_CDECL, CTCC_THISCALL, CTCC_FASTCALL, CTCC_STDCALL 121,4860
  CTA_NONE,125,4958
  CTA_QUAL,126,5010
  CTA_ALIGN,127,5050
  CTA_SUBTYPE,128,5090
  CTA_REDIR,129,5134
  CTA_BAD,130,5178
  CTA__MAX131,5214
#define CTSIZE_INVALID	135,5250
typedef uint32_t CTInfo;137,5286
typedef uint32_t CTSize;138,5328
typedef uint32_t CTypeID;139,5370
typedef uint16_t CTypeID1;140,5411
typedef struct CType 143,5496
  CTInfo info;144,5519
  CTSize size;145,5552
  CTypeID1 sib;146,5599
  CTypeID1 next;147,5639
  GCRef name;148,5690
} CType;149,5733
#define CTHASH_SIZE	151,5743
#define CTHASH_MASK	152,5797
#define CCALL_MAX_GPR	155,5903
#define CCALL_MAX_FPR	156,5928
typedef LJ_ALIGN(8) union FPRCBArg { double d; float f[2]; } FPRCBArg;158,5954
} CCallback;171,6595
typedef struct CTState 174,6629
  CType *tab;tab175,6654
  CTypeID top;176,6689
  MSize sizetab;177,6740
  lua_State *L;L178,6785
  global_State *g;g179,6855
  GCtab *finalizer;finalizer180,6894
  GCtab *miscmap;miscmap181,6947
  CCallback cb;182,7021
  CTypeID1 hash[hash183,7070
} CTState;184,7138
#define CTINFO(186,7150
#define CTALIGN(187,7218
#define CTATTRIB(188,7271
#define ctype_type(190,7327
#define ctype_cid(191,7376
#define ctype_align(192,7434
#define ctype_attrib(193,7503
#define ctype_bitpos(194,7575
#define ctype_bitbsz(195,7647
#define ctype_bitcsz(196,7719
#define ctype_vsizeP(197,7791
#define ctype_msizeP(198,7863
#define ctype_cconv(199,7935
#define ctype_isnum(202,8031
#define ctype_isvoid(203,8088
#define ctype_isptr(204,8147
#define ctype_isarray(205,8204
#define ctype_isstruct(206,8265
#define ctype_isfunc(207,8328
#define ctype_isenum(208,8387
#define ctype_istypedef(209,8446
#define ctype_isattrib(210,8511
#define ctype_isfield(211,8574
#define ctype_isbitfield(212,8635
#define ctype_isconstval(213,8702
#define ctype_isextern(214,8769
#define ctype_hassize(215,8832
#define ctype_isinteger(218,8933
#define ctype_isinteger_or_bool(220,9030
#define ctype_isbool(222,9126
#define ctype_isfp(224,9220
#define ctype_ispointer(227,9309
#define ctype_isref(229,9411
#define ctype_isrefarray(232,9503
#define ctype_isvector(234,9610
#define ctype_iscomplex(236,9712
#define ctype_isvltype(239,9818
#define ctype_isvlarray(242,9972
#define ctype_isxattrib(245,10070
#define CTSIZE_PTR	251,10254
#define CTALIGN_PTR	252,10275
#define CTSIZE_PTR	254,10312
#define CTALIGN_PTR	255,10333
#define CTINFO_REF(258,10372
#define CT_MEMALIGN	261,10457
#define CTTYDEFP(267,10656
#define CTTYDEFP(270,10729
#define CTTYDEF(274,10777
#define CTTYIDDEF(302,12017
CTTYDEF(303,12064
CTTYDEF(CTTYIDDEF)303,12064
#undef CTTYIDDEF304,12083
  CTID_MAX 306,12149
#define CTID_INT_PSZ	311,12215
#define CTID_UINT_PSZ	312,12247
#define CTID_INT_PSZ	314,12287
#define CTID_UINT_PSZ	315,12319
#define CTID_WCHAR	319,12376
#define CTID_WCHAR	321,12427
#define CTID_WCHAR	323,12464
#define CTOKDEF(329,12606
#define CDSDEF(336,12885
#define CKWDEF(343,13131
  CTOK_OFS 351,13318
#define CTOKNUM(352,13336
#define CKWNUM(353,13376
CTOKDEF(354,13411
CTOKDEF(CTOKNUM)354,13411
CKWDEF(355,13428
CKWDEF(CKWNUM)355,13428
#undef CTOKNUM356,13443
#undef CKWNUM357,13458
  CTOK_FIRSTDECL 358,13472
  CTOK_FIRSTDECL = CTOK_VOID,358,13472
  CTOK_FIRSTSCL 359,13502
  CTOK_FIRSTSCL = CTOK_TYPEDEF,359,13502
  CTOK_LASTDECLFLAG 360,13534
  CTOK_LASTDECLFLAG = CTOK_REGISTER,360,13534
  CTOK_LASTDECL 361,13571
  CTOK_LASTDECL = CTOK_ENUM361,13571
#define CDSFLAG(366,13645
CDSDEF(367,13720
CDSDEF(CDSFLAG)367,13720
#undef CDSFLAG368,13736
  CDF__END369,13751
#define CDF_SCL 372,13766
#define ctype_ctsG(376,13922
static LJ_AINLINE CTState *ctype_cts(ctype_cts379,14004
#define LJ_CTYPE_SAVE(387,14211
#define LJ_CTYPE_RESTORE(388,14264
static LJ_AINLINE CTypeID ctype_check(393,14455
static LJ_AINLINE CType *ctype_get(ctype_get400,14621
#define ctype_typeid(406,14763
static LJ_AINLINE CType *ctype_child(ctype_child409,14849
static LJ_AINLINE CType *ctype_raw(ctype_raw417,15137
static LJ_AINLINE CType *ctype_rawchild(ctype_rawchild425,15357
static LJ_AINLINE void ctype_setname(432,15556
#define lj_ctype_getfield(446,16148

vendor/github.com/LuaJIT/LuaJIT/src/lj_debug.c,1144
#define lj_debug_c6,110
#define LUA_CORE7,129
cTValue *lj_debug_frame(lj_debug_frame25,499
#define NO_BCPOS	50,1238
static BCPos debug_framepc(53,1331
BCLine LJ_FASTCALL lj_debug_line(113,3161
static BCLine debug_frameline(131,3742
static const char *debug_varname(debug_varname145,4151
#define VARNAMESTR(165,4812
#undef VARNAMESTR167,4885
static TValue *debug_localname(debug_localname178,5073
const char *lj_debug_uvname(lj_debug_uvname214,6201
const char *lj_debug_uvnamev(lj_debug_uvnamev224,6451
const char *lj_debug_slotname(lj_debug_slotname245,6928
const char *lj_debug_funcname(lj_debug_funcname288,8121
void lj_debug_shortname(319,9019
void lj_debug_addloc(350,10211
void lj_debug_pushloc(370,10755
LUA_API const char *lua_getlocal(lua_getlocal399,11557
LUA_API const char *lua_setlocal(lua_setlocal414,11955
int lj_debug_getinfo(424,12184
LUA_API int lua_getinfo(526,14991
LUA_API int lua_getstack(531,15122
static int debug_putchunkname(546,15462
void lj_debug_dumpstack(576,16119
#define TRACEBACK_LEVELS1	650,18407
#define TRACEBACK_LEVELS2	651,18436
LUALIB_API void luaL_traceback 653,18466

vendor/github.com/LuaJIT/LuaJIT/src/lj_debug.h,623
#define _LJ_DEBUG_H7,130
typedef struct lj_Debug 11,172
  int event;13,260
  const char *name;name14,273
  const char *namewhat;namewhat15,293
  const char *what;what16,317
  const char *source;source17,337
  int currentline;18,359
  int nups;19,378
  int linedefined;20,390
  int lastlinedefined;21,409
  char short_src[short_src22,432
  int i_ci;23,462
  int nparams;25,555
  int isvararg;26,570
} lj_Debug;27,586
#define VARNAMEDEF(49,1570
  VARNAME_END,58,1789
#define VARNAMEENUM(59,1804
  VARNAMEDEF(60,1851
  VARNAMEDEF(VARNAMEENUM)60,1851
#undef VARNAMEENUM61,1877
  VARNAME__MAX62,1896

vendor/github.com/LuaJIT/LuaJIT/src/lj_def.h,4684
#define _LJ_DEF_H7,135
typedef __int8 int8_t;13,267
typedef __int16 int16_t;14,290
typedef __int32 int32_t;15,315
typedef __int64 int64_t;16,340
typedef unsigned __int8 uint8_t;17,365
typedef unsigned __int16 uint16_t;18,398
typedef unsigned __int32 uint32_t;19,433
typedef unsigned __int64 uint64_t;20,468
typedef __int64 intptr_t;22,517
typedef unsigned __int64 uintptr_t;23,543
typedef __int32 intptr_t;25,585
typedef unsigned __int32 uintptr_t;26,611
typedef signed char int8_t;30,694
typedef short int int16_t;31,722
typedef int int32_t;32,749
typedef long long int64_t;33,770
typedef unsigned char uint8_t;34,797
typedef unsigned short int uint16_t;35,828
typedef unsigned int uint32_t;36,865
typedef unsigned long long uint64_t;37,896
typedef int intptr_t;38,933
typedef unsigned int uintptr_t;39,955
#define LJ_MAX_MEM32	49,1112
#define LJ_MAX_MEM64	50,1181
#define LJ_MAX_MEM	52,1294
#define LJ_MAX_ALLOC	53,1353
#define LJ_MAX_STR	54,1426
#define LJ_MAX_BUF	55,1484
#define LJ_MAX_UDATA	56,1542
#define LJ_MAX_STRTAB	58,1605
#define LJ_MAX_HBITS	59,1666
#define LJ_MAX_ABITS	60,1713
#define LJ_MAX_ASIZE	61,1768
#define LJ_MAX_COLOSIZE	62,1844
#define LJ_MAX_LINE	64,1911
#define LJ_MAX_XLEVEL	65,1980
#define LJ_MAX_BCINS	66,2043
#define LJ_MAX_SLOTS	67,2112
#define LJ_MAX_LOCVAR	68,2175
#define LJ_MAX_UPVAL	69,2235
#define LJ_MAX_IDXCHAIN	71,2287
#define LJ_STACK_EXTRA	72,2354
#define LJ_NUM_CBPAGE	74,2430
#define LJ_MIN_GLOBAL	77,2526
#define LJ_MIN_REGISTRY	78,2589
#define LJ_MIN_STRTAB	79,2650
#define LJ_MIN_SBUF	80,2714
#define LJ_MIN_VECSZ	81,2771
#define LJ_MIN_IRSZ	82,2833
#define LJ_MAX_JSLOTS	85,2918
#define LJ_MAX_PHI	86,2986
#define LJ_MAX_EXITSTUBGR	87,3042
#define UNUSED(91,3143
#define U64x(94,3205
#define i32ptr(95,3272
#define u32ptr(96,3323
#define i64ptr(97,3375
#define u64ptr(98,3426
#define igcptr(99,3478
#define checki8(101,3531
#define checku8(102,3580
#define checki16(103,3630
#define checku16(104,3681
#define checki32(105,3733
#define checku32(106,3775
#define checkptr32(107,3818
#define checkptr47(108,3885
#define checkptrGC(109,3947
#define lj_rol(112,4105
#define lj_ror(113,4176
typedef uintptr_t BloomFilter;116,4313
#define BLOOM_MASK	117,4344
#define bloombit(118,4391
#define bloomset(119,4448
#define bloomtest(120,4494
#define LJ_NORET	124,4585
#define LJ_ALIGN(125,4628
#define LJ_INLINE	126,4676
#define LJ_AINLINE	127,4701
#define LJ_NOINLINE	128,4758
#define LJ_NOAPI	132,4942
#define LJ_FASTCALL	141,5274
#define LJ_LIKELY(144,5328
#define LJ_UNLIKELY(145,5376
#define lj_ffs(147,5427
static LJ_AINLINE uint32_t lj_fls(150,5570
#define lj_fls(155,5703
static LJ_AINLINE uint32_t lj_bswap(159,5784
static LJ_AINLINE uint64_t lj_bswap64(180,6306
static LJ_AINLINE uint32_t lj_bswap(185,6501
static LJ_AINLINE uint64_t lj_bswap64(190,6604
static LJ_AINLINE uint32_t lj_bswap(195,6755
static LJ_AINLINE uint64_t lj_bswap64(201,6896
static LJ_AINLINE uint64_t lj_bswap64(206,7034
static LJ_AINLINE uint32_t lj_bswap(212,7167
static LJ_AINLINE uint64_t lj_bswap64(217,7296
typedef union __attribute__((packed)) Unaligned16 224,7452
  uint16_t u;225,7504
  uint8_t b[b226,7518
} Unaligned16;227,7534
typedef union __attribute__((packed)) Unaligned32 229,7550
  uint32_t u;230,7602
  uint8_t b[b231,7616
} Unaligned32;232,7632
static LJ_AINLINE uint16_t lj_getu16(235,7682
static LJ_AINLINE uint32_t lj_getu32(241,7811
#define LJ_NORET	248,7931
#define LJ_ALIGN(249,7969
#define LJ_INLINE	250,8010
#define LJ_AINLINE	251,8037
#define LJ_NOINLINE	252,8070
#define LJ_FASTCALL	254,8132
static LJ_AINLINE uint32_t lj_fls(260,8262
static LJ_AINLINE uint32_t lj_ffs(270,8542
static LJ_AINLINE uint32_t lj_fls(275,8641
#define lj_bswap(283,8830
#define lj_bswap64(284,8873
static LJ_AINLINE uint16_t lj_getu16(291,9134
static LJ_AINLINE uint32_t lj_getu32(296,9270
#define lj_getu16(303,9489
#define lj_getu32(304,9529
#define LJ_FASTCALL313,9678
#define LJ_NORET316,9722
#define LJ_NOAPI	319,9763
#define LJ_LIKELY(322,9812
#define LJ_UNLIKELY(323,9837
#define LJ_DATA	327,9913
#define LJ_DATADEF328,9939
#define LJ_ASMF	329,9958
#define LJ_FUNCA	330,9984
#define LJ_FUNC	332,10033
#define LJ_FUNC	334,10063
#define LJ_FUNC_NORET	336,10096
#define LJ_FUNCA_NORET	337,10135
#define LJ_ASMF_NORET	338,10176
#define check_exp(342,10260
#define api_check(343,10306
#define lua_assert(345,10351
#define check_exp(346,10384
#define api_check	347,10413
#define LJ_ASSERT_NAME2(351,10479
#define LJ_ASSERT_NAME(352,10528
#define LJ_STATIC_ASSERT(354,10611
#define LJ_STATIC_ASSERT(357,10734

vendor/github.com/LuaJIT/LuaJIT/src/lj_dispatch.c,1104
#define lj_dispatch_c6,112
#define LUA_CORE7,134
#define lj_dispatch_stitch	46,983
#define lj_dispatch_profile	49,1052
#define GOTFUNC(52,1104
static const ASMFunction dispatch_got[dispatch_got53,1145
#undef GOTFUNC56,1210
void lj_dispatch_init(60,1295
void lj_dispatch_init_hotcount(84,2125
#define DISPMODE_CALL	96,2447
#define DISPMODE_RET	97,2504
#define DISPMODE_INS	98,2562
#define DISPMODE_JIT	99,2625
#define DISPMODE_REC	100,2674
#define DISPMODE_PROF	101,2724
void lj_dispatch_update(104,2832
static void setptmode(211,6726
static void setptmode_all(224,7233
int luaJIT_setmode(239,7626
LUA_API void LUAJIT_VERSION_SYM(323,9955
LUA_API int lua_sethook(330,10151
LUA_API lua_Hook lua_gethook(343,10598
LUA_API int lua_gethookmask(348,10668
LUA_API int lua_gethookcount(353,10757
static void callhook(359,10856
static BCReg cur_topslot(390,11717
void LJ_FASTCALL lj_dispatch_ins(404,12188
static int call_init(449,13599
ASMFunction LJ_FASTCALL lj_dispatch_call(467,14127
void LJ_FASTCALL lj_dispatch_stitch(522,15760
void LJ_FASTCALL lj_dispatch_profile(539,16248

vendor/github.com/LuaJIT/LuaJIT/src/lj_dispatch.h,1472
#define _LJ_DISPATCH_H7,135
#define SFGOTDEF(29,646
#define SFGOTDEF(31,728
#define JITGOTDEF(34,769
#define JITGOTDEF(36,829
#define FFIGOTDEF(39,871
#define FFIGOTDEF(42,966
#define GOTDEF(44,994
#define GOTENUM(62,1967
GOTDEF(63,2004
GOTDEF(GOTENUM)63,2004
#undef GOTENUM64,2020
  LJ_GOT__MAX65,2035
typedef uint16_t HotCount;71,2207
#define HOTCOUNT_SIZE	74,2308
#define HOTCOUNT_PCMASK	75,2334
#define HOTCOUNT_LOOP	78,2424
#define HOTCOUNT_CALL	79,2449
#define GG_NUM_ASMFF	82,2548
#define GG_LEN_DDISP	84,2573
#define GG_LEN_SDISP	85,2619
#define GG_LEN_DISP	86,2649
typedef struct GG_State 89,2773
  lua_State L;90,2799
  global_State g;91,2836
  ASMFunction got[got93,2895
  jit_State J;96,2976
  HotCount hotcount[hotcount97,3011
  ASMFunction dispatch[dispatch99,3074
  BCIns bcff[bcff100,3146
} GG_State;101,3214
#define GG_OFS(103,3227
#define G2GG(104,3282
#define J2GG(105,3340
#define L2GG(106,3397
#define J2G(107,3427
#define G2J(108,3457
#define L2J(109,3489
#define GG_G2J	110,3519
#define GG_G2DISP	111,3559
#define GG_DISP2G	112,3608
#define GG_DISP2J	113,3657
#define GG_DISP2HOT	114,3706
#define GG_DISP2STATIC	115,3764
#define hotcount_get(117,3828
#define hotcount_set(119,3913
#define WIN32_LEAN_AND_MEAN143,4784
#define ERRNO_SAVE	145,4833
#define ERRNO_RESTORE	146,4904
#define ERRNO_SAVE	148,4971
#define ERRNO_RESTORE	149,5010
#define ERRNO_SAVE152,5061
#define ERRNO_RESTORE153,5080

vendor/github.com/LuaJIT/LuaJIT/src/lj_emit_arm.h,1060
static uint8_t emit_invai[emit_invai8,186
static uint32_t emit_isk12(28,773
static void emit_dnm(47,1520
static void emit_dm(52,1653
static void emit_dn(57,1764
static void emit_nm(62,1875
static void emit_d(67,1986
static void emit_n(72,2075
static void emit_m(77,2164
static void emit_lsox(82,2253
static void emit_lso(90,2539
static void emit_vlso(107,3183
#define emit_canremat(118,3565
static int emit_kdelta1(121,3677
static int emit_kdelta2(145,4302
static void emit_loadi(174,5082
#define emit_loada(208,6301
static void emit_lsptr(213,6471
static void emit_loadk64(222,6716
#define emit_getgl(244,7339
#define emit_setgl(246,7434
#define emit_setvmstate(250,7592
typedef MCode *MCLabel;MCLabel255,7747
#define emit_label(258,7815
static void emit_branch(260,7852
#define emit_jmp(269,8092
static void emit_call(271,8156
static void emit_movrr(289,8813
static void emit_loadofs(313,9638
static void emit_storeofs(326,10017
static void emit_opk(339,10393
static void emit_addptr(350,10666
#define emit_spsub(356,10806

vendor/github.com/LuaJIT/LuaJIT/src/lj_emit_arm64.h,1370
static uint64_t get_k64val(11,296
static uint32_t emit_isk12(26,731
#define emit_clz64(38,1003
#define emit_ctz64(39,1044
static uint32_t emit_isk13(42,1164
static uint32_t emit_isfpk64(66,2106
static void emit_dnma(77,2416
static void emit_dnm(82,2571
static void emit_dm(87,2704
static void emit_dn(92,2815
static void emit_nm(97,2926
static void emit_d(102,3037
static void emit_n(107,3126
static int emit_checkofs(112,3215
static void emit_lso(122,3448
#define emit_canremat(159,4829
static int emit_kdelta(162,4950
static void emit_loadk(193,5804
#define emit_loadi(232,7217
#define emit_loadu64(235,7314
#define emit_loada(237,7377
#define glofs(239,7451
#define mcpofs(241,7534
#define checkmcpofs(243,7616
static void emit_lsptr(249,7797
static void emit_loadk64(267,8426
#define emit_getgl(295,9146
#define emit_setgl(297,9242
#define emit_setvmstate(301,9401
typedef MCode *MCLabel;MCLabel306,9555
#define emit_label(309,9623
static void emit_cond_branch(311,9660
static void emit_branch(319,9879
static void emit_tnb(327,10098
static void emit_cnb(336,10402
#define emit_jmp(344,10610
static void emit_call(346,10674
static void emit_movrr(362,11233
static void emit_loadofs(382,11933
static void emit_storeofs(391,12273
static void emit_opk(400,12604
static void emit_addptr(411,12873
#define emit_spsub(418,13056

vendor/github.com/LuaJIT/LuaJIT/src/lj_emit_mips.h,1168
static intptr_t get_k64val(7,117
#define get_kval(25,594
#define get_kval(27,637
static void emit_dst(32,757
static void emit_dta(37,894
#define emit_ds(42,1034
#define emit_tg(43,1101
static void emit_tsi(45,1172
#define emit_ti(50,1313
#define emit_hsi(51,1378
static void emit_fgh(53,1456
#define emit_fg(58,1602
static void emit_rotr(60,1670
static void emit_tsml(72,2019
#define emit_canremat(82,2360
static int emit_kdelta1(85,2473
static void emit_loadi(106,3030
static void emit_loadu64(130,3621
#define emit_loada(157,4430
#define emit_loada(159,4507
static void emit_lsptr(166,4743
static void emit_loadk64(181,5090
#define emit_loadk64(195,5452
static void emit_lsglptr(200,5609
#define emit_getgl(205,5728
#define emit_setgl(207,5837
#define emit_setvmstate(211,6007
typedef MCode *MCLabel;MCLabel216,6162
#define emit_label(219,6230
static void emit_branch(221,6267
static void emit_jmp(230,6538
static void emit_call(236,6677
#define emit_move(253,7242
static void emit_movrr(257,7354
static void emit_loadofs(266,7628
static void emit_storeofs(276,7973
static void emit_addptr(286,8276
#define emit_spsub(294,8430

vendor/github.com/LuaJIT/LuaJIT/src/lj_emit_ppc.h,1140
static void emit_tab(8,186
#define emit_asb(13,319
#define emit_as(14,393
#define emit_ab(15,460
static void emit_tai(17,528
#define emit_ti(22,666
#define emit_ai(23,731
#define emit_asi(24,796
#define emit_fab(26,869
#define emit_fb(28,956
#define emit_fac(29,1029
#define emit_facb(31,1130
#define emit_fai(33,1242
static void emit_rot(35,1318
static void emit_slwi(42,1516
static void emit_rotlwi(48,1665
#define emit_canremat(57,1966
static int emit_kdelta1(60,2079
static void emit_loadi(80,2589
#define emit_loada(99,3026
static void emit_lsptr(104,3196
#define emit_loadk64(118,3522
static void emit_lsglptr(122,3670
#define emit_getgl(127,3788
#define emit_setgl(129,3897
#define emit_setvmstate(133,4067
typedef MCode *MCLabel;MCLabel138,4222
#define emit_label(141,4290
static void emit_condbranch(143,4327
static void emit_jmp(152,4626
static void emit_call(159,4792
#define emit_mr(176,5366
static void emit_movrr(180,5481
static void emit_loadofs(190,5731
static void emit_storeofs(199,6030
static void emit_cmpi(208,6323
static void emit_addptr(221,6641
static void emit_spsub(230,6844

vendor/github.com/LuaJIT/LuaJIT/src/lj_emit_x86.h,1934
#define MODRM(8,190
#define REXRB(11,270
#define FORCE_REX	14,394
#define REX_64	15,419
#define VEX_64	16,457
#define REXRB(18,489
#define FORCE_REX	19,524
#define REX_64	20,545
#define VEX_64	21,564
#define REX_GC64	24,602
#define REX_GC64	26,633
#define emit_i8(29,661
#define emit_i32(30,711
#define emit_u32(31,782
#define emit_x87op(33,855
static LJ_AINLINE MCode *emit_op(emit_op37,954
#define emit_opm(74,1941
#define emit_opmx(79,2106
static void emit_rr(85,2304
static int32_t ptr2addr(93,2547
#define ptr2addr(99,2668
static void emit_rmro(103,2733
static void emit_rmrxo(140,3554
static void emit_gri(159,3978
static void emit_gmroi(175,4320
#define emit_shifti(189,4596
static void emit_mrm(193,4713
static void emit_gmrmi(239,5815
static void emit_movmroi(255,6195
#define emit_movtomro(262,6357
#define emit_opgl(266,6481
#define emit_getgl(268,6573
#define emit_setgl(269,6649
#define emit_setvmstate(271,6728
static void emit_loadi(275,6845
#define dispofs(293,7328
#define mcpofs(295,7419
#define mctopofs(297,7495
#define emit_loada(300,7593
#define emit_loada(304,7694
static void emit_loadu64(310,7838
static void emit_rma(339,8860
static void emit_loadk64(382,10213
typedef MCode *MCLabel;MCLabel426,11520
static void emit_sjmp(430,11591
static void emit_sjcc(442,11840
static MCLabel emit_sjcc_label(453,12117
static void emit_sfixup(463,12307
#define emit_label(469,12449
static LJ_AINLINE int32_t jmprel(472,12555
static void emit_jcc(480,12731
static void emit_jmp(490,12945
static void emit_call_(499,13118
#define emit_call(515,13524
#define REX_64IR(521,13732
#define VEX_64IR(522,13798
#define REX_64IR(524,13870
#define VEX_64IR(525,13899
static void emit_movrr(529,13973
static void emit_loadofs(539,14246
static void emit_storeofs(548,14559
static void emit_addptr(557,14838
#define emit_spsub(567,15070
#define emit_canremat(570,15211

vendor/github.com/LuaJIT/LuaJIT/src/lj_err.c,3774
#define lj_err_c6,97
#define LUA_CORE7,114
#define LJ_UNWIND_EXT	65,2474
#define LJ_UNWIND_EXT	67,2522
LJ_DATADEF const char *lj_err_allmsg lj_err_allmsg73,2663
#define ERRDEF(74,2702
LJ_NOINLINE static void unwindstack(81,2901
static void *err_unwind(err_unwind92,3160
typedef struct _Unwind_Context _Unwind_Context;193,5797
#define _URC_OK	195,5846
#define _URC_FATAL_PHASE1_ERROR	196,5866
#define _URC_HANDLER_FOUND	197,5900
#define _URC_INSTALL_CONTEXT	198,5929
#define _URC_CONTINUE_UNWIND	199,5960
#define _URC_FAILURE	200,5991
#define LJ_UEXCLASS	202,6016
#define LJ_UEXCLASS_MAKE(203,6075
#define LJ_UEXCLASS_CHECK(204,6133
#define LJ_UEXCLASS_ERRCODE(205,6194
typedef struct _Unwind_Exception209,6268
  uint64_t exclass;211,6303
  void (*excleanup)excleanup212,6323
  uintptr_t p1,213,6377
  uintptr_t p1, p2;213,6377
} __attribute__((__aligned__)) _Unwind_Exception;214,6397
#define _UA_SEARCH_PHASE	222,6734
#define _UA_CLEANUP_PHASE	223,6761
#define _UA_HANDLER_FRAME	224,6789
#define _UA_FORCE_UNWIND	225,6817
LJ_FUNCA int lj_err_unwind_dwarf(228,6917
static _Unwind_Exception static_uex;291,8912
static __thread _Unwind_Exception static_uex;293,8955
static void err_raise_ext(297,9039
#define _US_VIRTUAL_UNWIND_FRAME	307,9237
#define _US_UNWIND_FRAME_STARTING	308,9272
#define _US_ACTION_MASK	309,9308
#define _US_FORCE_UNWIND	310,9336
typedef struct _Unwind_Control_Block _Unwind_Control_Block;312,9365
struct _Unwind_Control_Block 314,9426
  uint64_t exclass;315,9457
  uint32_t misc[misc316,9477
static inline uint32_t _Unwind_GetGR(324,9788
static inline void _Unwind_SetGR(331,9922
LJ_FUNCA int lj_err_unwind_arm(339,10154
static __thread _Unwind_Control_Block static_uex;375,11288
static void err_raise_ext(377,11339
#define WIN32_LEAN_AND_MEAN402,12200
typedef struct UndocumentedDispatcherContext 407,12315
  ULONG64 ControlPc;408,12362
  ULONG64 ImageBase;409,12383
  PRUNTIME_FUNCTION FunctionEntry;410,12404
  ULONG64 EstablisherFrame;411,12439
  ULONG64 TargetIp;412,12467
  PCONTEXT ContextRecord;413,12487
  void (*LanguageHandler)LanguageHandler414,12513
  PVOID HandlerData;415,12546
  PUNWIND_HISTORY_TABLE HistoryTable;416,12567
  ULONG ScopeIndex;417,12605
  ULONG Fill0;418,12625
} UndocumentedDispatcherContext;419,12640
typedef void *UndocumentedDispatcherContext;UndocumentedDispatcherContext421,12679
VOID RtlUnwindEx_FIXED(429,12928
#define RtlUnwindEx 430,13008
#define LJ_MSVC_EXCODE	433,13054
#define LJ_GCC_EXCODE	434,13098
#define LJ_EXCODE	436,13142
#define LJ_EXCODE_MAKE(437,13181
#define LJ_EXCODE_CHECK(438,13232
#define LJ_EXCODE_ERRCODE(439,13289
static void err_raise_ext(497,15374
LJ_NOINLINE void LJ_FASTCALL lj_err_throw(507,15649
LJ_NOINLINE GCstr *lj_err_str(lj_err_str539,16578
LJ_NOINLINE void lj_err_mem(545,16703
static ptrdiff_t finderrfunc(554,17038
LJ_NOINLINE void lj_err_run(604,18405
LJ_NORET LJ_NOINLINE static void err_msgv(626,19030
LJ_NOINLINE void lj_err_msg(639,19392
LJ_NOINLINE void lj_err_lex(645,19488
LJ_NOINLINE void lj_err_optype(659,19936
LJ_NOINLINE void lj_err_comp(675,20466
LJ_NOINLINE void lj_err_optype_call(684,20792
LJ_NOINLINE void lj_err_callermsg(703,21418
LJ_NOINLINE void lj_err_callerv(731,22171
LJ_NOINLINE void lj_err_caller(742,22421
LJ_NORET LJ_NOINLINE static void err_argmsg(748,22548
LJ_NOINLINE void lj_err_argv(763,23110
LJ_NOINLINE void lj_err_arg(774,23355
LJ_NOINLINE void lj_err_argtype(780,23496
LJ_NOINLINE void lj_err_argt(803,24198
LUA_API lua_CFunction lua_atpanic(810,24394
LUA_API int lua_error(818,24618
LUALIB_API int luaL_argerror(824,24707
LUALIB_API int luaL_typerror(830,24841
LUALIB_API void luaL_where(836,24983
LUALIB_API int luaL_error(843,25163

vendor/github.com/LuaJIT/LuaJIT/src/lj_err.h,165
#define _LJ_ERR_H7,115
#define ERRDEF(14,191
  LJ_ERR__MAX17,309
} ErrMsg;18,323
LJ_DATA const char *lj_err_allmsg;lj_err_allmsg20,334
#define err2msg(21,369

vendor/github.com/LuaJIT/LuaJIT/src/lj_errmsg.h,37
ERRDEF(9,206
#undef ERRDEF186,7614

vendor/github.com/LuaJIT/LuaJIT/src/lj_ff.h,165
#define _LJ_FF_H7,117
  FF_LUA_ 11,174
  FF_LUA_ = FF_LUA,11,174
  FF_C_ 12,226
  FF_C_ = FF_C,12,226
#define FFDEF(13,281
  FF__MAX15,334
} FastFunc;16,344

vendor/github.com/LuaJIT/LuaJIT/src/lj_ffdef.h,67
FFDEF(3,46
#undef FFDEF209,4010
#define FF_NUM_ASMFUNC 212,4047

vendor/github.com/LuaJIT/LuaJIT/src/lj_ffrecord.c,3183
#define lj_ffrecord_c6,110
#define LUA_CORE7,132
#define IR(33,636
#define emitir(36,730
typedef void (LJ_FASTCALL *RecordFunc)RecordFunc64,1967
static int32_t argv2int(67,2081
static GCstr *argv2str(argv2str75,2303
static ptrdiff_t results_wanted(90,2624
static void recff_stitch(100,2882
static void LJ_FASTCALL recff_nyi(143,4304
#define recff_nyiu	173,5243
#define recff_c	176,5352
static TRef recff_bufhdr(179,5431
static void LJ_FASTCALL recff_assert(187,5647
static void LJ_FASTCALL recff_type(193,5858
static void LJ_FASTCALL recff_getmetatable(207,6264
static void LJ_FASTCALL recff_setmetatable(221,6614
static void LJ_FASTCALL recff_rawget(241,7314
static void LJ_FASTCALL recff_rawset(253,7693
static void LJ_FASTCALL recff_rawequal(267,8174
static void LJ_FASTCALL recff_rawlen(278,8493
int32_t lj_ffrecord_select_mode(291,8852
static void LJ_FASTCALL recff_select(309,9510
static void LJ_FASTCALL recff_tonumber(333,10227
static TValue *recff_metacall_cp(recff_metacall_cp365,10974
static int recff_metacall(373,11165
static void LJ_FASTCALL recff_tostring(399,12093
static void LJ_FASTCALL recff_ipairs_aux(418,12670
static void LJ_FASTCALL recff_xpairs(435,13316
static void LJ_FASTCALL recff_pcall(449,13755
static TValue *recff_xpcall_cp(recff_xpcall_cp461,14095
static void LJ_FASTCALL recff_xpcall(469,14293
static void LJ_FASTCALL recff_getfenv(496,15273
static void LJ_FASTCALL recff_math_abs(510,15724
static void LJ_FASTCALL recff_math_round(518,15983
static void LJ_FASTCALL recff_math_unary(534,16641
static void LJ_FASTCALL recff_math_log(540,16820
static void LJ_FASTCALL recff_math_atan2(562,17401
static void LJ_FASTCALL recff_math_ldexp(571,17647
static void LJ_FASTCALL recff_math_atrig(584,17999
static void LJ_FASTCALL recff_math_htrig(598,18456
static void LJ_FASTCALL recff_math_modf(604,18627
static void LJ_FASTCALL recff_math_pow(620,19008
static void LJ_FASTCALL recff_math_minmax(627,19192
static void LJ_FASTCALL recff_math_random(645,19760
static void LJ_FASTCALL recff_bit_tobit(675,20828
static void LJ_FASTCALL recff_bit_unary(686,21109
static void LJ_FASTCALL recff_bit_nary(696,21377
static void LJ_FASTCALL recff_bit_shift(713,21769
static void LJ_FASTCALL recff_bit_tohex(736,22441
static TRef recff_string_start(750,22880
static void LJ_FASTCALL recff_string_range(776,23564
static void LJ_FASTCALL recff_string_char(855,26352
static void LJ_FASTCALL recff_string_rep(873,27001
static void LJ_FASTCALL recff_string_op(899,27913
static void LJ_FASTCALL recff_string_find(907,28165
static void LJ_FASTCALL recff_string_format(966,30239
static void LJ_FASTCALL recff_table_insert(1049,32873
static void LJ_FASTCALL recff_table_concat(1071,33580
static void LJ_FASTCALL recff_table_new(1090,34377
static void LJ_FASTCALL recff_table_clear(1098,34628
static TRef recff_io_fp(1113,35100
static void LJ_FASTCALL recff_io_write(1137,35861
static void LJ_FASTCALL recff_io_flush(1164,36905
static void LJ_FASTCALL recff_debug_getmetatable(1175,37299
static uint32_t recdef_lookup(1199,38068
void lj_ffrecord_func(1208,38288
#undef IR1223,38722
#undef emitir1224,38732

vendor/github.com/LuaJIT/LuaJIT/src/lj_ffrecord.h,165
#define _LJ_FFRECORD_H7,133
typedef struct RecordFFData 14,267
  TValue *argv;argv15,297
  ptrdiff_t nres;16,345
  uint32_t data;17,413
} RecordFFData;18,484

vendor/github.com/LuaJIT/LuaJIT/src/lj_folddef.h,133
static const FoldFunc fold_func[fold_func3,46
static const uint32_t fold_hash[fold_hash159,3934
#define fold_hashkey(1112,15378

vendor/github.com/LuaJIT/LuaJIT/src/lj_frame.h,5823
#define _LJ_FRAME_H7,115
  FRAME_LUA,25,565
  FRAME_LUA, FRAME_C,25,565
  FRAME_LUA, FRAME_C, FRAME_CONT,25,565
  FRAME_LUA, FRAME_C, FRAME_CONT, FRAME_VARG,25,565
  FRAME_LUAP,26,611
  FRAME_LUAP, FRAME_CP,26,611
  FRAME_LUAP, FRAME_CP, FRAME_PCALL,26,611
  FRAME_LUAP, FRAME_CP, FRAME_PCALL, FRAME_PCALLH26,611
#define FRAME_TYPE	28,664
#define FRAME_P	29,686
#define FRAME_TYPEP	30,706
#define frame_gc(46,1252
#define frame_ftsz(47,1288
#define frame_pc(48,1334
#define setframe_gc(49,1386
#define setframe_ftsz(50,1446
#define setframe_pc(51,1494
#define frame_gc(67,2059
#define frame_ftsz(68,2102
#define frame_pc(69,2154
#define setframe_gc(70,2211
#define setframe_ftsz(71,2283
#define setframe_pc(72,2346
#define frame_type(75,2413
#define frame_typep(76,2465
#define frame_islua(77,2519
#define frame_isc(78,2572
#define frame_iscont(79,2621
#define frame_isvarg(80,2677
#define frame_ispcall(81,2733
#define frame_func(83,2796
#define frame_delta(84,2838
#define frame_sized(85,2883
enum { LJ_CONT_TAILCALL,87,2939
enum { LJ_CONT_TAILCALL, LJ_CONT_FFI_CALLBACK 87,2939
#define frame_contpc(90,3030
#define frame_contv(91,3073
#define frame_contpc(93,3118
#define frame_contv(94,3161
#define frame_contf(97,3221
#define frame_contf(99,3296
#define frame_contf(103,3423
#define frame_iscont_fficb(105,3496
#define frame_prevl(108,3585
#define frame_prevd(109,3650
#define frame_prev(110,3717
#define CFRAME_OFS_ERRF	120,4087
#define CFRAME_OFS_NRES	121,4119
#define CFRAME_OFS_PREV	122,4151
#define CFRAME_OFS_L	123,4183
#define CFRAME_OFS_SEH	124,4212
#define CFRAME_OFS_PC	125,4242
#define CFRAME_OFS_MULTRES	126,4271
#define CFRAME_SIZE	127,4304
#define CFRAME_SHIFT_MULTRES	128,4332
#define CFRAME_OFS_ERRF	130,4369
#define CFRAME_OFS_NRES	131,4401
#define CFRAME_OFS_PREV	132,4433
#define CFRAME_OFS_L	133,4465
#define CFRAME_OFS_PC	134,4494
#define CFRAME_OFS_MULTRES	135,4523
#define CFRAME_SIZE	136,4556
#define CFRAME_SHIFT_MULTRES	137,4584
#define CFRAME_OFS_PREV	141,4657
#define CFRAME_OFS_PC	143,4701
#define CFRAME_OFS_L	144,4731
#define CFRAME_OFS_ERRF	145,4760
#define CFRAME_OFS_NRES	146,4792
#define CFRAME_OFS_MULTRES	147,4824
#define CFRAME_OFS_PC	149,4863
#define CFRAME_OFS_L	150,4893
#define CFRAME_OFS_ERRF	151,4922
#define CFRAME_OFS_NRES	152,4954
#define CFRAME_OFS_MULTRES	153,4986
#define CFRAME_SIZE	155,5027
#define CFRAME_SIZE_JIT	156,5055
#define CFRAME_SHIFT_MULTRES	157,5107
#define CFRAME_OFS_PREV	159,5144
#define CFRAME_OFS_PC	161,5187
#define CFRAME_OFS_L	162,5216
#define CFRAME_OFS_ERRF	163,5244
#define CFRAME_OFS_NRES	164,5275
#define CFRAME_OFS_MULTRES	165,5306
#define CFRAME_OFS_PC	167,5345
#define CFRAME_OFS_L	168,5374
#define CFRAME_OFS_ERRF	169,5402
#define CFRAME_OFS_NRES	170,5433
#define CFRAME_OFS_MULTRES	171,5464
#define CFRAME_SIZE	174,5521
#define CFRAME_SIZE	176,5555
#define CFRAME_SIZE_JIT	178,5590
#define CFRAME_SHIFT_MULTRES	179,5634
#define CFRAME_OFS_ERRF	182,5692
#define CFRAME_OFS_NRES	183,5720
#define CFRAME_OFS_PREV	184,5748
#define CFRAME_OFS_L	185,5776
#define CFRAME_OFS_PC	186,5801
#define CFRAME_OFS_MULTRES	187,5826
#define CFRAME_SIZE	189,5874
#define CFRAME_SIZE	191,5905
#define CFRAME_SHIFT_MULTRES	193,5936
#define CFRAME_OFS_ERRF	195,5989
#define CFRAME_OFS_NRES	196,6018
#define CFRAME_OFS_PREV	197,6047
#define CFRAME_OFS_L	198,6076
#define CFRAME_OFS_PC	199,6102
#define CFRAME_OFS_MULTRES	200,6129
#define CFRAME_SIZE	201,6160
#define CFRAME_SHIFT_MULTRES	202,6185
#define CFRAME_OFS_ERRF	205,6258
#define CFRAME_OFS_NRES	206,6287
#define CFRAME_OFS_PREV	207,6316
#define CFRAME_OFS_L	208,6345
#define CFRAME_OFS_PC	209,6371
#define CFRAME_OFS_MULTRES	210,6398
#define CFRAME_SIZE	211,6429
#define CFRAME_SHIFT_MULTRES	212,6454
#define CFRAME_OFS_ERRF	214,6509
#define CFRAME_OFS_NRES	215,6538
#define CFRAME_OFS_PREV	216,6567
#define CFRAME_OFS_L	217,6596
#define CFRAME_OFS_PC	218,6622
#define CFRAME_OFS_MULTRES	219,6649
#define CFRAME_SIZE	220,6680
#define CFRAME_SHIFT_MULTRES	221,6705
#define CFRAME_OFS_ERRF	223,6742
#define CFRAME_OFS_NRES	224,6770
#define CFRAME_OFS_PREV	225,6798
#define CFRAME_OFS_L	226,6826
#define CFRAME_OFS_PC	227,6851
#define CFRAME_OFS_MULTRES	228,6877
#define CFRAME_SIZE	229,6907
#define CFRAME_SHIFT_MULTRES	230,6957
#define CFRAME_OFS_ERRF	234,7037
#define CFRAME_OFS_NRES	235,7066
#define CFRAME_OFS_PREV	236,7095
#define CFRAME_OFS_L	237,7124
#define CFRAME_SIZE	238,7150
#define CFRAME_OFS_ERRF	240,7181
#define CFRAME_OFS_NRES	241,7209
#define CFRAME_OFS_PREV	242,7237
#define CFRAME_OFS_L	243,7265
#define CFRAME_SIZE	244,7290
#define CFRAME_OFS_PC	246,7321
#define CFRAME_OFS_MULTRES	247,7347
#define CFRAME_SHIFT_MULTRES	248,7377
#define CFRAME_OFS_ERRF	251,7450
#define CFRAME_OFS_NRES	252,7479
#define CFRAME_OFS_PREV	253,7508
#define CFRAME_OFS_L	254,7537
#define CFRAME_OFS_PC	255,7563
#define CFRAME_SIZE	256,7590
#define CFRAME_OFS_ERRF	258,7621
#define CFRAME_OFS_NRES	259,7650
#define CFRAME_OFS_PREV	260,7679
#define CFRAME_OFS_L	261,7708
#define CFRAME_OFS_PC	262,7734
#define CFRAME_SIZE	263,7760
#define CFRAME_OFS_MULTRES	265,7792
#define CFRAME_SHIFT_MULTRES	266,7821
#define CFRAME_SIZE_JIT	272,7950
#define CFRAME_RESUME	275,7995
#define CFRAME_UNWIND_FF	276,8020
#define CFRAME_RAWMASK	277,8077
#define cframe_errfunc(279,8148
#define cframe_nres(280,8222
#define cframe_prev(281,8294
#define cframe_multres(282,8364
#define cframe_multres_n(283,8443
#define cframe_L(284,8519
#define cframe_pc(286,8598
#define setcframe_L(288,8685
#define setcframe_pc(290,8771
#define cframe_canyield(292,8861
#define cframe_unwind_ff(293,8922
#define cframe_raw(294,8987
#define cframe_Lpc(295,9055

vendor/github.com/LuaJIT/LuaJIT/src/lj_func.c,537
#define lj_func_c9,279
#define LUA_CORE10,297
void LJ_FASTCALL lj_func_freeproto(20,497
static void unlinkuv(27,681
static GCupval *func_finduv(func_finduv35,941
static GCupval *func_emptyuv(func_emptyuv69,2210
void LJ_FASTCALL lj_func_closeuv(80,2491
void LJ_FASTCALL lj_func_freeuv(98,2987
GCfunc *lj_func_newC(lj_func_newC107,3194
static GCfunc *func_newL(func_newL119,3550
GCfunc *lj_func_newL_empty(lj_func_newL_empty136,4233
GCfunc *lj_func_newL_gc(lj_func_newL_gc153,4796
void LJ_FASTCALL lj_func_free(181,5546

vendor/github.com/LuaJIT/LuaJIT/src/lj_func.h,25
#define _LJ_FUNC_H7,156

vendor/github.com/LuaJIT/LuaJIT/src/lj_gc.c,1959
#define lj_gc_c9,248
#define LUA_CORE10,264
#define GCSTEPSIZE	30,616
#define GCSWEEPMAX	31,641
#define GCSWEEPCOST	32,663
#define GCFINALIZECOST	33,686
#define white2gray(36,758
#define gray2black(37,825
#define isfinalized(38,881
#define gc_marktv(43,1051
#define gc_markobj(48,1227
#define gc_mark_str(52,1338
static void gc_mark(55,1429
static void gc_mark_gcroot(79,2235
static void gc_mark_start(88,2459
static void gc_mark_uv(101,2782
static void gc_mark_mmudata(112,3082
size_t lj_gc_separateudata(126,3402
static int gc_traverse_tab(158,4443
static void gc_traverse_func(210,5935
static void gc_marktrace(228,6470
static void gc_traverse_trace(240,6767
#define gc_traverse_curtrace(258,7325
#define gc_traverse_curtrace(260,7398
static void gc_traverse_proto(264,7476
static MSize gc_traverse_frames(276,7822
static void gc_traverse_thread(293,8557
static size_t propagatemark(308,9034
static size_t gc_propagate_gray(351,10446
typedef void (LJ_FASTCALL *GCFreeFunc)GCFreeFunc362,10704
static const GCFreeFunc gc_freefunc[gc_freefunc365,10833
#define gc_fullsweep(386,11258
static GCRef *gc_sweep(gc_sweep389,11351
static int gc_mayclear(413,12335
static void gc_clearweak(429,12908
static void gc_call_finalizer(459,13698
static void gc_finalize(483,14508
void lj_gc_finalize_udata(525,15878
void lj_gc_finalize_cdata(533,16054
void lj_gc_freeall(557,16690
static void atomic(571,17191
static size_t gc_onestep(607,18586
int LJ_FASTCALL lj_gc_step(677,20872
void LJ_FASTCALL lj_gc_step_fixtop(709,21743
int LJ_FASTCALL lj_gc_step_jit(717,21938
void lj_gc_fullgc(730,22307
void lj_gc_barrierf(756,23314
void LJ_FASTCALL lj_gc_barrieruv(769,23886
#define TV2MARKED(771,23950
#undef TV2MARKED777,24218
void lj_gc_closeuv(781,24287
void lj_gc_barriertrace(804,25102
void *lj_mem_realloc(lj_mem_realloc814,25418
void * LJ_FASTCALL lj_mem_newgco(828,25829
void *lj_mem_grow(lj_mem_grow843,26194

vendor/github.com/LuaJIT/LuaJIT/src/lj_gc.h,1646
#define _LJ_GC_H7,117
  GCSpause,13,210
  GCSpause, GCSpropagate,13,210
  GCSpause, GCSpropagate, GCSatomic,13,210
  GCSpause, GCSpropagate, GCSatomic, GCSsweepstring,13,210
  GCSpause, GCSpropagate, GCSatomic, GCSsweepstring, GCSsweep,13,210
  GCSpause, GCSpropagate, GCSatomic, GCSsweepstring, GCSsweep, GCSfinalize13,210
#define LJ_GC_WHITE0	17,331
#define LJ_GC_WHITE1	18,357
#define LJ_GC_BLACK	19,383
#define LJ_GC_FINALIZED	20,408
#define LJ_GC_WEAKKEY	21,437
#define LJ_GC_WEAKVAL	22,464
#define LJ_GC_CDATA_FIN	23,491
#define LJ_GC_FIXED	24,520
#define LJ_GC_SFIXED	25,545
#define LJ_GC_WHITES	27,572
#define LJ_GC_COLORS	28,623
#define LJ_GC_WEAK	29,673
#define iswhite(32,768
#define isblack(33,820
#define isgray(34,871
#define tviswhite(35,939
#define otherwhite(36,992
#define isdead(37,1050
#define curwhite(39,1121
#define newwhite(40,1179
#define makewhite(41,1250
#define flipwhite(43,1355
#define black2gray(44,1410
#define fixstring(45,1475
#define markfinalized(46,1525
#define lj_gc_finalize_cdata(54,1785
#define lj_gc_check(65,2201
#define lj_gc_check_fixtop(68,2310
static LJ_AINLINE void lj_gc_barrierback(81,2819
#define lj_gc_anybarriert(92,3188
#define lj_gc_barriert(94,3297
#define lj_gc_objbarriert(97,3418
#define lj_gc_barrier(102,3621
#define lj_gc_objbarrier(105,3754
#define lj_mem_new(115,4152
static LJ_AINLINE void lj_mem_free(117,4210
#define lj_mem_newvec(123,4359
#define lj_mem_reallocvec(124,4436
#define lj_mem_growvec(126,4557
#define lj_mem_freevec(128,4661
#define lj_mem_newobj(130,4732
#define lj_mem_newt(131,4795
#define lj_mem_freet(132,4850

vendor/github.com/LuaJIT/LuaJIT/src/lj_gdbjit.c,7560
#define lj_gdbjit_c6,109
#define LUA_CORE7,129
  GDBJIT_NOACTION 124,3683
  GDBJIT_REGISTER,125,3706
  GDBJIT_UNREGISTER126,3725
typedef struct GDBJITentry 130,3770
  struct GDBJITentry *next_entry;next_entry131,3799
  struct GDBJITentry *prev_entry;prev_entry132,3833
  const char *symfile_addr;symfile_addr133,3867
  uint64_t symfile_size;134,3895
} GDBJITentry;135,3920
typedef struct GDBJITdesc 138,3962
  uint32_t version;139,3990
  uint32_t action_flag;140,4010
  GDBJITentry *relevant_entry;relevant_entry141,4034
  GDBJITentry *first_entry;first_entry142,4065
} GDBJITdesc;143,4093
GDBJITdesc __jit_debug_descriptor 145,4108
void LJ_NOINLINE __jit_debug_register_code(150,4229
typedef struct ELFheader 158,4411
  uint8_t emagic[emagic159,4438
  uint8_t eclass;160,4459
  uint8_t eendian;161,4477
  uint8_t eversion;162,4496
  uint8_t eosabi;163,4516
  uint8_t eabiversion;164,4534
  uint8_t epad[epad165,4557
  uint16_t type;166,4576
  uint16_t machine;167,4593
  uint32_t version;168,4613
  uintptr_t entry;169,4633
  uintptr_t phofs;170,4652
  uintptr_t shofs;171,4671
  uint32_t flags;172,4690
  uint16_t ehsize;173,4708
  uint16_t phentsize;174,4727
  uint16_t phnum;175,4749
  uint16_t shentsize;176,4767
  uint16_t shnum;177,4789
  uint16_t shstridx;178,4807
} ELFheader;179,4828
typedef struct ELFsectheader 181,4842
  uint32_t name;182,4873
  uint32_t type;183,4890
  uintptr_t flags;184,4907
  uintptr_t addr;185,4926
  uintptr_t ofs;186,4944
  uintptr_t size;187,4961
  uint32_t link;188,4979
  uint32_t info;189,4996
  uintptr_t align;190,5013
  uintptr_t entsize;191,5032
} ELFsectheader;192,5053
#define ELFSECT_IDX_ABS	194,5071
  ELFSECT_TYPE_PROGBITS 197,5111
  ELFSECT_TYPE_SYMTAB 198,5140
  ELFSECT_TYPE_STRTAB 199,5167
  ELFSECT_TYPE_NOBITS 200,5194
#define ELFSECT_FLAGS_WRITE	203,5224
#define ELFSECT_FLAGS_ALLOC	204,5254
#define ELFSECT_FLAGS_EXEC	205,5284
typedef struct ELFsymbol 207,5314
  uint32_t name;209,5351
  uint8_t info;210,5368
  uint8_t other;211,5384
  uint16_t sectidx;212,5401
  uintptr_t value;213,5421
  uint64_t size;214,5440
  uint32_t name;216,5463
  uintptr_t value;217,5480
  uint32_t size;218,5499
  uint8_t info;219,5516
  uint8_t other;220,5532
  uint16_t sectidx;221,5549
} ELFsymbol;223,5576
  ELFSYM_TYPE_FUNC 226,5597
  ELFSYM_TYPE_FILE 227,5621
  ELFSYM_BIND_LOCAL 228,5645
  ELFSYM_BIND_GLOBAL 229,5675
#define DW_CIE_VERSION	233,5735
  DW_CFA_nop 236,5768
  DW_CFA_nop = 0x0,x0236,5768
  DW_CFA_offset_extended 237,5788
  DW_CFA_offset_extended = 0x5,x5237,5788
  DW_CFA_def_cfa 238,5820
  DW_CFA_def_cfa = 0xc,xc238,5820
  DW_CFA_def_cfa_offset 239,5844
  DW_CFA_def_cfa_offset = 0xe,xe239,5844
  DW_CFA_offset_extended_sf 240,5875
  DW_CFA_offset_extended_sf = 0x11,x11240,5875
  DW_CFA_advance_loc 241,5911
  DW_CFA_advance_loc = 0x40,x40241,5911
  DW_CFA_offset 242,5940
  DW_CFA_offset = 0x80x80242,5940
  DW_EH_PE_udata4 246,5974
  DW_EH_PE_textrel 247,5997
  DW_EH_PE_textrel = 0x20x20247,5997
  DW_TAG_compile_unit 251,6034
  DW_TAG_compile_unit = 0x11x11251,6034
  DW_children_no 255,6074
  DW_children_yes 256,6096
  DW_AT_name 260,6129
  DW_AT_name = 0x03,x03260,6129
  DW_AT_stmt_list 261,6150
  DW_AT_stmt_list = 0x10,x10261,6150
  DW_AT_low_pc 262,6176
  DW_AT_low_pc = 0x11,x11262,6176
  DW_AT_high_pc 263,6199
  DW_AT_high_pc = 0x12x12263,6199
  DW_FORM_addr 267,6233
  DW_FORM_addr = 0x01,x01267,6233
  DW_FORM_data4 268,6256
  DW_FORM_data4 = 0x06,x06268,6256
  DW_FORM_string 269,6280
  DW_FORM_string = 0x08x08269,6280
  DW_LNS_extended_op 273,6315
  DW_LNS_copy 274,6341
  DW_LNS_advance_pc 275,6360
  DW_LNS_advance_line 276,6385
  DW_LNE_end_sequence 280,6422
  DW_LNE_set_address 281,6449
  DW_REG_AX,286,6503
  DW_REG_AX, DW_REG_CX,286,6503
  DW_REG_AX, DW_REG_CX, DW_REG_DX,286,6503
  DW_REG_AX, DW_REG_CX, DW_REG_DX, DW_REG_BX,286,6503
  DW_REG_SP,287,6549
  DW_REG_SP, DW_REG_BP,287,6549
  DW_REG_SP, DW_REG_BP, DW_REG_SI,287,6549
  DW_REG_SP, DW_REG_BP, DW_REG_SI, DW_REG_DI,287,6549
  DW_REG_RA,288,6595
  DW_REG_AX,291,6676
  DW_REG_AX, DW_REG_DX,291,6676
  DW_REG_AX, DW_REG_DX, DW_REG_CX,291,6676
  DW_REG_AX, DW_REG_DX, DW_REG_CX, DW_REG_BX,291,6676
  DW_REG_SI,292,6722
  DW_REG_SI, DW_REG_DI,292,6722
  DW_REG_SI, DW_REG_DI, DW_REG_BP,292,6722
  DW_REG_SI, DW_REG_DI, DW_REG_BP, DW_REG_SP,292,6722
  DW_REG_8,293,6768
  DW_REG_8, DW_REG_9,293,6768
  DW_REG_8, DW_REG_9, DW_REG_10,293,6768
  DW_REG_8, DW_REG_9, DW_REG_10, DW_REG_11,293,6768
  DW_REG_12,294,6812
  DW_REG_12, DW_REG_13,294,6812
  DW_REG_12, DW_REG_13, DW_REG_14,294,6812
  DW_REG_12, DW_REG_13, DW_REG_14, DW_REG_15,294,6812
  DW_REG_RA,295,6858
  DW_REG_SP 297,6891
  DW_REG_RA 298,6909
  DW_REG_SP 300,6949
  DW_REG_RA 301,6967
  DW_REG_SP 303,7005
  DW_REG_RA 304,7022
  DW_REG_CR 305,7040
  DW_REG_SP 307,7079
  DW_REG_RA 308,7097
  GDBJIT_SECT_NULL,316,7241
  GDBJIT_SECT_text,317,7261
  GDBJIT_SECT_eh_frame,318,7281
  GDBJIT_SECT_shstrtab,319,7305
  GDBJIT_SECT_strtab,320,7329
  GDBJIT_SECT_symtab,321,7351
  GDBJIT_SECT_debug_info,322,7373
  GDBJIT_SECT_debug_abbrev,323,7399
  GDBJIT_SECT_debug_line,324,7427
  GDBJIT_SECT__MAX325,7453
  GDBJIT_SYM_UNDEF,329,7483
  GDBJIT_SYM_FILE,330,7503
  GDBJIT_SYM_FUNC,331,7522
  GDBJIT_SYM__MAX332,7541
typedef struct GDBJITobj 336,7591
  ELFheader hdr;337,7618
  ELFsectheader sect[sect338,7655
  ELFsymbol sym[sym339,7715
  uint8_t space[space340,7773
} GDBJITobj;341,7836
typedef struct GDBJITentryobj 344,7909
  GDBJITentry entry;345,7941
  size_t sz;346,7962
  GDBJITobj obj;347,7975
} GDBJITentryobj;348,7992
static const ELFheader elfhdr_template 351,8052
typedef struct GDBJITctx 405,9286
  uint8_t *p;p406,9313
  uint8_t *startp;startp407,9372
  GCtrace *T;T408,9436
  uintptr_t mcaddr;409,9490
  MSize szmcode;410,9538
  MSize spadjp;411,9583
  MSize spadj;412,9656
  BCLine lineno;413,9713
  const char *filename;filename414,9758
  size_t objsize;415,9808
  GDBJITobj obj;416,9858
} GDBJITctx;417,9903
static uint32_t gdbjit_strz(420,9953
static void gdbjit_catnum(432,10200
static void gdbjit_sleb128(439,10384
#define DB(449,10643
#define DI8(450,10671
#define DU16(451,10713
#define DU32(452,10761
#define DADDR(453,10809
#define DUV(454,10874
#define DSV(455,10942
#define DSTR(456,11009
#define DALIGNNOP(457,11077
#define DSECT(458,11147
static void LJ_FASTCALL gdbjit_secthdr(463,11334
#define SECTDEF(469,11482
#undef SECTDEF498,12309
static void LJ_FASTCALL gdbjit_symtab(502,12358
static void LJ_FASTCALL gdbjit_ehframe(523,12990
static void LJ_FASTCALL gdbjit_debuginfo(609,15747
static void LJ_FASTCALL gdbjit_debugabbrev(629,16265
#define DLNE(645,16647
static void LJ_FASTCALL gdbjit_debugline(648,16753
#undef DLNE680,17622
#undef DB683,17658
#undef DI8684,17668
#undef DU16685,17679
#undef DU32686,17691
#undef DADDR687,17703
#undef DUV688,17716
#undef DSV689,17727
#undef DSTR690,17738
#undef DALIGNNOP691,17750
#undef DSECT692,17767
typedef void (LJ_FASTCALL *GDBJITinitf)GDBJITinitf695,17827
static void gdbjit_initsect(698,17953
#define SECTALIGN(706,18210
static void gdbjit_buildobj(710,18343
#undef SECTALIGN730,19235
static int gdbjit_lock;734,19333
static void gdbjit_lock_acquire(736,19358
static void gdbjit_lock_release(743,19531
static void gdbjit_newentry(749,19652
void lj_gdbjit_addtrace(773,20650
void lj_gdbjit_deltrace(797,21469

vendor/github.com/LuaJIT/LuaJIT/src/lj_gdbjit.h,97
#define _LJ_GDBJIT_H7,130
#define lj_gdbjit_addtrace(18,363
#define lj_gdbjit_deltrace(19,406

vendor/github.com/LuaJIT/LuaJIT/src/lj_ir.c,1339
#define lj_ir_c6,127
#define LUA_CORE7,143
#define IR(37,698
#define fins	38,736
#define emitir(41,822
LJ_DATADEF const uint8_t lj_ir_mode[lj_ir_mode46,1010
LJ_DATADEF const uint8_t lj_ir_type_size[lj_ir_type_size52,1104
#define IRTSIZE(53,1161
#undef IRTSIZE55,1211
LJ_DATADEF const CCallInfo lj_ir_callinfo[lj_ir_callinfo60,1276
#define IRCALLCI(61,1324
#undef IRCALLCI65,1512
void LJ_FASTCALL lj_ir_growtop(72,1659
static void lj_ir_growbot(89,2237
TRef LJ_FASTCALL lj_ir_emit(115,3322
TRef lj_ir_call(130,3676
LJ_FUNC TRef lj_ir_ggfload(149,4255
static LJ_AINLINE IRRef ir_nextk(170,4987
static LJ_AINLINE IRRef ir_nextk64(181,5263
#define ir_nextkgc 191,5487
#define ir_nextkgc 193,5523
TRef LJ_FASTCALL lj_ir_kint(197,5590
TRef lj_ir_k64(216,6047
TRef lj_ir_knum_u64(237,6556
TRef lj_ir_kint64(243,6684
static int numistrueint(249,6854
TRef lj_ir_knumint(266,7227
TRef lj_ir_kgc(276,7419
TRef lj_ir_ktrace(298,7991
TRef lj_ir_kptr_(311,8323
TRef lj_ir_knull(338,8909
TRef lj_ir_kslot(357,9326
void lj_ir_kvalue(381,10044
TRef LJ_FASTCALL lj_ir_tonumber(407,10874
TRef LJ_FASTCALL lj_ir_tonum(419,11152
TRef LJ_FASTCALL lj_ir_tostr(433,11511
int lj_ir_numcmp(447,11885
int lj_ir_strcmp(465,12348
void lj_ir_rollback(478,12652
#undef IR490,12857
#undef fins491,12867
#undef emitir492,12879

vendor/github.com/LuaJIT/LuaJIT/src/lj_ir.h,7029
#define _LJ_IR_H7,143
#define IRDEF(14,330
#define IRENUM(153,3739
IRDEF(154,3782
IRDEF(IRENUM)154,3782
#undef IRENUM155,3796
  IR__MAX156,3810
} IROp;157,3820
typedef uint8_t IROp1;160,3850
#define IRDELTA_L2S	169,4154
#define IRFPMDEF(179,4589
#define FPMENUM(186,4784
IRFPMDEF(187,4821
IRFPMDEF(FPMENUM)187,4821
#undef FPMENUM188,4839
  IRFPM__MAX189,4854
} IRFPMathOp;190,4867
#define IRFLDEF(193,4902
#define FLENUM(215,5711
IRFLDEF(216,5750
IRFLDEF(FLENUM)216,5750
#undef FLENUM217,5766
  IRFL__MAX218,5780
} IRFieldID;219,5792
#define IRSLOAD_PARENT	222,5844
#define IRSLOAD_FRAME	223,5907
#define IRSLOAD_TYPECHECK	224,5963
#define IRSLOAD_CONVERT	225,6018
#define IRSLOAD_READONLY	226,6084
#define IRSLOAD_INHERIT	227,6148
#define IRXLOAD_READONLY	230,6250
#define IRXLOAD_VOLATILE	231,6309
#define IRXLOAD_UNALIGNED	232,6367
#define IRBUFHDR_RESET	235,6452
#define IRBUFHDR_APPEND	236,6498
#define IRCONV_SRCMASK	239,6582
#define IRCONV_DSTMASK	240,6634
#define IRCONV_DSH	241,6701
#define IRCONV_NUM_INT	242,6723
#define IRCONV_INT_NUM	243,6779
#define IRCONV_SEXT	244,6835
#define IRCONV_MODEMASK	245,6901
#define IRCONV_CONVMASK	246,6933
#define IRCONV_CSH	247,6965
#define IRCONV_TOBIT 249,7064
#define IRCONV_ANY 250,7138
#define IRCONV_INDEX 251,7203
#define IRCONV_CHECK 252,7279
#define IRTOSTR_INT	255,7389
#define IRTOSTR_NUM	256,7445
#define IRTOSTR_CHAR	257,7500
  IRMref,263,7687
  IRMlit,264,7718
  IRMcst,265,7760
  IRMnone	266,7810
} IRMode;267,7843
#define IRM___	268,7853
#define IRM_C	271,7958
#define IRM_N	273,7980
#define IRM_R	274,8001
#define IRM_A	275,8023
#define IRM_L	276,8044
#define IRM_S	277,8065
#define IRM_W	279,8087
#define IRM_NW	281,8109
#define IRM_CW	282,8140
#define IRM_AW	283,8171
#define IRM_LW	284,8202
#define irm_op1(286,8234
#define irm_op2(287,8272
#define irm_iscomm(288,8315
#define irm_kind(289,8352
#define IRMODE(291,8388
LJ_DATA const uint8_t lj_ir_mode[lj_ir_mode293,8467
#define IRTSIZE_PGC	297,8593
#define IRTDEF(306,9037
#define IRTENUM(317,9520
IRTDEF(318,9560
IRTDEF(IRTENUM)318,9560
#undef IRTENUM319,9576
  IRT__MAX,320,9591
  IRT_PTR 323,9668
  IRT_PTR = LJ_64 323,9668
  IRT_PTR = LJ_64 ? IRT_P64 323,9668
  IRT_PTR = LJ_64 ? IRT_P64 : IRT_P32,323,9668
  IRT_PGC 324,9707
  IRT_PGC = LJ_GC64 324,9707
  IRT_PGC = LJ_GC64 ? IRT_P64 324,9707
  IRT_PGC = LJ_GC64 ? IRT_P64 : IRT_P32,324,9707
  IRT_IGC 325,9748
  IRT_IGC = LJ_GC64 325,9748
  IRT_IGC = LJ_GC64 ? IRT_I64 325,9748
  IRT_IGC = LJ_GC64 ? IRT_I64 : IRT_INT,325,9748
  IRT_INTP 326,9789
  IRT_INTP = LJ_64 326,9789
  IRT_INTP = LJ_64 ? IRT_I64 326,9789
  IRT_INTP = LJ_64 ? IRT_I64 : IRT_INT,326,9789
  IRT_UINTP 327,9829
  IRT_UINTP = LJ_64 327,9829
  IRT_UINTP = LJ_64 ? IRT_U64 327,9829
  IRT_UINTP = LJ_64 ? IRT_U64 : IRT_U32,327,9829
  IRT_MARK 330,9897
  IRT_MARK = 0x20,x20330,9897
  IRT_ISPHI 331,9949
  IRT_ISPHI = 0x40,x40331,9949
  IRT_GUARD 332,10017
  IRT_GUARD = 0x80,x80332,10017
  IRT_TYPE 335,10083
  IRT_TYPE = 0x1f,x1f335,10083
  IRT_T 336,10102
  IRT_T = 0xffxff336,10102
} IRType;337,10117
#define irtype_ispri(339,10128
typedef struct IRType1 342,10206
typedef struct IRType1 { uint8_t irt;342,10206
typedef struct IRType1 { uint8_t irt; } IRType1;342,10206
#define IRT(344,10256
#define IRTI(345,10304
#define IRTN(346,10342
#define IRTG(347,10380
#define IRTGI(348,10426
#define irt_t(350,10475
#define irt_type(351,10511
#define irt_sametype(352,10563
#define irt_typerange(353,10634
#define irt_isnil(356,10756
#define irt_ispri(357,10803
#define irt_islightud(358,10861
#define irt_isstr(359,10915
#define irt_istab(360,10962
#define irt_iscdata(361,11009
#define irt_isfloat(362,11060
#define irt_isnum(363,11111
#define irt_isint(364,11158
#define irt_isi8(365,11205
#define irt_isu8(366,11250
#define irt_isi16(367,11295
#define irt_isu16(368,11342
#define irt_isu32(369,11389
#define irt_isi64(370,11436
#define irt_isu64(371,11483
#define irt_isfp(373,11531
#define irt_isinteger(374,11585
#define irt_isgcv(375,11648
#define irt_isaddr(376,11711
#define irt_isint64(377,11779
#define IRT_IS64 381,11930
#define IRT_IS64 387,12176
#define IRT_IS64 390,12279
#define irt_is64(394,12352
#define irt_is64orfp(395,12405
#define irt_size(397,12479
LJ_DATA const uint8_t lj_ir_type_size[lj_ir_type_size399,12531
static LJ_AINLINE IRType itype2irt(401,12573
static LJ_AINLINE uint32_t irt_toitype_(415,12833
#define irt_toitype(426,13068
#define irt_isguard(428,13121
#define irt_ismarked(429,13167
#define irt_setmark(430,13213
#define irt_clearmark(431,13259
#define irt_isphi(432,13307
#define irt_setphi(433,13351
#define irt_clearphi(434,13397
typedef uint16_t IROpT;437,13489
typedef uint16_t IRRef1;442,13615
typedef uint32_t IRRef2;443,13668
typedef uint32_t IRRef;444,13722
  REF_BIAS 448,13817
  REF_BIAS =	0x8000,x8000448,13817
  REF_TRUE 449,13838
  REF_TRUE =	REF_BIAS-REF_BIAS449,13838
  REF_FALSE 450,13863
  REF_FALSE =	REF_BIAS-REF_BIAS450,13863
  REF_NIL 451,13889
  REF_NIL =	REF_BIAS-REF_BIAS451,13889
  REF_BASE 452,13950
  REF_BASE =	REF_BIAS,452,13950
  REF_FIRST 453,14002
  REF_FIRST =	REF_BIAS+REF_BIAS453,14002
  REF_DROP 454,14028
  REF_DROP =	0xffffxffff454,14028
#define IRREF2(467,14512
#define irref_isk(469,14575
typedef uint32_t TRef;479,14841
#define TREF_REFMASK	481,14865
#define TREF_FRAME	482,14898
#define TREF_CONT	483,14929
#define TREF(485,14960
#define tref_ref(487,15011
#define tref_t(488,15048
#define tref_type(489,15089
#define tref_typerange(490,15146
#define tref_istype(493,15255
#define tref_isnil(494,15321
#define tref_isfalse(495,15374
#define tref_istrue(496,15430
#define tref_islightud(497,15485
#define tref_isstr(498,15545
#define tref_isfunc(499,15598
#define tref_iscdata(500,15653
#define tref_istab(501,15709
#define tref_isudata(502,15762
#define tref_isnum(503,15818
#define tref_isint(504,15871
#define tref_isbool(506,15925
#define tref_ispri(507,15994
#define tref_istruecond(508,16060
#define tref_isinteger(509,16132
#define tref_isnumber(510,16199
#define tref_isnumber_str(511,16266
#define tref_isgcv(512,16338
#define tref_isk(514,16406
#define tref_isk2(515,16456
#define TREF_PRI(517,16522
#define TREF_NIL	518,16568
#define TREF_FALSE	519,16606
#define TREF_TRUE	520,16648
typedef union IRIns 539,17285
    , IRRef1 op2;543,17376
    IROpT ot;545,17420
    IRRef1 prev;546,17480
    IRRef2 op12;549,17566
    , IROp1 o;552,17684
    , uint8_t s;556,17803
  int32_t i;559,17876
  GCRef gcr;560,17943
  MRef ptr;561,18010
  TValue tv;562,18078
} IRIns;563,18138
#define ir_kgc(565,18148
#define ir_kstr(566,18222
#define ir_ktab(567,18266
#define ir_kfunc(568,18310
#define ir_kcdata(569,18356
#define ir_knum(570,18401
#define ir_kint64(571,18464
#define ir_k64(572,18531
#define ir_kptr(578,18733
static LJ_AINLINE int ir_sideeff(583,18919

vendor/github.com/LuaJIT/LuaJIT/src/lj_ircall.h,3642
#define _LJ_IRCALL_H7,136
typedef struct CCallInfo 14,260
  ASMFunction func;15,287
  uint32_t flags;16,332
} CCallInfo;17,388
#define CCI_NARGS(19,402
#define CCI_NARGS_MAX	20,463
#define CCI_OTSHIFT	22,514
#define CCI_OPTYPE(23,538
#define CCI_OPSHIFT	24,611
#define CCI_OP(25,635
#define CCI_CALL_N	27,700
#define CCI_CALL_A	28,746
#define CCI_CALL_L	29,792
#define CCI_CALL_S	30,838
#define CCI_CALL_FN	31,884
#define CCI_CALL_FL	32,934
#define CCI_CALL_FS	33,984
#define CCI_L	36,1060
#define CCI_CASTU64	37,1105
#define CCI_NOFPRCLOBBER	38,1166
#define CCI_VARARG	39,1231
#define CCI_CC_MASK	41,1282
#define CCI_CC_SHIFT	42,1341
#define CCI_CC_CDECL	44,1381
#define CCI_CC_THISCALL	45,1450
#define CCI_CC_FASTCALL	46,1517
#define CCI_CC_STDCALL	47,1584
#define CCI_XARGS_SHIFT	50,1693
#define CCI_XARGS(51,1721
#define CCI_XA	52,1783
#define CCI_XNARGS(55,1865
#define CCI_XNARGS(57,1931
#define IRCALLCOND_ANY(61,2031
#define IRCALLCOND_FPMATH(64,2084
#define IRCALLCOND_FPMATH(66,2125
#define IRCALLCOND_SOFTFP(70,2179
#define IRCALLCOND_SOFTFP_FFI(72,2225
#define IRCALLCOND_SOFTFP_FFI(74,2266
#define IRCALLCOND_SOFTFP(77,2317
#define IRCALLCOND_SOFTFP_FFI(78,2352
#define IRCALLCOND_SOFTFP_MIPS(82,2430
#define IRCALLCOND_SOFTFP_MIPS(84,2472
#define IRCALLCOND_SOFTFP_MIPS64(88,2553
#define IRCALLCOND_SOFTFP_MIPS64(90,2597
#define LJ_NEED_FP64	93,2646
#define IRCALLCOND_FP64_FFI(96,2764
#define IRCALLCOND_FP64_FFI(98,2804
#define IRCALLCOND_FFI(102,2863
#define IRCALLCOND_FFI32(104,2902
#define IRCALLCOND_FFI32(106,2939
#define IRCALLCOND_FFI(109,2986
#define IRCALLCOND_FFI32(110,3018
#define XA_FP	114,3074
#define XA2_FP	115,3096
#define XA_FP	117,3134
#define XA2_FP	118,3151
#define XA_FP32	122,3193
#define XA2_FP32	123,3217
#define XA_FP32	125,3256
#define XA2_FP32	126,3275
#define XA_64	130,3312
#define XA2_64	131,3334
#define XA_64	133,3372
#define XA2_64	134,3389
#define IRCALLDEF(138,3466
#define IRCALLENUM(247,8518
IRCALLDEF(248,8590
IRCALLDEF(IRCALLENUM)248,8590
#undef IRCALLENUM249,8612
  IRCALL__MAX250,8630
} IRCallID;251,8644
LJ_DATA const CCallInfo lj_ir_callinfo[lj_ir_callinfo255,8715
#define softfp_add 260,8834
#define softfp_sub 261,8866
#define softfp_mul 262,8898
#define softfp_div 263,8930
#define softfp_cmp 264,8962
#define softfp_i2d 265,8997
#define softfp_d2i 266,9028
#define softfp_ui2d 267,9060
#define softfp_f2d 268,9093
#define softfp_d2ui 269,9124
#define softfp_d2f 270,9158
#define softfp_i2f 271,9189
#define softfp_ui2f 272,9220
#define softfp_f2i 273,9253
#define softfp_f2ui 274,9285
#define fp64_l2d 275,9319
#define fp64_ul2d 276,9348
#define fp64_l2f 277,9379
#define fp64_ul2f 278,9408
#define fp64_d2l 280,9457
#define fp64_d2ul 281,9484
#define fp64_f2l 282,9515
#define fp64_f2ul 283,9542
#define fp64_d2l 285,9579
#define fp64_d2ul 286,9609
#define fp64_f2l 287,9641
#define fp64_f2ul 288,9671
#define softfp_add 291,9748
#define softfp_sub 292,9776
#define softfp_mul 293,9804
#define softfp_div 294,9832
#define softfp_cmp 295,9860
#define softfp_i2d 296,9887
#define softfp_d2i 297,9918
#define softfp_ui2d 298,9947
#define softfp_f2d 299,9981
#define softfp_d2ui 300,10014
#define softfp_d2f 301,10047
#define softfp_i2f 302,10079
#define softfp_ui2f 303,10110
#define softfp_f2i 304,10144
#define softfp_f2ui 305,10173
#define fp64_l2d 334,11109
#define fp64_ul2d 335,11138
#define fp64_l2f 336,11170
#define fp64_ul2f 337,11199
#define fp64_d2l 338,11231
#define fp64_d2ul 339,11258
#define fp64_f2l 340,11289
#define fp64_f2ul 341,11316

vendor/github.com/LuaJIT/LuaJIT/src/lj_iropt.h,857
#define _LJ_IROPT_H7,149
static LJ_AINLINE void lj_ir_set_(20,434
#define lj_ir_set(25,585
static LJ_AINLINE IRRef lj_ir_nextins(31,779
#define lj_ir_kintp(54,1630
#define lj_ir_kintp(56,1693
static LJ_AINLINE TRef lj_ir_knum(59,1755
#define lj_ir_kstr(66,1883
#define lj_ir_ktab(67,1948
#define lj_ir_kfunc(68,2013
#define lj_ir_kptr(69,2082
#define lj_ir_kkptr(70,2140
#define lj_ir_knum_zero(73,2229
#define lj_ir_knum_one(74,2299
#define lj_ir_knum_tobit(75,2368
#define lj_ir_ksimd(78,2478
  NEXTFOLD,101,3391
  RETRYFOLD,102,3434
  KINTFOLD,103,3485
  FAILFOLD,104,3544
  DROPFOLD,105,3588
  MAX_FOLD106,3625
#define INTFOLD(109,3640
#define INT64FOLD(110,3699
#define CONDFOLD(111,3743
#define LEFTFOLD	112,3798
#define RIGHTFOLD	113,3833
#define CSEFOLD	114,3869
#define EMITFOLD	115,3902
#define lj_opt_split(156,5818

vendor/github.com/LuaJIT/LuaJIT/src/lj_jit.h,8356
#define _LJ_JIT_H7,140
#define JIT_F_ON	13,223
#define JIT_F_SSE2	17,313
#define JIT_F_SSE3	18,344
#define JIT_F_SSE4_1	19,375
#define JIT_F_PREFER_IMUL	20,408
#define JIT_F_LEA_AGU	21,445
#define JIT_F_BMI2	22,479
#define JIT_F_CPU_FIRST	25,579
#define JIT_F_CPUSTRING	26,615
#define JIT_F_ARMV6_	28,700
#define JIT_F_ARMV6T2_	29,733
#define JIT_F_ARMV7	30,768
#define JIT_F_VFPV2	31,800
#define JIT_F_VFPV3	32,832
#define JIT_F_ARMV6	34,865
#define JIT_F_ARMV6T2	35,928
#define JIT_F_VFP	36,980
#define JIT_F_CPU_FIRST	39,1094
#define JIT_F_CPUSTRING	40,1132
#define JIT_F_SQRT	42,1217
#define JIT_F_ROUND	43,1248
#define JIT_F_CPU_FIRST	46,1349
#define JIT_F_CPUSTRING	47,1385
#define JIT_F_MIPSXXR2	49,1447
#define JIT_F_CPU_FIRST	52,1551
#define JIT_F_CPUSTRING	54,1612
#define JIT_F_CPUSTRING	56,1658
#define JIT_F_CPU_FIRST	59,1711
#define JIT_F_CPUSTRING	60,1738
#define JIT_F_OPT_MASK	64,1800
#define JIT_F_OPT_FOLD	66,1836
#define JIT_F_OPT_CSE	67,1871
#define JIT_F_OPT_DCE	68,1905
#define JIT_F_OPT_FWD	69,1939
#define JIT_F_OPT_DSE	70,1973
#define JIT_F_OPT_NARROW	71,2007
#define JIT_F_OPT_LOOP	72,2043
#define JIT_F_OPT_ABC	73,2078
#define JIT_F_OPT_SINK	74,2112
#define JIT_F_OPT_FUSE	75,2147
#define JIT_F_OPT_FIRST	78,2245
#define JIT_F_OPTSTRING	79,2285
#define JIT_F_OPT_0	83,2434
#define JIT_F_OPT_1	84,2456
#define JIT_F_OPT_2	85,2521
#define JIT_F_OPT_3	86,2587
#define JIT_F_OPT_DEFAULT	88,2697
#define JIT_P_sizemcode_DEFAULT	92,2842
#define JIT_P_sizemcode_DEFAULT	95,2959
#define JIT_PARAMDEF(99,3080
#define JIT_PARAMENUM(123,4229
JIT_PARAMDEF(124,4283
JIT_PARAMDEF(JIT_PARAMENUM)124,4283
#undef JIT_PARAMENUM125,4311
  JIT_P__MAX126,4332
#define JIT_PARAMSTR(129,4349
#define JIT_P_STRING	130,4399
  LJ_TRACE_IDLE,134,4491
  LJ_TRACE_ACTIVE 135,4535
  LJ_TRACE_ACTIVE = 0x10,x10135,4535
  LJ_TRACE_RECORD,136,4561
  LJ_TRACE_START,137,4613
  LJ_TRACE_END,138,4656
  LJ_TRACE_ASM,139,4693
  LJ_TRACE_ERR	140,4732
} TraceState;141,4780
  LJ_POST_NONE,145,4840
  LJ_POST_FIXCOMP,146,4874
  LJ_POST_FIXGUARD,147,4940
  LJ_POST_FIXGUARDSNAP,148,4996
  LJ_POST_FIXBOOL,149,5069
  LJ_POST_FIXCONST,150,5116
  LJ_POST_FFRETRY	151,5166
} PostProc;152,5236
typedef uint8_t MCode;156,5297
typedef uint32_t MCode;158,5326
typedef struct MCLink 162,5392
  MCode *next;next163,5416
  size_t size;164,5449
} MCLink;165,5493
typedef struct SnapShot 168,5533
  uint16_t mapofs;169,5559
  IRRef1 ref;170,5610
  uint8_t nslots;171,5663
  uint8_t topslot;172,5710
  uint8_t nent;173,5757
  uint8_t count;174,5810
} SnapShot;175,5873
#define SNAPCOUNT_DONE	177,5886
typedef uint32_t SnapEntry;180,5995
#define SNAP_FRAME	182,6024
#define SNAP_CONT	183,6071
#define SNAP_NORESTORE	184,6124
#define SNAP_SOFTFPNUM	185,6188
#define SNAP(189,6333
#define SNAP_TR(190,6410
#define SNAP_MKPC(193,6527
#define SNAP_MKFTSZ(195,6581
#define snap_ref(196,6627
#define snap_slot(197,6665
#define snap_isframe(198,6710
#define snap_setref(199,6755
static LJ_AINLINE const BCIns *snap_pc(snap_pc201,6833
typedef uint32_t SnapNo;213,7088
typedef uint32_t ExitNo;214,7113
typedef uint32_t TraceNo;217,7159
typedef uint16_t TraceNo1;218,7226
  LJ_TRLINK_NONE,222,7332
  LJ_TRLINK_ROOT,223,7389
  LJ_TRLINK_LOOP,224,7440
  LJ_TRLINK_TAILREC,225,7485
  LJ_TRLINK_UPREC,226,7529
  LJ_TRLINK_DOWNREC,227,7569
  LJ_TRLINK_INTERP,228,7613
  LJ_TRLINK_RETURN,229,7665
  LJ_TRLINK_STITCH	230,7715
} TraceLink;231,7758
typedef struct GCtrace 234,7792
  GCHeader;235,7817
  uint8_t topslot;236,7829
  uint8_t linktype;237,7902
  IRRef nins;238,7942
  uint32_t unused_gc64;240,8018
  GCRef gclist;242,8049
  IRIns *ir;ir243,8065
  IRRef nk;244,8134
  uint16_t nsnap;245,8195
  uint16_t nsnapmap;246,8240
  SnapShot *snap;snap247,8300
  SnapEntry *snapmap;snapmap248,8340
  GCRef startpt;249,8382
  MRef startpc;250,8425
  BCIns startins;251,8485
  MSize szmcode;252,8552
  MCode *mcode;mcode253,8597
  MSize mcloop;254,8643
  uint16_t nchild;255,8704
  uint16_t spadjust;256,8771
  TraceNo1 traceno;257,8842
  TraceNo1 link;258,8882
  TraceNo1 root;259,8939
  TraceNo1 nextroot;260,9011
  TraceNo1 nextside;261,9074
  uint8_t sinktags;262,9137
  uint8_t unused1;263,9184
  void *gdbjit_entry;gdbjit_entry265,9228
} GCtrace;267,9278
#define gco2trace(269,9290
#define traceref(270,9365
static LJ_AINLINE MSize snap_nextofs(275,9544
typedef struct HotPenalty 284,9783
  MRef pc;285,9811
  uint16_t val;286,9851
  uint16_t reason;287,9910
} HotPenalty;288,9967
#define PENALTY_SLOTS	290,9982
#define PENALTY_MIN	291,10055
#define PENALTY_MAX	292,10111
#define PENALTY_RNDBITS	293,10166
typedef struct BPropEntry 296,10308
  IRRef1 key;297,10336
  IRRef1 val;298,10382
  IRRef mode;299,10438
} BPropEntry;300,10501
#define BPROP_SLOTS	303,10591
typedef struct ScEvEntry 306,10654
  MRef pc;307,10681
  IRRef1 idx;308,10720
  IRRef1 start;309,10758
  IRRef1 stop;310,10807
  IRRef1 step;311,10854
  IRType1 t;312,10901
  uint8_t dir;313,10934
} ScEvEntry;314,10979
typedef struct RBCHashEntry 317,11067
  MRef pc;318,11097
  GCRef pt;319,11128
  IRRef ref;320,11158
} RBCHashEntry;321,11192
#define RBCHASH_SLOTS	324,11289
  LJ_KSIMD_ABS,328,11351
  LJ_KSIMD_NEG,329,11367
  LJ_KSIMD__MAX330,11383
  LJ_K64_TOBIT,335,11433
  LJ_K64_2P64,336,11468
  LJ_K64_M2P64,337,11495
  LJ_K64_M2P64_31,339,11534
  LJ_K64_M2P64_31 341,11580
  LJ_K64_M2P64_31 = LJ_K64_M2P64,341,11580
  LJ_K64_2P31,345,11647
  LJ_K64_2P63,347,11684
  LJ_K64_M2P64,348,11711
  LJ_K64__MAX,351,11754
  LJ_K32_M2P64_31,356,11803
  LJ_K32_2P52_2P31,359,11868
  LJ_K32_2P52,360,11906
  LJ_K32_2P31,363,11976
  LJ_K32_2P63,366,12031
  LJ_K32_M2P64,367,12058
  LJ_K32__MAX369,12094
#define LJ_KSIMD(373,12164
#define lj_needsplit(378,12367
#define lj_resetsplit(379,12411
#define lj_needsplit(381,12461
#define lj_resetsplit(382,12496
typedef struct FoldState 386,12597
  IRIns ins;387,12624
  IRIns left[left388,12675
  IRIns right[right389,12738
} FoldState;390,12803
typedef struct jit_State 393,12843
  GCtrace cur;394,12870
  GCtrace *curfinal;curfinal395,12907
  lua_State *L;L397,12984
  const BCIns *pc;pc398,13026
  GCfunc *fn;fn399,13063
  GCproto *pt;pt400,13102
  TRef *base;base401,13143
  uint32_t flags;403,13207
  BCReg maxslot;404,13249
  BCReg baseslot;405,13294
  uint8_t mergesnap;407,13361
  uint8_t needsnap;408,13425
  IRType1 guardemit;409,13497
  uint8_t bcskip;410,13572
  FoldState fold;412,13638
  const BCIns *bc_min;bc_min414,13675
  MSize bc_extent;415,13752
  TraceState state;417,13799
  int32_t instunroll;419,13848
  int32_t loopunroll;420,13911
  int32_t tailcalled;421,13983
  int32_t framedepth;422,14043
  int32_t retdepth;423,14092
  TValue ksimd[ksimd425,14155
  TValue k64[k64426,14229
  uint32_t k32[k32427,14305
  IRIns *irbuf;irbuf429,14370
  IRRef irtoplim;430,14444
  IRRef irbotlim;431,14511
  IRRef loopref;432,14578
  MSize sizesnap;434,14651
  SnapShot *snapbuf;snapbuf435,14706
  SnapEntry *snapmapbuf;snapmapbuf436,14756
  MSize sizesnapmap;437,14815
  PostProc postproc;439,14878
  uint8_t needsplit;441,14987
  uint8_t retryrec;443,15038
  GCRef *trace;trace445,15082
  TraceNo freetrace;446,15122
  MSize sizetrace;447,15184
  IRRef1 ktrace;448,15230
  IRRef1 chain[chain450,15285
  TRef slot[slot451,15357
  int32_t param[param453,15424
  MCode *exitstubgroup[exitstubgroup455,15484
  HotPenalty penalty[penalty457,15562
  uint32_t penaltyslot;458,15621
  uint32_t prngstate;459,15689
  RBCHashEntry rbchash[rbchash462,15762
  BPropEntry bpropcache[bpropcache465,15838
  uint32_t bpropslot;466,15912
  ScEvEntry scev;468,15982
  const BCIns *startpc;startpc470,16046
  TraceNo parent;471,16113
  ExitNo exitno;472,16187
  BCIns *patchpc;patchpc474,16256
  BCIns patchins;475,16305
  int mcprot;477,16364
  MCode *mcarea;mcarea478,16419
  MCode *mctop;mctop479,16470
  MCode *mcbot;mcbot480,16520
  size_t szmcarea;481,16573
  size_t szallmcarea;482,16626
  TValue errinfo;484,16696
  GCproto *prev_pt;prev_pt487,16781
  BCLine prev_line;488,16827
  int prof_mode;489,16868
LJ_ALIGN(493,16947
static LJ_AINLINE uint32_t LJ_PRNG_BITS(498,17093

vendor/github.com/LuaJIT/LuaJIT/src/lj_lex.c,858
#define lj_lex_c9,247
#define LUA_CORE10,264
static const char *const tokennames[tokennames31,648
#define TKSTR1(32,690
#define TKSTR2(33,719
#undef TKSTR135,773
#undef TKSTR236,787
#define LEX_EOF	42,892
#define lex_iseol(43,915
static LJ_NOINLINE LexChar lex_more(46,1006
static LJ_AINLINE LexChar lex_next(57,1265
static LJ_AINLINE void lex_save(63,1420
static LJ_AINLINE LexChar lex_savenext(69,1563
static void lex_newline(76,1728
static void lex_number(89,2141
static int lex_skipeq(136,3738
static void lex_longstring(147,4006
static void lex_string(182,4875
static LexToken lex_scan(287,7685
int lj_lex_setup(394,10327
void lj_lex_cleanup(441,11651
void lj_lex_next(450,11910
LexToken lj_lex_lookahead(463,12299
const char *lj_lex_token2str(lj_lex_token2str471,12489
void lj_lex_error(482,12766
void lj_lex_init(500,13240

vendor/github.com/LuaJIT/LuaJIT/src/lj_lex.h,1371
#define _LJ_LEX_H7,117
#define TKDEF(15,222
  TK_OFS 24,614
#define TKENUM1(25,630
#define TKENUM2(26,664
TKDEF(27,702
TKDEF(TKENUM1,27,702
TKDEF(TKENUM1, TKENUM2)27,702
#undef TKENUM128,726
#undef TKENUM229,741
  TK_RESERVED 30,756
  TK_RESERVED = TK_while 30,756
  TK_RESERVED = TK_while - TK_OFS30,756
typedef int LexChar;33,794
typedef int LexToken;34,865
typedef struct BCInsLine 37,981
  BCIns ins;38,1008
  BCLine line;39,1050
} BCInsLine;40,1103
typedef struct VarInfo 43,1187
  GCRef name;44,1212
  BCPos startpc;45,1273
  BCPos endpc;46,1344
  uint8_t slot;47,1412
  uint8_t info;48,1450
} VarInfo;49,1499
typedef struct LexState 52,1534
  struct FuncState *fs;fs53,1560
  struct lua_State *L;L54,1632
  TValue tokval;55,1672
  TValue lookaheadval;56,1716
  const char *p;p57,1768
  const char *pe;pe58,1825
  LexChar c;59,1870
  LexToken tok;60,1909
  LexToken lookahead;61,1947
  SBuf sb;62,1992
  lua_Reader rfunc;63,2036
  void *rdata;rdata64,2079
  BCLine linenumber;65,2123
  BCLine lastline;66,2170
  GCstr *chunkname;chunkname67,2215
  const char *chunkarg;chunkarg68,2279
  const char *mode;mode69,2330
  VarInfo *vstack;vstack70,2407
  MSize sizevstack;71,2480
  MSize vtop;72,2530
  BCInsLine *bcstack;bcstack73,2574
  MSize sizebcstack;74,2648
  uint32_t level;75,2699
} LexState;76,2750

vendor/github.com/LuaJIT/LuaJIT/src/lj_lib.c,768
#define lj_lib_c6,107
#define LUA_CORE7,124
static GCtab *lib_create_table(lib_create_table28,538
static const uint8_t *lib_read_lfunc(lib_read_lfunc49,1154
void lj_lib_register(71,1793
GCfunc *lj_lib_pushcc(lj_lib_pushcc152,3884
void lj_lib_prereg(162,4107
int lj_lib_postreg(172,4420
TValue *lj_lib_checkany(lj_lib_checkany184,4829
GCstr *lj_lib_checkstr(lj_lib_checkstr192,4984
GCstr *lj_lib_optstr(lj_lib_optstr208,5337
void lj_lib_checknumber(215,5506
lua_Number lj_lib_checknum(223,5685
int32_t lj_lib_checkint(238,6040
int32_t lj_lib_optint(252,6364
GCfunc *lj_lib_checkfunc(lj_lib_checkfunc258,6531
GCtab *lj_lib_checktab(lj_lib_checktab266,6713
GCtab *lj_lib_checktabornil(lj_lib_checktabornil274,6888
int lj_lib_checkopt(287,7159

vendor/github.com/LuaJIT/LuaJIT/src/lj_lib.h,1126
#define _LJ_LIB_H7,125
#define FFH_RETRY	28,885
#define FFH_UNREACHABLE	29,905
#define FFH_RES(30,939
#define FFH_TAILCALL	31,966
#define lj_lib_checknumber(39,1238
#define lj_lib_upvalue(51,1796
#define lj_lib_upvalue(54,1883
#define lj_lib_upvalue(57,1970
#define lj_lib_checkfpu(62,2085
#define lj_lib_checkfpu(67,2277
#define lj_lib_pushcf(71,2399
#define LJLIB_CF(74,2524
#define LJLIB_ASM(75,2586
#define LJLIB_ASM_(76,2650
#define LJLIB_LUA(77,2675
#define LJLIB_SET(78,2699
#define LJLIB_PUSH(79,2723
#define LJLIB_REC(80,2747
#define LJLIB_NOREGUV81,2774
#define LJLIB_NOREG82,2796
#define LJ_LIB_REG(84,2817
#define LIBINIT_LENMASK	95,3262
#define LIBINIT_TAGMASK	96,3291
#define LIBINIT_CF	97,3320
#define LIBINIT_ASM	98,3344
#define LIBINIT_ASM_	99,3369
#define LIBINIT_STRING	100,3395
#define LIBINIT_MAXSTR	101,3423
#define LIBINIT_LUA	102,3451
#define LIBINIT_SET	103,3476
#define LIBINIT_NUMBER	104,3501
#define LIBINIT_COPY	105,3529
#define LIBINIT_LASTCL	106,3555
#define LIBINIT_FFID	107,3583
#define LIBINIT_END	108,3609
typedef struct RandomState RandomState;112,3670

vendor/github.com/LuaJIT/LuaJIT/src/lj_libdef.h,3178
#undef LJLIB_MODULE_base4,71
static const lua_CFunction lj_lib_cf_base[lj_lib_cf_base5,96
static const uint8_t lj_lib_init_base[lj_lib_init_base33,598
#undef LJLIB_MODULE_coroutine55,1940
static const lua_CFunction lj_lib_cf_coroutine[lj_lib_cf_coroutine56,1970
static const uint8_t lj_lib_init_coroutine[lj_lib_init_coroutine65,2212
#undef LJLIB_MODULE_math73,2506
static const lua_CFunction lj_lib_cf_math[lj_lib_cf_math74,2531
static const uint8_t lj_lib_init_math[lj_lib_init_math84,2746
#undef LJLIB_MODULE_bit100,3631
static const lua_CFunction lj_lib_cf_bit[lj_lib_cf_bit101,3655
static const uint8_t lj_lib_init_bit[lj_lib_init_bit109,3822
#undef LJLIB_MODULE_string118,4171
static const lua_CFunction lj_lib_cf_string[lj_lib_cf_string119,4198
static const uint8_t lj_lib_init_string[lj_lib_init_string132,4491
#undef LJLIB_MODULE_table142,4918
static const lua_CFunction lj_lib_cf_table[lj_lib_cf_table143,4944
static const uint8_t lj_lib_init_table[lj_lib_init_table150,5099
#undef LJLIB_MODULE_io_method173,6521
static const lua_CFunction lj_lib_cf_io_method[lj_lib_cf_io_method174,6551
static const uint8_t lj_lib_init_io_method[lj_lib_init_io_method185,6835
#undef LJLIB_MODULE_io194,7181
static const lua_CFunction lj_lib_cf_io[lj_lib_cf_io195,7204
static const uint8_t lj_lib_init_io[lj_lib_init_io208,7450
#undef LJLIB_MODULE_os217,7797
static const lua_CFunction lj_lib_cf_os[lj_lib_cf_os218,7820
static const uint8_t lj_lib_init_os[lj_lib_init_os231,8077
#undef LJLIB_MODULE_debug240,8451
static const lua_CFunction lj_lib_cf_debug[lj_lib_cf_debug241,8477
static const uint8_t lj_lib_init_debug[lj_lib_init_debug261,8980
#undef LJLIB_MODULE_jit276,9761
static const lua_CFunction lj_lib_cf_jit[lj_lib_cf_jit277,9785
static const uint8_t lj_lib_init_jit[lj_lib_init_jit284,9926
#undef LJLIB_MODULE_jit_util293,10268
static const lua_CFunction lj_lib_cf_jit_util[lj_lib_cf_jit_util294,10297
static const uint8_t lj_lib_init_jit_util[lj_lib_init_jit_util307,10650
#undef LJLIB_MODULE_jit_opt317,11115
static const lua_CFunction lj_lib_cf_jit_opt[lj_lib_cf_jit_opt318,11143
static const uint8_t lj_lib_init_jit_opt[lj_lib_init_jit_opt321,11219
#undef LJLIB_MODULE_jit_profile327,11343
static const lua_CFunction lj_lib_cf_jit_profile[lj_lib_cf_jit_profile328,11375
static const uint8_t lj_lib_init_jit_profile[lj_lib_init_jit_profile333,11516
#undef LJLIB_MODULE_ffi_meta340,11696
static const lua_CFunction lj_lib_cf_ffi_meta[lj_lib_cf_ffi_meta341,11725
static const uint8_t lj_lib_init_ffi_meta[lj_lib_init_ffi_meta361,12229
#undef LJLIB_MODULE_ffi_clib373,12825
static const lua_CFunction lj_lib_cf_ffi_clib[lj_lib_cf_ffi_clib374,12854
static const uint8_t lj_lib_init_ffi_clib[lj_lib_init_ffi_clib379,12986
#undef LJLIB_MODULE_ffi_callback386,13176
static const lua_CFunction lj_lib_cf_ffi_callback[lj_lib_cf_ffi_callback387,13209
static const uint8_t lj_lib_init_ffi_callback[lj_lib_init_ffi_callback391,13320
#undef LJLIB_MODULE_ffi398,13493
static const lua_CFunction lj_lib_cf_ffi[lj_lib_cf_ffi399,13517
static const uint8_t lj_lib_init_ffi[lj_lib_init_ffi418,13892

vendor/github.com/LuaJIT/LuaJIT/src/lj_load.c,727
#define lj_load_c9,140
#define LUA_CORE10,158
static TValue *cpparser(cpparser28,502
LUA_API int lua_loadx(48,1098
LUA_API int lua_load(64,1487
typedef struct FileReaderCtx 70,1642
  FILE *fp;fp71,1673
  char buf[buf72,1685
} FileReaderCtx;73,1714
static const char *reader_file(reader_file75,1732
LUALIB_API int luaL_loadfilex(84,1992
LUALIB_API int luaL_loadfile(117,2818
typedef struct StringReaderCtx 122,2932
  const char *str;str123,2965
  size_t size;124,2984
} StringReaderCtx;125,2999
static const char *reader_string(reader_string127,3019
LUALIB_API int luaL_loadbufferx(137,3248
LUALIB_API int luaL_loadbuffer(146,3484
LUALIB_API int luaL_loadstring(152,3645
LUA_API int lua_dump(159,3836

vendor/github.com/LuaJIT/LuaJIT/src/lj_mcode.c,1412
#define lj_mcode_c6,106
#define LUA_CORE7,125
void lj_mcode_sync(36,720
#define WIN32_LEAN_AND_MEAN60,1216
#define MCPROT_RW	63,1266
#define MCPROT_RX	64,1299
#define MCPROT_RWX	65,1335
static void *mcode_alloc_at(mcode_alloc_at67,1378
static void mcode_free(76,1625
static int mcode_setprot(82,1746
#define MAP_ANONYMOUS	93,1938
#define MCPROT_RW	96,1977
#define MCPROT_RX	97,2018
#define MCPROT_RWX	98,2058
static void *mcode_alloc_at(mcode_alloc_at100,2111
static void mcode_free(110,2376
static int mcode_setprot(116,2468
#define LUAJIT_UNPROTECT_MCODE128,2734
#define MCPROT_RW	129,2765
#define MCPROT_RX	130,2785
#define MCPROT_RWX	131,2805
static void *mcode_alloc_at(mcode_alloc_at133,2827
static void mcode_free(139,2972
#define MCPROT_GEN	161,3727
#define MCPROT_RUN	162,3757
static void mcode_protect(164,3788
#define MCPROT_GEN	179,4192
#define MCPROT_RUN	180,4221
static LJ_NOINLINE void mcode_protfail(183,4319
static void mcode_protect(194,4570
#define mcode_validptr(208,4867
#define mcode_validptr(210,4903
static void *mcode_alloc(mcode_alloc216,5077
static void *mcode_alloc(mcode_alloc256,6609
static void mcode_allocarea(276,7092
void lj_mcode_free(292,7617
MCode *lj_mcode_reserve(lj_mcode_reserve307,7976
void lj_mcode_commit(318,8206
void lj_mcode_abort(325,8337
MCode *lj_mcode_patch(lj_mcode_patch332,8488
void lj_mcode_limiterr(366,9459

vendor/github.com/LuaJIT/LuaJIT/src/lj_mcode.h,61
#define _LJ_MCODE_H7,126
#define lj_mcode_commitbot(26,625

vendor/github.com/LuaJIT/LuaJIT/src/lj_meta.c,784
#define lj_meta_c9,244
#define LUA_CORE10,262
void lj_meta_init(29,690
#define MMNAME(31,724
#undef MMNAME33,797
cTValue *lj_meta_cache(lj_meta_cache47,1208
cTValue *lj_meta_lookup(lj_meta_lookup59,1525
int lj_meta_tailcall(78,1934
static TValue *mmcall(mmcall106,2881
cTValue *lj_meta_tget(lj_meta_tget135,4059
TValue *lj_meta_tset(lj_meta_tset161,4821
static cTValue *str2num(str2num200,6096
TValue *lj_meta_arith(lj_meta_arith213,6407
TValue *lj_meta_cat(lj_meta_cat238,7161
TValue * LJ_FASTCALL lj_meta_len(310,9817
TValue *lj_meta_equal(lj_meta_equal324,10230
TValue * LJ_FASTCALL lj_meta_equal_cd(350,11068
TValue *lj_meta_comp(lj_meta_comp379,11963
void lj_meta_istype(425,13406
void lj_meta_call(437,13841
void LJ_FASTCALL lj_meta_for(449,14176

vendor/github.com/LuaJIT/LuaJIT/src/lj_meta.h,84
#define _LJ_META_H7,121
#define lj_meta_fastg(19,439
#define lj_meta_fast(22,581

vendor/github.com/LuaJIT/LuaJIT/src/lj_obj.c,268
#define lj_obj_c6,112
#define LUA_CORE7,129
LJ_DATADEF const char *const lj_obj_typename[lj_obj_typename12,193
LJ_DATADEF const char *const lj_obj_itypename[lj_obj_itypename17,393
int LJ_FASTCALL lj_obj_equal(23,665
const void * LJ_FASTCALL lj_obj_ptr(37,1019

vendor/github.com/LuaJIT/LuaJIT/src/lj_obj.h,13471
#define _LJ_OBJ_H10,277
typedef uint32_t MSize;19,469
typedef uint64_t GCSize;21,505
typedef uint32_t GCSize;23,536
typedef struct MRef 27,592
  uint64_t ptr64;29,626
  uint32_t ptr32;31,677
} MRef;33,731
#define mref(36,752
#define setmref(38,797
#define setmrefr(39,855
#define mref(41,908
#define setmref(43,964
#define setmrefr(44,1033
typedef struct GCRef 50,1190
  uint64_t gcptr64;52,1225
  uint32_t gcptr32;54,1278
} GCRef;56,1334
#define GCHeader	59,1396
#define gcref(63,1544
#define gcrefp(64,1584
#define gcrefu(65,1632
#define gcrefeq(66,1664
#define setgcref(68,1720
#define setgcreft(69,1781
#define setgcrefp(71,1876
#define setgcrefnull(72,1930
#define setgcrefr(73,1972
#define gcref(75,2030
#define gcrefp(76,2081
#define gcrefu(77,2140
#define gcrefeq(78,2172
#define setgcref(80,2228
#define setgcrefp(81,2300
#define setgcrefnull(82,2365
#define setgcrefr(83,2407
#define gcnext(86,2467
typedef uint32_t BCIns;147,5652
typedef uint32_t BCPos;148,5705
typedef uint32_t BCReg;149,5755
typedef int32_t BCLine;150,5805
typedef void (*ASMFunction)ASMFunction153,5929
typedef struct SBuf 156,6033
  MRef p;157,6055
  MRef e;158,6095
  MRef b;159,6139
  MRef L;160,6176
} SBuf;161,6230
  int32_t ftsz;167,6353
  MRef pcr;168,6415
} FrameLink;169,6456
    , uint32_t it;181,6793
    , uint32_t it;191,7015
    , FrameLink tp;201,7286
    , uint32_t hi;208,7438
} TValue;211,7503
typedef const TValue cTValue;213,7514
#define tvref(215,7545
#define LAST_TT	218,7638
#define LUA_TPROTO	219,7667
#define LUA_TCDATA	220,7698
#define LJ_TNIL	257,9292
#define LJ_TFALSE	258,9316
#define LJ_TTRUE	259,9341
#define LJ_TLIGHTUD	260,9365
#define LJ_TSTR	261,9392
#define LJ_TUPVAL	262,9416
#define LJ_TTHREAD	263,9441
#define LJ_TPROTO	264,9467
#define LJ_TFUNC	265,9492
#define LJ_TTRACE	266,9516
#define LJ_TCDATA	267,9541
#define LJ_TTAB	268,9567
#define LJ_TUDATA	269,9592
#define LJ_TNUMX	271,9684
#define LJ_TISNUM	275,9802
#define LJ_TISNUM	277,9839
#define LJ_TISTRUECOND	279,9874
#define LJ_TISPRI	280,9908
#define LJ_TISGCV	281,9936
#define LJ_TISTABUD	282,9967
#define LJ_GCVMASK	285,10009
typedef struct GCstr 291,10195
  GCHeader;292,10218
  uint8_t reserved;293,10230
  uint8_t unused;294,10305
  MSize hash;295,10323
  MSize len;296,10360
} GCstr;297,10396
#define strref(299,10406
#define strdata(300,10443
#define strdatawr(301,10486
#define strVdata(302,10525
#define sizestring(303,10562
typedef struct GCudata 308,10739
  GCHeader;309,10764
  uint8_t udtype;310,10776
  uint8_t unused2;311,10815
  GCRef env;312,10834
  MSize len;313,10890
  GCRef metatable;314,10927
  uint32_t align1;315,10985
} GCudata;316,11052
  UDTYPE_USERDATA,320,11093
  UDTYPE_IO_FILE,321,11136
  UDTYPE_FFI_CLIB,322,11178
  UDTYPE__MAX323,11228
#define uddata(326,11246
#define sizeudata(327,11282
typedef struct GCcdata 332,11456
  GCHeader;333,11481
  uint16_t ctypeid;334,11493
} GCcdata;335,11530
typedef struct GCcdataVar 338,11605
  uint16_t offset;339,11633
  uint16_t extra;340,11708
  MSize len;341,11782
} GCcdataVar;342,11819
#define cdataptr(344,11834
#define cdataisv(345,11874
#define cdatav(346,11917
#define cdatavlen(347,11988
#define sizecdatav(348,12051
#define memcdatav(349,12110
#define SCALE_NUM_GCO	353,12259
#define round_nkgc(354,12325
typedef struct GCproto 356,12395
  GCHeader;357,12420
  uint8_t numparams;358,12432
  uint8_t framesize;359,12481
  MSize sizebc;360,12526
  uint32_t unused_gc64;362,12594
  GCRef gclist;364,12625
  MRef k;365,12641
  MRef uv;366,12703
  MSize sizekgc;367,12771
  MSize sizekn;368,12827
  MSize sizept;369,12882
  uint8_t sizeuv;370,12944
  uint8_t flags;371,12988
  uint16_t trace;372,13044
  GCRef chunkname;374,13178
  BCLine firstline;375,13251
  BCLine numline;376,13316
  MRef lineinfo;377,13385
  MRef uvinfo;378,13458
  MRef varinfo;379,13495
} GCproto;380,13567
#define PROTO_CHILD	383,13606
#define PROTO_VARARG	384,13660
#define PROTO_FFI	385,13710
#define PROTO_NOJIT	386,13774
#define PROTO_ILOOP	387,13838
#define PROTO_HAS_RETURN	389,13935
#define PROTO_FIXUP_RETURN	390,13997
#define PROTO_CLCOUNT	392,14117
#define PROTO_CLC_BITS	393,14185
#define PROTO_CLC_POLY	394,14211
#define PROTO_UV_LOCAL	396,14284
#define PROTO_UV_IMMUTABLE	397,14345
#define proto_kgc(399,14405
#define proto_knumtv(402,14556
#define proto_bc(404,14664
#define proto_bcpos(405,14730
#define proto_uv(406,14789
#define proto_chunkname(408,14839
#define proto_chunknamestr(409,14893
#define proto_lineinfo(410,14957
#define proto_uvinfo(411,15019
#define proto_varinfo(412,15080
typedef struct GCupval 416,15224
  GCHeader;417,15249
  uint8_t closed;418,15261
  uint8_t immutable;419,15329
    TValue tv;421,15383
      GCRef prev;423,15503
      GCRef next;424,15521
  MRef v;427,15551
  uint32_t dhash;428,15615
} GCupval;429,15688
#define uvprev(431,15700
#define uvnext(432,15746
#define uvval(433,15792
#define GCfuncHeader 438,15993
typedef struct GCfuncC 442,16099
  GCfuncHeader;443,16124
  lua_CFunction f;444,16140
  TValue upvalue[upvalue445,16190
} GCfuncC;446,16245
typedef struct GCfuncL 448,16257
  GCfuncHeader;449,16282
  GCRef uvptr[uvptr450,16298
} GCfuncL;451,16372
typedef union GCfunc 453,16384
  GCfuncC c;454,16407
  GCfuncL l;455,16420
} GCfunc;456,16433
#define FF_LUA	458,16444
#define FF_C	459,16462
#define isluafunc(460,16478
#define iscfunc(461,16525
#define isffunc(462,16568
#define funcproto(463,16610
#define sizeCfunc(465,16714
#define sizeLfunc(466,16787
typedef struct Node 471,16956
  TValue val;472,16978
  TValue key;473,17034
  MRef next;474,17067
  MRef freetop;476,17112
} Node;478,17187
typedef struct GCtab 482,17241
  GCHeader;483,17264
  uint8_t nomm;484,17276
  int8_t colo;485,17336
  MRef array;486,17376
  GCRef gclist;487,17409
  GCRef metatable;488,17425
  MRef node;489,17485
  uint32_t asize;490,17516
  uint32_t hmask;491,17580
  MRef freetop;493,17656
} GCtab;495,17708
#define sizetabcolo(497,17718
#define tabref(498,17778
#define noderef(499,17815
#define nextnode(500,17852
#define getfreetop(502,17908
#define setfreetop(503,17957
#define getfreetop(505,18020
#define setfreetop(506,18069
  LJ_VMST_INTERP,513,18238
  LJ_VMST_C,514,18275
  LJ_VMST_GC,515,18307
  LJ_VMST_EXIT,516,18347
  LJ_VMST_RECORD,517,18390
  LJ_VMST_OPT,518,18430
  LJ_VMST_ASM,519,18463
  LJ_VMST__MAX520,18496
#define setvmstate(523,18515
#define MMDEF_FFI(527,18618
#define MMDEF_FFI(529,18652
#define MMDEF_PAIRS(533,18704
#define MMDEF_PAIRS(535,18752
#define MM_pairs	536,18775
#define MM_ipairs	537,18796
#define MMDEF(540,18826
#define MMENUM(550,19237
MMDEF(551,19269
MMDEF(MMENUM)551,19269
#undef MMENUM552,19283
  MM__MAX,553,19297
  MM____ 554,19308
  MM____ = MM__MAX,554,19308
  MM_FAST 555,19328
  MM_FAST = MM_len555,19328
} MMS;556,19347
  GCROOT_MMNAME,560,19389
  GCROOT_MMNAME_LAST 561,19430
  GCROOT_MMNAME_LAST = GCROOT_MMNAME 561,19430
  GCROOT_MMNAME_LAST = GCROOT_MMNAME + MM__MAX-MM__MAX561,19430
  GCROOT_BASEMT,562,19480
  GCROOT_BASEMT_NUM 563,19530
  GCROOT_BASEMT_NUM = GCROOT_BASEMT 563,19530
  GCROOT_BASEMT_NUM = GCROOT_BASEMT + ~LJ_TNUMX,563,19530
  GCROOT_IO_INPUT,564,19579
  GCROOT_IO_OUTPUT,565,19641
  GCROOT_MAX566,19705
} GCRootID;567,19718
#define basemt_it(569,19731
#define basemt_obj(570,19791
#define mmname_str(571,19857
typedef struct GCState 573,19926
  GCSize total;574,19951
  GCSize threshold;575,20002
  uint8_t currentwhite;576,20046
  uint8_t state;577,20097
  uint8_t nocdatafin;578,20130
  uint8_t unused2;579,20185
  MSize sweepstr;580,20204
  GCRef root;581,20260
  MRef sweep;582,20314
  GCRef gray;583,20364
  GCRef grayagain;584,20407
  GCRef weak;585,20470
  GCRef mmudata;586,20528
  GCSize debt;587,20587
  GCSize estimate;588,20648
  MSize stepmul;589,20709
  MSize pause;590,20765
} GCState;591,20823
typedef struct global_State 594,20896
  GCRef *strhash;strhash595,20926
  MSize strmask;596,20990
  MSize strnum;597,21056
  lua_Alloc allocf;598,21112
  void *allocd;allocd599,21156
  GCState gc;600,21202
  volatile int32_t vmstate;601,21242
  SBuf tmpbuf;602,21320
  GCstr strempty;603,21367
  uint8_t stremptyz;604,21405
  uint8_t hookmask;605,21465
  uint8_t dispatchmode;606,21502
  uint8_t vmevmask;607,21547
  GCRef mainthref;608,21588
  TValue registrytv;609,21634
  TValue tmptv,610,21682
  TValue tmptv, tmptv2;610,21682
  Node nilnode;611,21731
  GCupval uvhead;612,21804
  int32_t hookcount;613,21877
  int32_t hookcstart;614,21932
  lua_Hook hookf;615,22002
  lua_CFunction wrapf;616,22041
  lua_CFunction panic;617,22100
  BCIns bc_cfunc_int;618,22165
  BCIns bc_cfunc_ext;619,22233
  GCRef cur_L;620,22301
  MRef jit_base;621,22354
  MRef ctype_state;622,22411
  GCRef gcroot[gcroot623,22462
} global_State;624,22507
#define mainthread(626,22524
#define niltv(627,22573
#define niltvg(629,22653
#define HOOK_EVENTMASK	633,22795
#define HOOK_ACTIVE	634,22824
#define HOOK_ACTIVE_SHIFT	635,22850
#define HOOK_VMEVENT	636,22878
#define HOOK_GC	637,22905
#define HOOK_PROFILE	638,22928
#define hook_active(639,22955
#define hook_enter(640,23009
#define hook_entergc(641,23063
#define hook_vmevent(642,23129
#define hook_leave(643,23200
#define hook_save(644,23255
#define hook_restore(645,23311
struct lua_State 649,23431
  GCHeader;650,23450
  uint8_t dummy_ffid;651,23462
  uint8_t status;652,23536
  MRef glref;653,23575
  GCRef gclist;654,23618
  TValue *base;base655,23651
  TValue *top;top656,23712
  MRef maxstack;657,23764
  MRef stack;658,23816
  GCRef openupval;659,23849
  GCRef env;660,23910
  void *cframe;cframe661,23969
  MSize stacksize;662,24020
#define G(665,24089
#define registry(666,24135
#define curr_func(670,24252
#define curr_func(672,24311
#define curr_func(674,24370
#define curr_funcisL(676,24434
#define curr_proto(677,24485
#define curr_topL(678,24534
#define curr_top(679,24593
typedef struct GChead 684,24804
  GCHeader;685,24828
  uint8_t unused1;686,24840
  uint8_t unused2;687,24859
  GCRef env;688,24878
  GCRef gclist;689,24891
  GCRef metatable;690,24907
} GChead;691,24926
typedef union GCobj 707,25734
  GChead gch;708,25756
  GCstr str;709,25770
  GCupval uv;710,25783
  lua_State th;711,25797
  GCproto pt;712,25813
  GCfunc fn;713,25827
  GCcdata cd;714,25840
  GCtab tab;715,25854
  GCudata ud;716,25867
} GCobj;717,25881
#define gco2str(720,25954
#define gco2uv(721,26020
#define gco2th(722,26086
#define gco2pt(723,26153
#define gco2func(724,26219
#define gco2cd(725,26286
#define gco2tab(726,26352
#define gco2ud(727,26418
#define obj2gco(730,26553
#define itype(740,26757
#define tvisnil(741,26804
#define itype(743,26847
#define tvisnil(744,26874
#define tvisfalse(746,26922
#define tvistrue(747,26967
#define tvisbool(748,27010
#define tvislightud(750,27082
#define tvislightud(752,27145
#define tvisstr(754,27201
#define tvisfunc(755,27242
#define tvisthread(756,27285
#define tvisproto(757,27332
#define tviscdata(758,27377
#define tvistab(759,27422
#define tvisudata(760,27463
#define tvisnumber(761,27508
#define tvisint(762,27554
#define tvisnum(763,27611
#define tvistruecond(765,27654
#define tvispri(766,27706
#define tvistabud(767,27749
#define tvisgcv(768,27817
#define tvisnan(771,27962
#define tviszero(773,28010
#define tviszero(775,28059
#define tvispzero(777,28128
#define tvismzero(778,28165
#define tvispone(779,28224
#define rawnumequal(780,28282
#define itypemap(784,28392
#define itypemap(787,28494
#define gcval(792,28609
#define gcval(794,28675
#define boolV(796,28717
#define lightudV(798,28791
#define lightudV(801,28893
#define gcV(803,28970
#define strV(804,29018
#define funcV(805,29073
#define threadV(806,29128
#define protoV(807,29187
#define cdataV(808,29244
#define tabV(809,29301
#define udataV(810,29356
#define numV(811,29413
#define intV(812,29460
#define setitype(816,29564
#define setnilV(817,29612
#define setpriV(818,29649
#define setboolV(819,29717
#define setitype(821,29795
#define setnilV(822,29835
#define setboolV(823,29875
#define setpriV(824,29935
static LJ_AINLINE void setlightudV(827,29987
#define checklightudptr(839,30255
#define checklightudptr(842,30363
#define contptr(846,30416
#define setcont(847,30450
#define contptr(849,30530
#define setcont(851,30628
#define contptr(854,30723
#define setcont(855,30757
#define tvchecklive(858,30817
static LJ_AINLINE void setgcVraw(862,30952
static LJ_AINLINE void setgcV(871,31126
#define define_setV(876,31251
define_setV(881,31395
#define setnumV(889,31686
#define setnanV(890,31724
#define setpinfV(891,31781
#define setminfV(892,31839
static LJ_AINLINE void setint64V(903,32054
#define setintptrV(912,32247
#define setintptrV(914,32298
static LJ_AINLINE void copyTV(918,32375
static LJ_AINLINE int32_t lj_num2bit(932,32696
#define lj_num2int(943,32895
static LJ_AINLINE uint64_t lj_num2u64(945,32935
static LJ_AINLINE int32_t numberVint(955,33174
static LJ_AINLINE lua_Number numberVnum(963,33316
LJ_DATA const char *const lj_obj_typename[lj_obj_typename974,33603
LJ_DATA const char *const lj_obj_itypename[lj_obj_itypename975,33662
#define lj_typename(977,33720

vendor/github.com/LuaJIT/LuaJIT/src/lj_opt_dce.c,179
#define lj_opt_dce_c6,152
#define LUA_CORE7,173
#define IR(18,349
static void dce_marksnap(21,458
static void dce_propagate(37,895
void lj_opt_dce(67,1817
#undef IR76,2013

vendor/github.com/LuaJIT/LuaJIT/src/lj_opt_fold.c,3574
#define lj_opt_fold_c8,236
#define LUA_CORE9,258
#define IR(137,5427
#define fins	138,5464
#define fleft	139,5493
#define fright	140,5523
#define knumleft	141,5555
#define knumright	142,5592
#define emitir(145,5687
typedef IRRef (LJ_FASTCALL *FoldFunc)FoldFunc148,5836
#define LJFOLD(151,5954
#define LJFOLDX(152,5972
#define LJFOLDF(153,5991
#define PHIBARRIER(157,6190
#define gcstep_barrier(163,6442
LJFOLD(172,6806
LJFOLD(188,7155
LJFOLD(197,7343
LJFOLD(208,7513
LJFOLD(216,7664
LJFOLD(226,7922
static int32_t kfold_intop(243,8313
LJFOLD(266,9097
LJFOLD(286,9530
LJFOLD(299,9834
LJFOLD(305,9906
LJFOLD(311,10008
LJFOLD(337,10750
static uint64_t kfold_int64arith(347,10942
LJFOLD(368,11596
LJFOLD(380,11887
LJFOLD(402,12530
LJFOLD(418,12891
LJFOLD(428,13051
LJFOLD(438,13224
LJFOLD(466,14048
LJFOLD(480,14326
LJFOLD(487,14487
LJFOLD(495,14626
LJFOLD(503,14811
LJFOLD(524,15446
LJFOLD(555,16530
LJFOLD(571,17012
LJFOLD(592,17688
LJFOLD(631,19037
LJFOLD(650,19654
LJFOLD(667,20126
LJFOLD(711,21561
LJFOLD(733,22143
LJFOLD(748,22451
LJFOLD(762,22792
LJFOLD(768,22882
LJFOLD(774,22995
LJFOLD(780,23121
LJFOLD(794,23550
LJFOLD(806,23868
LJFOLD(812,24011
LJFOLD(818,24145
LJFOLD(825,24305
LJFOLD(842,24803
LJFOLD(855,25068
LJFOLD(861,25188
LJFOLD(867,25301
LJFOLD(873,25416
LJFOLD(881,25603
LJFOLD(893,25895
LJFOLD(915,26483
LJFOLD(926,26805
LJFOLD(932,26898
LJFOLD(941,27128
LJFOLD(959,27683
LJFOLD(969,27876
LJFOLD(978,28046
LJFOLD(987,28206
LJFOLD(996,28407
LJFOLD(1005,28577
LJFOLD(1035,29533
LJFOLD(1045,29758
LJFOLD(1056,29983
LJFOLD(1086,30892
LJFOLD(1106,31375
LJFOLD(1116,31665
LJFOLD(1127,32001
LJFOLD(1150,32614
LJFOLD(1171,33215
LJFOLD(1181,33475
LJFOLD(1199,34022
LJFOLD(1211,34327
LJFOLD(1246,35346
LJFOLD(1273,36108
LJFOLD(1293,36670
LJFOLD(1311,37215
LJFOLD(1321,37395
LJFOLD(1336,37718
LJFOLD(1346,37978
LJFOLD(1358,38250
LJFOLD(1366,38401
static TRef simplify_intmul_k(1377,38679
LJFOLD(1395,39252
LJFOLD(1403,39392
LJFOLD(1415,39650
LJFOLD(1428,39922
LJFOLD(1436,40042
LJFOLD(1445,40263
LJFOLD(1458,40568
LJFOLD(1472,40875
LJFOLD(1483,41101
LJFOLD(1502,41582
LJFOLD(1532,42412
LJFOLD(1545,42715
LJFOLD(1558,43016
LJFOLD(1574,43372
LJFOLD(1604,44130
LJFOLD(1625,44642
LJFOLD(1638,44933
LJFOLD(1653,45296
LJFOLD(1680,46090
LJFOLD(1691,46376
LJFOLD(1709,46833
LJFOLD(1734,47502
LJFOLD(1754,48039
LJFOLD(1777,48599
LJFOLD(1788,48857
LJFOLD(1799,49112
LJFOLD(1826,49875
LJFOLD(1855,50777
LJFOLD(1864,50998
LJFOLD(1879,51522
LJFOLD(1906,52220
LJFOLD(1928,52718
LJFOLD(1948,53384
LJFOLD(1963,53680
LJFOLD(1973,53926
LJFOLD(1996,54528
LJFOLD(2007,54730
static TRef kfold_xload(2017,54992
LJFOLD(2037,55716
#define FOLD_SNEW_MAX_LEN	2046,55915
#define FOLD_SNEW_TYPE8	2047,55987
#define FOLD_SNEW_MAX_LEN	2049,56059
#define FOLD_SNEW_TYPE8	2050,56124
LJFOLD(2099,57758
LJFOLD(2111,58014
LJFOLD(2150,59090
LJFOLD(2161,59283
LJFOLD(2181,60034
LJFOLD(2189,60231
LJFOLD(2197,60437
LJFOLD(2205,60663
LJFOLD(2213,60889
LJFOLD(2225,61228
LJFOLD(2233,61404
LJFOLD(2243,61584
LJFOLD(2252,61818
LJFOLD(2261,62062
LJFOLD(2276,62423
LJFOLD(2286,62737
LJFOLD(2296,63021
LJFOLD(2324,63846
LJFOLD(2331,63974
LJFOLD(2354,64622
LJFOLD(2366,64941
LJFOLD(2383,65423
TRef LJ_FASTCALL lj_opt_cse(2503,69175
TRef LJ_FASTCALL lj_opt_cselim(2533,70114
#undef IR2547,70475
#undef fins2548,70485
#undef fleft2549,70497
#undef fright2550,70510
#undef knumleft2551,70524
#undef knumright2552,70540
#undef emitir2553,70557

vendor/github.com/LuaJIT/LuaJIT/src/lj_opt_loop.c,555
#define lj_opt_loop_c6,107
#define LUA_CORE7,129
#define IR(93,3787
#define emitir(96,3880
#define emitir_raw(99,4010
static void loop_emit_phi(104,4206
static void loop_subst_snap(208,7399
typedef struct LoopState 257,9049
  jit_State *J;J258,9076
  IRRef1 *subst;subst259,9092
  MSize sizesubst;260,9109
} LoopState;261,9128
static void loop_unroll(264,9161
static void loop_undo(380,13374
static TValue *cploop_opt(cploop_opt403,14096
int lj_opt_loop(411,14272
#undef IR445,15354
#undef emitir446,15364
#undef emitir_raw447,15378

vendor/github.com/LuaJIT/LuaJIT/src/lj_opt_mem.c,1410
#define lj_opt_mem_c9,262
#define LUA_CORE10,283
#define IR(23,502
#define fins	24,539
#define fleft	25,568
#define fright	26,598
  ALIAS_NO,35,850
  ALIAS_MAY,36,903
  ALIAS_MUST	37,956
} AliasRet;38,1008
static AliasRet aa_escape(43,1165
static AliasRet aa_table(55,1635
static AliasRet aa_ahref(75,2366
static TRef fwd_ahload(132,4568
static TRef fwd_aload_reassoc(219,7510
TRef LJ_FASTCALL lj_opt_fwd_aload(242,8100
TRef LJ_FASTCALL lj_opt_fwd_hload(252,8303
TRef LJ_FASTCALL lj_opt_fwd_hrefk(261,8466
int LJ_FASTCALL lj_opt_fwd_href_nokey(285,9121
static int fwd_aa_tab_clear(313,9867
int LJ_FASTCALL lj_opt_fwd_tptr(327,10322
TRef LJ_FASTCALL lj_opt_dse_ahstore(341,10698
static AliasRet aa_uref(393,12742
TRef LJ_FASTCALL lj_opt_fwd_uload(411,13412
TRef LJ_FASTCALL lj_opt_dse_ustore(445,14377
static AliasRet aa_fref(506,16476
TRef LJ_FASTCALL lj_opt_fwd_fload(519,16988
TRef LJ_FASTCALL lj_opt_dse_fstore(551,17941
static IRIns *aa_findcnew(aa_findcnew596,19550
static AliasRet aa_cnew(610,19955
static AliasRet aa_xref(623,20407
static IRRef reassoc_trycse(672,22432
static IRRef reassoc_xref(687,22790
TRef LJ_FASTCALL lj_opt_fwd_xload(733,24371
TRef LJ_FASTCALL lj_opt_dse_xstore(801,26489
TRef LJ_FASTCALL lj_opt_fwd_tab_len(850,28287
int lj_opt_fwd_wasnonnil(893,29762
#undef IR930,31216
#undef fins931,31226
#undef fleft932,31238
#undef fright933,31251

vendor/github.com/LuaJIT/LuaJIT/src/lj_opt_narrow.c,1547
#define lj_opt_narrow_c7,185
#define LUA_CORE8,209
#define IR(93,4404
#define fins	94,4442
#define emitir(97,4528
#define emitir_raw(99,4601
#define NARROW_MAX_BACKPROP	183,8940
#define NARROW_MAX_STACK	184,8972
  NARROW_REF,191,9217
  NARROW_CONV,192,9248
  NARROW_SEXT,193,9294
  NARROW_INT	194,9344
typedef uint32_t NarrowIns;197,9415
#define NARROWINS(199,9444
#define narrow_op(200,9494
#define narrow_ref(201,9541
typedef struct NarrowConv 204,9637
  jit_State *J;J205,9665
  NarrowIns *sp;sp206,9708
  NarrowIns *maxsp;maxsp207,9754
  IRRef mode;208,9817
  IRType t;209,9866
  NarrowIns stack[stack210,9923
} NarrowConv;211,10001
static BPropEntry *narrow_bpc_get(narrow_bpc_get214,10071
static void narrow_bpc_set(228,10456
static void narrow_stripov_backprop(239,10751
static int narrow_conv_backprop(265,11647
static IRRef narrow_conv_emit(358,14824
TRef LJ_FASTCALL lj_opt_narrow_convert(406,16727
static TRef narrow_stripov(428,17346
TRef LJ_FASTCALL lj_opt_narrow_index(452,18162
TRef LJ_FASTCALL lj_opt_narrow_toint(467,18793
TRef LJ_FASTCALL lj_opt_narrow_tobit(483,19437
TRef LJ_FASTCALL lj_opt_narrow_cindex(500,20047
static int numisint(515,20616
static TRef conv_str_tonum(521,20771
TRef lj_opt_narrow_arith(533,21189
TRef lj_opt_narrow_unm(550,21932
TRef lj_opt_narrow_mod(562,22323
TRef lj_opt_narrow_pow(583,23044
static int narrow_forl(623,24743
IRType lj_opt_narrow_forl(631,24981
#undef IR649,25625
#undef fins650,25635
#undef emitir651,25647
#undef emitir_raw652,25661

vendor/github.com/LuaJIT/LuaJIT/src/lj_opt_sink.c,383
#define lj_opt_sink_c6,125
#define LUA_CORE7,147
#define IR(19,346
static IRIns *sink_checkalloc(sink_checkalloc22,452
static int sink_phidep(39,1066
static int sink_checkphi(49,1383
static void sink_mark_ins(74,2194
static void sink_mark_snap(136,4235
static void sink_remark_phi(148,4578
static void sink_sweep_ins(166,5090
void lj_opt_sink(233,6849
#undef IR249,7312

vendor/github.com/LuaJIT/LuaJIT/src/lj_opt_split.c,558
#define lj_opt_split_c6,146
#define LUA_CORE7,169
#define IR(96,3555
static IRRef split_emit(99,3661
static IRRef split_num2int(111,3929
static IRRef split_call_l(130,4521
static IRRef split_call_li(146,5041
static IRRef split_call_ll(162,5616
static IRRef split_ptr(183,6458
static IRRef split_bitshift(200,6945
static IRRef split_bitop(271,8913
static void split_subst_snap(312,9876
static void split_ir(325,10293
static TValue *cpsplit(cpsplit814,25528
static int split_needsplit(824,25800
void lj_opt_split(849,26484
#undef IR868,26987

vendor/github.com/LuaJIT/LuaJIT/src/lj_parse.c,7880
#define lj_parse_c9,267
#define LUA_CORE10,286
  VKNIL,36,840
  VKFALSE,37,849
  VKTRUE,38,860
  VKSTR,39,870
  VKNUM,40,905
  VKLAST 41,940
  VKLAST = VKNUM,41,940
  VKCDATA,42,958
  VLOCAL,44,1073
  VUPVAL,45,1131
  VGLOBAL,46,1188
  VINDEXED,47,1225
  VJMP,48,1300
  VRELOCABLE,49,1337
  VNONRELOC,50,1379
  VCALL,51,1421
  VVOID52,1470
} ExpKind;53,1478
typedef struct ExpDesc 56,1519
      uint32_t info;59,1567
      uint32_t aux;60,1608
    } s;61,1650
    TValue nval;62,1659
    GCstr *sval;sval63,1696
  } u;64,1733
  ExpKind k;65,1740
  BCPos t;66,1753
  BCPos f;67,1797
} ExpDesc;68,1842
#define expr_hasjump(71,1884
#define expr_isk(73,1929
#define expr_isk_nojump(74,1969
#define expr_isnumk(75,2030
#define expr_isnumk_nojump(76,2072
#define expr_isstrk(77,2139
#define expr_numtv(79,2182
#define expr_numberV(80,2247
static LJ_AINLINE void expr_init(83,2330
static int expr_numiszero(91,2501
typedef struct FuncScope 98,2673
  struct FuncScope *prev;prev99,2700
  MSize vstart;100,2753
  uint8_t nactvar;101,2809
  uint8_t flags;102,2876
} FuncScope;103,2913
#define FSCOPE_LOOP	105,2927
#define FSCOPE_BREAK	106,2988
#define FSCOPE_GOLA	107,3042
#define FSCOPE_UPVAL	108,3103
#define FSCOPE_NOCLOSE	109,3154
#define NAME_BREAK	111,3213
typedef uint16_t VarIndex;114,3291
#define LJ_MAX_VSTACK	115,3318
#define VSTACK_VAR_RW	118,3397
#define VSTACK_GOTO	119,3445
#define VSTACK_LABEL	120,3491
typedef struct FuncState 123,3558
  GCtab *kt;kt124,3585
  LexState *ls;ls125,3632
  lua_State *L;L126,3669
  FuncScope *bl;bl127,3704
  struct FuncState *prev;prev128,3743
  BCPos pc;129,3795
  BCPos lasttarget;130,3839
  BCPos jpc;131,3905
  BCReg freereg;132,3962
  BCReg nactvar;133,4007
  BCReg nkn,134,4065
  BCReg nkn, nkgc;134,4065
  BCLine linedefined;135,4128
  BCInsLine *bcbase;bcbase136,4196
  BCPos bclim;137,4248
  MSize vbase;138,4296
  uint8_t flags;139,4361
  uint8_t numparams;140,4402
  uint8_t framesize;141,4452
  uint8_t nuv;142,4498
  VarIndex varmap[varmap143,4540
  VarIndex uvmap[uvmap144,4616
  VarIndex uvtmp[uvtmp145,4688
} FuncState;146,4749
typedef enum BinOpr 149,4807
  OPR_ADD,150,4829
  OPR_ADD, OPR_SUB,150,4829
  OPR_ADD, OPR_SUB, OPR_MUL,150,4829
  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV,150,4829
  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD,150,4829
  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,150,4829
  OPR_CONCAT,151,4904
  OPR_NE,152,4918
  OPR_NE, OPR_EQ,152,4918
  OPR_LT,153,4936
  OPR_LT, OPR_GE,153,4936
  OPR_LT, OPR_GE, OPR_LE,153,4936
  OPR_LT, OPR_GE, OPR_LE, OPR_GT,153,4936
  OPR_AND,154,4970
  OPR_AND, OPR_OR,154,4970
  OPR_NOBINOPR155,4989
} BinOpr;156,5004
LJ_NORET LJ_NOINLINE static void err_syntax(168,5616
LJ_NORET LJ_NOINLINE static void err_token(173,5723
LJ_NORET static void err_limit(178,5870
#define checklimit(186,6119
#define checklimitgt(187,6188
#define checkcond(188,6257
#define const_pri(193,6457
#define tvhaskslot(195,6516
#define tvkslot(196,6557
static BCReg const_num(199,6620
static BCReg const_gc(212,6899
static BCReg const_str(226,7239
GCstr *lj_parse_keepstr(lj_parse_keepstr233,7437
void lj_parse_keepcdata(246,7780
static BCPos jmp_next(258,8115
static int jmp_novalue(268,8388
static int jmp_patchtestreg(279,8705
static void jmp_dropval(305,9510
static void jmp_patchins(312,9698
static void jmp_append(323,9983
static void jmp_patchval(339,10357
static void jmp_tohere(353,10807
static void jmp_patch(360,10956
static void bcreg_bump(373,11279
static void bcreg_reserve(384,11520
static void bcreg_free(391,11637
static void expr_free(400,11814
static BCPos bcemit_INS(409,12039
#define bcemit_ABC(428,12633
#define bcemit_AD(429,12706
#define bcemit_AJ(430,12772
#define bcptr(432,12839
static void expr_discharge(437,13035
static void bcemit_nil(470,13926
static void expr_toreg_nobranch(506,14992
static void expr_toreg(558,16424
static void expr_tonextreg(583,17306
static BCReg expr_toanyreg(592,17519
static void expr_toval(607,17985
static void bcemit_store(616,18160
static void bcemit_method(660,19681
static BCPos bcemit_jmp(684,20412
static void invertcond(701,20841
static BCPos bcemit_branch(708,21005
static void bcemit_branch_t(729,21536
static void bcemit_branch_f(747,22046
static int foldarith(767,22631
static void bcemit_arith(787,23176
static void bcemit_comp(824,24439
static void bcemit_binop_left(870,25943
static void bcemit_binop(886,26377
static void bcemit_unop(922,27530
static int lex_opt(986,29251
static void lex_check(996,29409
static void lex_match(1004,29561
static GCstr *lex_str(lex_str1018,29959
#define var_get(1030,30235
static void var_new(1033,30332
#define var_new_lit(1051,31021
#define var_new_fixed(1054,31114
static void var_add(1058,31222
static void var_remove(1072,31521
static BCReg var_lookup_local(1080,31721
static MSize var_lookup_uv(1091,31981
static MSize var_lookup_(1110,32592
#define var_lookup(1135,33400
static MSize gola_new(1141,33585
#define gola_isgoto(1160,34288
#define gola_islabel(1161,34338
#define gola_isgotolabel(1162,34390
static void gola_patch(1165,34495
static void gola_close(1175,34785
static void gola_resolve(1192,35305
static void gola_fixup(1211,35948
static VarInfo *gola_findlabel(gola_findlabel1246,37129
static void fscope_begin(1259,37485
static void fscope_end(1270,37741
static void fscope_uvmark(1296,38517
static void fs_fixup_bc(1308,38818
static void fs_fixup_uv2(1320,39151
static void fs_fixup_k(1337,39646
static void fs_fixup_uv1(1390,40972
static size_t fs_prep_line(1399,41213
static void fs_fixup_line(1405,41382
static size_t fs_prep_var(1439,42367
static void fs_fixup_var(1481,43635
#define fs_prep_line(1490,43926
#define fs_fixup_line(1491,43982
#define fs_prep_var(1493,44092
#define fs_fixup_var(1494,44149
static int bcopisret(1500,44296
static void fs_fixup_ret(1512,44526
static GCproto *fs_finish(fs_finish1550,45725
static void fs_init(1599,47514
static void expr_str(1629,48253
static void expr_index(1636,48389
static void expr_field(1668,49246
static void expr_bracket(1679,49503
static void expr_kvalue(1688,49697
static void expr_table(1701,50008
static BCReg parse_params(1809,53560
static void parse_body(1840,54296
static BCReg expr_list(1873,55462
static void parse_args(1886,55684
static void expr_primary(1933,57033
static void expr_simple(1973,58097
static void synlevel_begin(2018,59184
#define synlevel_end(2024,59307
static BinOpr token2binop(2027,59389
  uint8_t left;2051,59998
  uint8_t right;2052,60036
} priority[priority2053,60075
#define UNARY_PRIORITY	2061,60326
static void expr_unop(2067,60516
static BinOpr expr_binop(2086,60925
static void expr(2107,61512
static void expr_next(2113,61673
static BCPos expr_cond(2121,61809
typedef struct LHSVarList 2133,62069
  ExpDesc v;2134,62097
  struct LHSVarList *prev;prev2135,62132
} LHSVarList;2136,62196
static void assign_hazard(2139,62283
static void assign_adjust(2164,62975
static void parse_assignment(2187,63761
static void parse_call_assign(2224,64925
static void parse_local(2238,65285
static void parse_func(2272,66370
static int parse_isend(2295,67035
static void parse_return(2306,67242
static void parse_break(2344,68582
static void parse_goto(2351,68753
static void parse_label(2363,69131
static void parse_block(2397,70095
static void parse_while(2407,70276
static void parse_repeat(2427,70831
static void parse_for_num(2454,71874
static int predict_next(2495,73294
static void parse_for_iter(2524,74163
static void parse_for(2566,75680
static BCPos parse_then(2585,76231
static void parse_if(2596,76461
static int parse_stmt(2622,77269
static void parse_chunk(2679,78400
GCproto *lj_parse(lj_parse2694,78819

vendor/github.com/LuaJIT/LuaJIT/src/lj_parse.h,26
#define _LJ_PARSE_H7,139

vendor/github.com/LuaJIT/LuaJIT/src/lj_profile.c,1642
#define lj_profile_c6,105
#define LUA_CORE7,126
#define profile_lock(29,448
#define profile_unlock(30,484
#define profile_lock(39,636
#define profile_unlock(40,691
#define WIN32_LEAN_AND_MEAN44,777
typedef unsigned int 51,896
#define profile_lock(52,953
#define profile_unlock(53,1010
typedef struct ProfileState 58,1100
  global_State *g;g59,1130
  luaJIT_profile_callback cb;60,1192
  void *data;data61,1247
  SBuf sb;62,1293
  int interval;63,1343
  int samples;64,1400
  int vmstate;65,1460
  struct sigaction oldsa;67,1545
  pthread_mutex_t lock;69,1626
  pthread_t thread;70,1682
  int abort;71,1723
  HINSTANCE wmm;74,1811
  WMM_TPFUNC wmm_tbp;75,1857
  WMM_TPFUNC wmm_tep;76,1918
  CRITICAL_SECTION lock;78,1984
  HANDLE thread;79,2040
  int abort;80,2078
} ProfileState;82,2126
static ProfileState profile_state;90,2417
#define LJ_PROFILE_INTERVAL_DEFAULT	93,2500
void LJ_FASTCALL lj_profile_hook_enter(98,2644
void LJ_FASTCALL lj_profile_hook_leave(110,2856
void LJ_FASTCALL lj_profile_interpreter(126,3220
static void profile_trigger(149,3876
static void profile_signal(173,4522
static void profile_timer_start(180,4642
static void profile_timer_stop(195,5107
static void *profile_thread(profile_thread207,5415
static void profile_timer_start(228,5836
static void profile_timer_stop(236,6055
static DWORD WINAPI profile_thread(246,6250
static void profile_timer_start(265,6620
static void profile_timer_stop(286,7225
LUA_API void luaJIT_profile_start(298,7488
LUA_API void luaJIT_profile_stop(336,8383
LUA_API const char *luaJIT_profile_dumpstack(luaJIT_profile_dumpstack356,8874

vendor/github.com/LuaJIT/LuaJIT/src/lj_profile.h,28
#define _LJ_PROFILE_H7,127

vendor/github.com/LuaJIT/LuaJIT/src/lj_recdef.h,108
static const uint16_t recff_idmap[recff_idmap3,46
static const RecordFunc recff_func[recff_func212,1845

vendor/github.com/LuaJIT/LuaJIT/src/lj_record.c,2678
#define lj_record_c6,118
#define LUA_CORE7,138
#define IR(38,703
#define emitir(41,797
#define emitir_raw(44,927
static void rec_check_ir(50,1149
static void rec_check_slots(85,2269
static TRef sloadt(158,4405
static TRef sload(167,4702
#define getslot(178,5076
static TRef getcurrf(181,5191
int lj_record_objcmp(195,5639
TRef lj_record_constify(218,6468
  LOOPEV_LEAVE,236,6950
  LOOPEV_ENTERLO,237,7002
  LOOPEV_ENTER	238,7075
} LoopEvent;239,7114
static void canonicalize_slots(242,7183
void lj_record_stop(257,7567
static TRef find_kinit(282,8498
static TRef fori_load(328,10281
static TRef fori_arg(339,10675
static int rec_for_direction(354,11048
static LoopEvent rec_for_iter(360,11215
static void rec_for_check(383,11892
static void rec_for_loop(417,13162
static LoopEvent rec_for(457,14591
static LoopEvent rec_iterl(527,16469
static LoopEvent rec_loop(543,16914
static int innerloopleft(551,17121
static void rec_loop_interp(566,17529
static void rec_loop_jit(596,19029
static int rec_profile_need(615,19874
static void rec_profile_ins(637,20356
static void rec_profile_ret(645,20542
static TRef rec_call_specialize(659,20874
static void rec_call_setup(694,22100
void lj_record_call(727,23128
void lj_record_tailcall(739,23441
static int check_downrec_unroll(761,24244
void lj_record_ret(786,24857
static BCReg rec_mm_prep(921,30220
int lj_record_mm_lookup(937,30730
static TRef rec_mm_arith(1011,33475
static TRef rec_mm_len(1040,34389
static void rec_mm_callcomp(1068,35167
static void rec_mm_equal(1081,35672
static void rec_mm_comp(1110,36819
static void rec_mm_comp_cdata(1163,38704
static void rec_idx_bump(1183,39272
static void rec_idx_abc(1248,41613
static TRef rec_idx_key(1286,42996
static int nommstr(1358,45997
TRef lj_record_idx(1375,46469
static void rec_tsetm(1517,51900
static int rec_upvalue_constify(1545,52658
static TRef rec_upvalue(1570,53279
static void check_call_unroll(1646,55782
static void rec_func_setup(1680,56980
static void rec_func_vararg(1696,57505
static void rec_func_lua(1720,58256
static void rec_func_jit(1727,58400
static int select_detect(1750,59222
static void rec_varg(1765,59650
static TRef rec_tnew(1867,63547
static TRef rec_cat(1884,64080
static void rec_comp_prep(1933,65875
static void rec_comp_fixup(1942,66142
void lj_record_ins(1963,66943
#define rav	2049,69375
#define rbv	2050,69398
#define rcv	2051,69421
#undef rav2469,81652
#undef rbv2470,81663
#undef rcv2471,81674
static const BCIns *rec_setup_root(rec_setup_root2481,81988
void lj_record_setup(2537,83439
#undef IR2644,87013
#undef emitir_raw2645,87023
#undef emitir2646,87041

vendor/github.com/LuaJIT/LuaJIT/src/lj_record.h,345
#define _LJ_RECORD_H7,139
typedef struct RecordIndex 14,267
  TValue tabv;15,296
  TValue keyv;16,362
  TValue valv;17,406
  TValue mobjv;18,459
  GCtab *mtv;mtv19,518
  cTValue *oldv;oldv20,574
  TRef tab;21,639
  TRef key;22,695
  TRef val;23,729
  TRef mt;24,793
  TRef mobj;25,832
  int idxchain;26,881
} RecordIndex;27,949

vendor/github.com/LuaJIT/LuaJIT/src/lj_snap.c,1126
#define lj_snap_c6,100
#define LUA_CORE7,118
#define emitir(30,522
#define emitir_raw(33,652
void lj_snap_grow_buf_(38,836
void lj_snap_grow_map_(48,1128
static MSize snapshot_slots(63,1596
static MSize snapshot_framelinks(105,2970
static void snapshot_stack(153,4464
void lj_snap_add(172,5091
#define SNAP_USEDEF_SLOTS	196,5832
static BCReg snap_usedef(199,5969
#define USE_SLOT(221,6481
#define DEF_SLOT(222,6517
#undef USE_SLOT291,8864
#undef DEF_SLOT292,8880
void lj_snap_purge(298,8980
void lj_snap_shrink(309,9254
static BloomFilter snap_renamefilter(338,10400
static RegSP snap_renameref(349,10692
IRIns *lj_snap_regspmap(lj_snap_regspmap359,10985
static TRef snap_replay_const(396,11935
static TRef snap_dedup(411,12499
static TRef snap_pref(421,12781
static int snap_sunk_store2(436,13273
static LJ_AINLINE int snap_sunk_store(449,13688
void lj_snap_replay(457,13930
static void snap_restoreval(621,19829
static void snap_restoredata(682,21779
static void snap_unsink(743,23566
const BCIns *lj_snap_restore(lj_snap_restore829,26705
#undef emitir_raw913,29164
#undef emitir914,29182

vendor/github.com/LuaJIT/LuaJIT/src/lj_snap.h,121
#define _LJ_SNAP_H7,119
static LJ_AINLINE void lj_snap_grow_buf(22,627
static LJ_AINLINE void lj_snap_grow_map(27,765

vendor/github.com/LuaJIT/LuaJIT/src/lj_state.c,703
#define lj_state_c9,249
#define LUA_CORE10,268
#define LJ_STACK_MIN	35,762
#define LJ_STACK_MAX	36,819
#define LJ_STACK_START	37,877
#define LJ_STACK_MAXEX	38,944
static void resizestack(56,1782
void lj_state_relimitstack(82,2827
void lj_state_shrinkstack(89,3035
void LJ_FASTCALL lj_state_growstack(101,3475
void LJ_FASTCALL lj_state_growstack1(119,3947
static void stack_init(125,4073
static TValue *cpluaopen(cpluaopen142,4705
static void close_state(160,5274
lua_State *lj_state_newstate(lj_state_newstate184,5994
static TValue *cpfinalize(cpfinalize231,7452
LUA_API void lua_close(241,7655
lua_State *lj_state_new(lj_state_new272,8498
void LJ_FASTCALL lj_state_free(290,8969

vendor/github.com/LuaJIT/LuaJIT/src/lj_state.h,157
#define _LJ_STATE_H7,127
#define incr_top(11,169
#define savestack(14,258
#define restorestack(15,320
static LJ_AINLINE void lj_state_checkstack(22,633

vendor/github.com/LuaJIT/LuaJIT/src/lj_str.c,309
#define lj_str_c6,98
#define LUA_CORE7,115
int32_t LJ_FASTCALL lj_str_cmp(18,387
static LJ_AINLINE int str_fastcmp(41,1033
const char *lj_str_find(lj_str_find62,1604
int lj_str_haspattern(82,2085
void lj_str_resize(96,2521
GCstr *lj_str_new(lj_str_new122,3427
void LJ_FASTCALL lj_str_free(192,5731

vendor/github.com/LuaJIT/LuaJIT/src/lj_str.h,82
#define _LJ_STR_H7,116
#define lj_str_newz(24,610
#define lj_str_newlit(25,666

vendor/github.com/LuaJIT/LuaJIT/src/lj_strfmt.c,1148
#define lj_strfmt_c8,120
#define LUA_CORE9,140
static const uint8_t strfmt_map[strfmt_map20,365
SFormat LJ_FASTCALL lj_strfmt_parse(28,670
#define WINT_R(92,2393
char * LJ_FASTCALL lj_strfmt_wint(96,2534
#undef WINT_R126,3300
char * LJ_FASTCALL lj_strfmt_wptr(129,3346
char * LJ_FASTCALL lj_strfmt_wuleb128(149,3840
const char *lj_strfmt_wstrnum(lj_strfmt_wstrnum158,4080
SBuf * LJ_FASTCALL lj_strfmt_putint(178,4588
SBuf * LJ_FASTCALL lj_strfmt_putnum(186,4776
SBuf * LJ_FASTCALL lj_strfmt_putptr(192,4896
SBuf * LJ_FASTCALL lj_strfmt_putquoted(199,5081
SBuf *lj_strfmt_putfchar(lj_strfmt_putfchar231,5944
SBuf *lj_strfmt_putfstr(lj_strfmt_putfstr243,6286
SBuf *lj_strfmt_putfxint(lj_strfmt_putfxint256,6769
SBuf *lj_strfmt_putfnum_int(lj_strfmt_putfnum_int329,9177
SBuf *lj_strfmt_putfnum_uint(lj_strfmt_putfnum_uint339,9503
GCstr * LJ_FASTCALL lj_strfmt_int(352,9857
GCstr * LJ_FASTCALL lj_strfmt_number(360,10082
GCstr * LJ_FASTCALL lj_strfmt_char(367,10271
GCstr * LJ_FASTCALL lj_strfmt_obj(376,10442
const char *lj_strfmt_pushvf(lj_strfmt_pushvf416,11806
const char *lj_strfmt_pushf(lj_strfmt_pushf463,13059

vendor/github.com/LuaJIT/LuaJIT/src/lj_strfmt.h,1882
#define _LJ_STRFMT_H7,121
typedef uint32_t SFormat;11,164
typedef struct FormatState 14,243
  const uint8_t *p;p15,272
  const uint8_t *e;e16,329
  const char *str;str17,377
  MSize len;18,427
} FormatState;19,471
typedef enum FormatType 22,517
  STRFMT_EOF,23,543
  STRFMT_EOF, STRFMT_ERR,23,543
  STRFMT_EOF, STRFMT_ERR, STRFMT_LIT,23,543
  STRFMT_INT,24,581
  STRFMT_INT, STRFMT_UINT,24,581
  STRFMT_INT, STRFMT_UINT, STRFMT_NUM,24,581
  STRFMT_INT, STRFMT_UINT, STRFMT_NUM, STRFMT_STR,24,581
  STRFMT_INT, STRFMT_UINT, STRFMT_NUM, STRFMT_STR, STRFMT_CHAR,24,581
  STRFMT_INT, STRFMT_UINT, STRFMT_NUM, STRFMT_STR, STRFMT_CHAR, STRFMT_PTR24,581
} FormatType;25,656
#define STRFMT_T_HEX	28,712
#define STRFMT_T_OCT	29,758
#define STRFMT_T_FP_A	30,804
#define STRFMT_T_FP_E	31,850
#define STRFMT_T_FP_F	32,896
#define STRFMT_T_FP_G	33,942
#define STRFMT_T_QUOTED	34,988
#define STRFMT_F_LEFT	37,1057
#define STRFMT_F_PLUS	38,1086
#define STRFMT_F_ZERO	39,1115
#define STRFMT_F_SPACE	40,1144
#define STRFMT_F_ALT	41,1174
#define STRFMT_F_UPPER	42,1202
#define STRFMT_SH_WIDTH	45,1264
#define STRFMT_SH_PREC	46,1291
#define STRFMT_TYPE(48,1318
#define STRFMT_WIDTH(49,1369
#define STRFMT_PREC(50,1429
#define STRFMT_FP(51,1495
#define STRFMT_A	54,1578
#define STRFMT_C	55,1622
#define STRFMT_D	56,1653
#define STRFMT_E	57,1683
#define STRFMT_F	58,1727
#define STRFMT_G	59,1771
#define STRFMT_I	60,1815
#define STRFMT_O	61,1841
#define STRFMT_P	62,1885
#define STRFMT_Q	63,1915
#define STRFMT_S	64,1961
#define STRFMT_U	65,1991
#define STRFMT_X	66,2022
#define STRFMT_G14	67,2066
#define STRFMT_MAXBUF_XINT	70,2170
#define STRFMT_MAXBUF_INT	71,2243
#define STRFMT_MAXBUF_NUM	72,2310
#define STRFMT_MAXBUF_PTR	73,2379
static LJ_AINLINE void lj_strfmt_init(78,2537
LJ_FUNC const char *lj_strfmt_pushf(lj_strfmt_pushf119,4378

vendor/github.com/LuaJIT/LuaJIT/src/lj_strfmt_num.c,972
#define lj_strfmt_num_c9,179
#define LUA_CORE10,203
#define RESCALE_EXPONENTS(20,454
#define ONE_E_P(26,744
#define ONE_E_N(27,773
static const int16_t rescale_e[rescale_e28,802
static const double rescale_n[rescale_n29,866
#undef ONE_E_N30,941
#undef ONE_E_P31,956
static const int8_t four_ulp_m_e[four_ulp_m_e37,1131
static uint32_t ndigits_dec_threshold[ndigits_dec_threshold55,2294
static MSize ndigits_dec(63,2584
#define WINT_R(69,2749
static char *lj_strfmt_wuint9(lj_strfmt_wuint973,2907
#undef WINT_R90,3254
#define ND_MUL2K_MAX_SHIFT	116,4305
#define ND_MUL2K_DIV1E9(117,4335
#define ND_MUL2K_MAX_SHIFT	119,4403
#define ND_MUL2K_DIV1E9(120,4433
static uint32_t nd_mul2k(124,4577
static uint32_t nd_div2k(157,5591
static uint32_t nd_add_m10e(214,7282
static int nd_similar(246,8030
static char *lj_strfmt_wfnum(lj_strfmt_wfnum269,8760
SBuf *lj_strfmt_putfnum(lj_strfmt_putfnum577,19909
GCstr * LJ_FASTCALL lj_strfmt_num(586,20149

vendor/github.com/LuaJIT/LuaJIT/src/lj_strscan.c,655
#define lj_strscan_c8,117
#define LUA_CORE9,138
#define STRSCAN_DIG	62,2635
#define STRSCAN_MAXDIG	63,2660
#define STRSCAN_DDIG	64,2722
#define STRSCAN_DMASK	65,2759
#define DNEXT(68,2834
#define DPREV(69,2877
#define DLEN(70,2920
#define casecmp(72,2983
static void strscan_double(75,3060
static StrScanFmt strscan_hex(104,3944
static StrScanFmt strscan_oct(150,5259
static StrScanFmt strscan_dec(181,6012
static StrScanFmt strscan_bin(330,10343
StrScanFmt lj_strscan_scan(373,11545
int LJ_FASTCALL lj_strscan_num(525,16082
int LJ_FASTCALL lj_strscan_number(534,16343
#undef DNEXT544,16671
#undef DPREV545,16684
#undef DLEN546,16697

vendor/github.com/LuaJIT/LuaJIT/src/lj_strscan.h,544
#define _LJ_STRSCAN_H7,120
#define STRSCAN_OPT_TOINT	12,209
#define STRSCAN_OPT_TONUM	13,280
#define STRSCAN_OPT_IMAG	14,344
#define STRSCAN_OPT_LL	15,374
#define STRSCAN_OPT_C	16,403
  STRSCAN_ERROR,20,470
  STRSCAN_NUM,21,487
  STRSCAN_NUM, STRSCAN_IMAG,21,487
  STRSCAN_INT,22,516
  STRSCAN_INT, STRSCAN_U32,22,516
  STRSCAN_INT, STRSCAN_U32, STRSCAN_I64,22,516
  STRSCAN_INT, STRSCAN_U32, STRSCAN_I64, STRSCAN_U64,22,516
} StrScanFmt;23,570
#define lj_strscan_number(30,814
static LJ_AINLINE int lj_strscan_numberobj(34,949

vendor/github.com/LuaJIT/LuaJIT/src/lj_tab.c,1403
#define lj_tab_c9,245
#define LUA_CORE10,262
static LJ_AINLINE Node *hashmask(hashmask20,516
#define hashstr(27,705
#define hashlohi(29,752
#define hashnum(30,815
#define hashgcref(32,897
#define hashgcref(35,995
static Node *hashkey(hashkey39,1154
static LJ_AINLINE void newhpart(56,1641
static LJ_AINLINE void clearhpart(77,2232
static LJ_AINLINE void clearapart(91,2541
static GCtab *newtab(newtab100,2780
GCtab *lj_tab_new(lj_tab_new158,4503
GCtab *lj_tab_new_ah(lj_tab_new_ah167,4736
GCtab * LJ_FASTCALL lj_tab_new1(173,4881
GCtab * LJ_FASTCALL lj_tab_dup(183,5102
void LJ_FASTCALL lj_tab_clear(222,6357
void LJ_FASTCALL lj_tab_free(233,6563
void lj_tab_resize(248,7092
static uint32_t countint(311,9173
static uint32_t countarray(325,9499
static uint32_t counthash(347,9942
static uint32_t bestasize(362,10296
static void rehashtab(374,10596
void lj_tab_rehash(389,11006
void lj_tab_reasize(395,11090
cTValue * LJ_FASTCALL lj_tab_getinth(402,11308
cTValue *lj_tab_getstr(lj_tab_getstr415,11563
cTValue *lj_tab_get(lj_tab_get425,11767
TValue *lj_tab_newkey(lj_tab_newkey460,12655
TValue *lj_tab_setinth(lj_tab_setinth512,14423
TValue *lj_tab_setstr(lj_tab_setstr525,14697
TValue *lj_tab_set(lj_tab_set537,14968
static uint32_t keyindex(567,15834
int lj_tab_next(598,16865
static MSize unbound_search(620,17538
MSize LJ_FASTCALL lj_tab_len(649,18400

vendor/github.com/LuaJIT/LuaJIT/src/lj_tab.h,313
#define _LJ_TAB_H7,115
#define HASH_BIAS	12,211
#define HASH_ROT1	13,243
#define HASH_ROT2	14,264
#define HASH_ROT3	15,284
static LJ_AINLINE uint32_t hashrot(18,355
#define hsize2hbits(34,783
#define inarray(63,2114
#define arrayslot(64,2174
#define lj_tab_getint(65,2225
#define lj_tab_setint(67,2334

vendor/github.com/LuaJIT/LuaJIT/src/lj_target.h,1254
#define _LJ_TARGET_H7,130
typedef uint32_t Reg;15,314
#define RID_NONE	21,545
#define RID_MASK	22,568
#define RID_INIT	23,591
#define RID_SINK	24,629
#define RID_SUNK	25,660
#define ra_noreg(27,692
#define ra_hasreg(28,730
#define ra_hashint(31,842
#define ra_gethint(32,882
#define ra_sethint(33,929
#define ra_samehint(34,984
#define SPS_NONE	37,1101
#define ra_hasspill(39,1122
typedef uint32_t RegSP;42,1228
#define REGSP(44,1253
#define REGSP_HINT(45,1293
#define REGSP_INIT	46,1331
#define regsp_reg(48,1371
#define regsp_spill(49,1407
#define regsp_used(50,1444
typedef uint64_t RegSet;59,1789
typedef uint32_t RegSet;61,1820
#define RID2RSET(64,1853
#define RSET_EMPTY	65,1895
#define RSET_RANGE(66,1927
#define rset_test(68,1989
#define rset_set(69,2039
#define rset_clear(70,2084
#define rset_exclude(71,2131
#define rset_picktop(73,2234
#define rset_pickbot(74,2291
#define rset_picktop(76,2349
#define rset_pickbot(77,2392
#define REGCOST_PHI_WEIGHT	122,4746
typedef uint32_t RegCost;125,4824
#define REGCOST(128,4886
#define regcost_ref(129,4956
#define REGCOST_T(131,4997
#define REGCOST_REF_T(133,5099
static LJ_AINLINE char *exitstub_addr_(exitstub_addr_153,5618
#define exitstub_addr(160,5923

vendor/github.com/LuaJIT/LuaJIT/src/lj_target_arm.h,9466
#define _LJ_TARGET_ARM_H7,132
#define GPRDEF(11,238
#define FPRDEF(15,377
#define FPRDEF(17,401
#define VRIDDEF(21,536
#define RIDENUM(23,556
  GPRDEF(26,598
  GPRDEF(RIDENUM)26,598
  FPRDEF(27,657
  FPRDEF(RIDENUM)27,657
  RID_MAX,28,715
  RID_TMP 29,726
  RID_TMP = RID_LR,29,726
  RID_RET 32,776
  RID_RET = RID_R0,32,776
  RID_RETLO 33,796
  RID_RETLO = RID_R0,33,796
  RID_RETHI 34,818
  RID_RETHI = RID_R1,34,818
  RID_FPRET 36,854
  RID_FPRET = RID_R0,36,854
  RID_FPRET 38,882
  RID_FPRET = RID_D0,38,882
  RID_BASE 42,974
  RID_BASE = RID_R9,42,974
  RID_LPC 43,1020
  RID_LPC = RID_R6,43,1020
  RID_DISPATCH 44,1063
  RID_DISPATCH = RID_R7,44,1063
  RID_LREG 45,1122
  RID_LREG = RID_R8,45,1122
  RID_MIN_GPR 48,1226
  RID_MIN_GPR = RID_R0,48,1226
  RID_MAX_GPR 49,1250
  RID_MAX_GPR = RID_PC+RID_PC49,1250
  RID_MIN_FPR 50,1276
  RID_MIN_FPR = RID_MAX_GPR,50,1276
  RID_MAX_FPR 52,1319
  RID_MAX_FPR = RID_MIN_FPR,52,1319
  RID_MAX_FPR 54,1354
  RID_MAX_FPR = RID_D15+RID_D1554,1354
  RID_NUM_GPR 56,1388
  RID_NUM_GPR = RID_MAX_GPR 56,1388
  RID_NUM_GPR = RID_MAX_GPR - RID_MIN_GPR,56,1388
  RID_NUM_FPR 57,1431
  RID_NUM_FPR = RID_MAX_FPR 57,1431
  RID_NUM_FPR = RID_MAX_FPR - RID_MIN_FPR57,1431
#define RID_NUM_KREF	60,1477
#define RID_MIN_KREF	61,1511
#define RSET_GPR	66,1676
#define RSET_GPREVEN 67,1731
#define RSET_GPRODD 70,1867
#define RSET_FPR	74,2016
#define RSET_FPR	76,2042
#define RSET_ALL	78,2106
#define RSET_INIT	79,2144
#define RSET_SCRATCH_GPR_	82,2243
#define RSET_SCRATCH_GPR	84,2335
#define RSET_SCRATCH_GPR	86,2403
#define RSET_SCRATCH_FPR	89,2467
#define RSET_SCRATCH_FPR	91,2500
#define RSET_SCRATCH	93,2563
#define REGARG_FIRSTGPR	94,2621
#define REGARG_LASTGPR	95,2653
#define REGARG_NUMGPR	96,2684
#define REGARG_FIRSTFPR	98,2727
#define REGARG_LASTFPR	99,2754
#define REGARG_NUMFPR	100,2780
#define REGARG_FIRSTFPR	102,2811
#define REGARG_LASTFPR	103,2843
#define REGARG_NUMFPR	104,2874
#define SPS_FIXED	116,3261
#define SPS_FIRST	117,3281
#define SPOFS_TMP	119,3302
#define sps_scale(121,3323
#define sps_align(122,3370
  lua_Number fpr[fpr129,3598
  int32_t gpr[gpr131,3668
  int32_t spill[spill132,3729
} ExitState;133,3771
#define EXITSTATE_PCREG	136,3864
#define EXITSTATE_CHECKEXIT	138,3942
#define EXITSTUB_SPACING 140,3973
#define EXITSTUBS_PER_GROUP 141,4007
#define ARMF_CC(146,4149
#define ARMF_N(147,4209
#define ARMF_D(148,4239
#define ARMF_S(149,4269
#define ARMF_M(150,4298
#define ARMF_SH(151,4320
#define ARMF_RSH(152,4370
typedef enum ARMIns 154,4428
  ARMI_CCAL 155,4450
  ARMI_CCAL = 0xe0000000,xe0000000155,4450
  ARMI_S 156,4476
  ARMI_S = 0x000100000,x000100000156,4476
  ARMI_K12 157,4500
  ARMI_K12 = 0x02000000,x02000000157,4500
  ARMI_KNEG 158,4525
  ARMI_KNEG = 0x00200000,x00200000158,4525
  ARMI_LS_W 159,4551
  ARMI_LS_W = 0x00200000,x00200000159,4551
  ARMI_LS_U 160,4577
  ARMI_LS_U = 0x00800000,x00800000160,4577
  ARMI_LS_P 161,4603
  ARMI_LS_P = 0x01000000,x01000000161,4603
  ARMI_LS_R 162,4629
  ARMI_LS_R = 0x02000000,x02000000162,4629
  ARMI_LSX_I 163,4655
  ARMI_LSX_I = 0x00400000,x00400000163,4655
  ARMI_AND 165,4683
  ARMI_AND = 0xe0000000,xe0000000165,4683
  ARMI_EOR 166,4708
  ARMI_EOR = 0xe0200000,xe0200000166,4708
  ARMI_SUB 167,4733
  ARMI_SUB = 0xe0400000,xe0400000167,4733
  ARMI_RSB 168,4758
  ARMI_RSB = 0xe0600000,xe0600000168,4758
  ARMI_ADD 169,4783
  ARMI_ADD = 0xe0800000,xe0800000169,4783
  ARMI_ADC 170,4808
  ARMI_ADC = 0xe0a00000,xe0a00000170,4808
  ARMI_SBC 171,4833
  ARMI_SBC = 0xe0c00000,xe0c00000171,4833
  ARMI_RSC 172,4858
  ARMI_RSC = 0xe0e00000,xe0e00000172,4858
  ARMI_TST 173,4883
  ARMI_TST = 0xe1100000,xe1100000173,4883
  ARMI_TEQ 174,4908
  ARMI_TEQ = 0xe1300000,xe1300000174,4908
  ARMI_CMP 175,4933
  ARMI_CMP = 0xe1500000,xe1500000175,4933
  ARMI_CMN 176,4958
  ARMI_CMN = 0xe1700000,xe1700000176,4958
  ARMI_ORR 177,4983
  ARMI_ORR = 0xe1800000,xe1800000177,4983
  ARMI_MOV 178,5008
  ARMI_MOV = 0xe1a00000,xe1a00000178,5008
  ARMI_BIC 179,5033
  ARMI_BIC = 0xe1c00000,xe1c00000179,5033
  ARMI_MVN 180,5058
  ARMI_MVN = 0xe1e00000,xe1e00000180,5058
  ARMI_NOP 182,5084
  ARMI_NOP = 0xe1a00000,xe1a00000182,5084
  ARMI_MUL 184,5110
  ARMI_MUL = 0xe0000090,xe0000090184,5110
  ARMI_SMULL 185,5135
  ARMI_SMULL = 0xe0c00090,xe0c00090185,5135
  ARMI_LDR 187,5163
  ARMI_LDR = 0xe4100000,xe4100000187,5163
  ARMI_LDRB 188,5188
  ARMI_LDRB = 0xe4500000,xe4500000188,5188
  ARMI_LDRH 189,5214
  ARMI_LDRH = 0xe01000b0,xe01000b0189,5214
  ARMI_LDRSB 190,5240
  ARMI_LDRSB = 0xe01000d0,xe01000d0190,5240
  ARMI_LDRSH 191,5267
  ARMI_LDRSH = 0xe01000f0,xe01000f0191,5267
  ARMI_LDRD 192,5294
  ARMI_LDRD = 0xe00000d0,xe00000d0192,5294
  ARMI_STR 193,5320
  ARMI_STR = 0xe4000000,xe4000000193,5320
  ARMI_STRB 194,5345
  ARMI_STRB = 0xe4400000,xe4400000194,5345
  ARMI_STRH 195,5371
  ARMI_STRH = 0xe00000b0,xe00000b0195,5371
  ARMI_STRD 196,5397
  ARMI_STRD = 0xe00000f0,xe00000f0196,5397
  ARMI_PUSH 197,5423
  ARMI_PUSH = 0xe92d0000,xe92d0000197,5423
  ARMI_B 199,5450
  ARMI_B = 0xea000000,xea000000199,5450
  ARMI_BL 200,5473
  ARMI_BL = 0xeb000000,xeb000000200,5473
  ARMI_BLX 201,5497
  ARMI_BLX = 0xfa000000,xfa000000201,5497
  ARMI_BLXr 202,5522
  ARMI_BLXr = 0xe12fff30,xe12fff30202,5522
  ARMI_REV 205,5563
  ARMI_REV = 0xe6bf0f30,xe6bf0f30205,5563
  ARMI_SXTB 206,5588
  ARMI_SXTB = 0xe6af0070,xe6af0070206,5588
  ARMI_SXTH 207,5614
  ARMI_SXTH = 0xe6bf0070,xe6bf0070207,5614
  ARMI_UXTB 208,5640
  ARMI_UXTB = 0xe6ef0070,xe6ef0070208,5640
  ARMI_UXTH 209,5666
  ARMI_UXTH = 0xe6ff0070,xe6ff0070209,5666
  ARMI_MOVW 212,5709
  ARMI_MOVW = 0xe3000000,xe3000000212,5709
  ARMI_MOVT 213,5735
  ARMI_MOVT = 0xe3400000,xe3400000213,5735
  ARMI_VMOV_D 216,5774
  ARMI_VMOV_D = 0xeeb00b40,xeeb00b40216,5774
  ARMI_VMOV_S 217,5802
  ARMI_VMOV_S = 0xeeb00a40,xeeb00a40217,5802
  ARMI_VMOVI_D 218,5830
  ARMI_VMOVI_D = 0xeeb00b00,xeeb00b00218,5830
  ARMI_VMOV_R_S 220,5860
  ARMI_VMOV_R_S = 0xee100a10,xee100a10220,5860
  ARMI_VMOV_S_R 221,5890
  ARMI_VMOV_S_R = 0xee000a10,xee000a10221,5890
  ARMI_VMOV_RR_D 222,5920
  ARMI_VMOV_RR_D = 0xec500b10,xec500b10222,5920
  ARMI_VMOV_D_RR 223,5951
  ARMI_VMOV_D_RR = 0xec400b10,xec400b10223,5951
  ARMI_VADD_D 225,5983
  ARMI_VADD_D = 0xee300b00,xee300b00225,5983
  ARMI_VSUB_D 226,6011
  ARMI_VSUB_D = 0xee300b40,xee300b40226,6011
  ARMI_VMUL_D 227,6039
  ARMI_VMUL_D = 0xee200b00,xee200b00227,6039
  ARMI_VMLA_D 228,6067
  ARMI_VMLA_D = 0xee000b00,xee000b00228,6067
  ARMI_VMLS_D 229,6095
  ARMI_VMLS_D = 0xee000b40,xee000b40229,6095
  ARMI_VNMLS_D 230,6123
  ARMI_VNMLS_D = 0xee100b00,xee100b00230,6123
  ARMI_VDIV_D 231,6152
  ARMI_VDIV_D = 0xee800b00,xee800b00231,6152
  ARMI_VABS_D 233,6181
  ARMI_VABS_D = 0xeeb00bc0,xeeb00bc0233,6181
  ARMI_VNEG_D 234,6209
  ARMI_VNEG_D = 0xeeb10b40,xeeb10b40234,6209
  ARMI_VSQRT_D 235,6237
  ARMI_VSQRT_D = 0xeeb10bc0,xeeb10bc0235,6237
  ARMI_VCMP_D 237,6267
  ARMI_VCMP_D = 0xeeb40b40,xeeb40b40237,6267
  ARMI_VCMPZ_D 238,6295
  ARMI_VCMPZ_D = 0xeeb50b40,xeeb50b40238,6295
  ARMI_VMRS 240,6325
  ARMI_VMRS = 0xeef1fa10,xeef1fa10240,6325
  ARMI_VCVT_S32_F32 242,6352
  ARMI_VCVT_S32_F32 = 0xeebd0ac0,xeebd0ac0242,6352
  ARMI_VCVT_S32_F64 243,6386
  ARMI_VCVT_S32_F64 = 0xeebd0bc0,xeebd0bc0243,6386
  ARMI_VCVT_U32_F32 244,6420
  ARMI_VCVT_U32_F32 = 0xeebc0ac0,xeebc0ac0244,6420
  ARMI_VCVT_U32_F64 245,6454
  ARMI_VCVT_U32_F64 = 0xeebc0bc0,xeebc0bc0245,6454
  ARMI_VCVT_F32_S32 246,6488
  ARMI_VCVT_F32_S32 = 0xeeb80ac0,xeeb80ac0246,6488
  ARMI_VCVT_F64_S32 247,6522
  ARMI_VCVT_F64_S32 = 0xeeb80bc0,xeeb80bc0247,6522
  ARMI_VCVT_F32_U32 248,6556
  ARMI_VCVT_F32_U32 = 0xeeb80a40,xeeb80a40248,6556
  ARMI_VCVT_F64_U32 249,6590
  ARMI_VCVT_F64_U32 = 0xeeb80b40,xeeb80b40249,6590
  ARMI_VCVT_F32_F64 250,6624
  ARMI_VCVT_F32_F64 = 0xeeb70bc0,xeeb70bc0250,6624
  ARMI_VCVT_F64_F32 251,6658
  ARMI_VCVT_F64_F32 = 0xeeb70ac0,xeeb70ac0251,6658
  ARMI_VLDR_S 253,6693
  ARMI_VLDR_S = 0xed100a00,xed100a00253,6693
  ARMI_VLDR_D 254,6721
  ARMI_VLDR_D = 0xed100b00,xed100b00254,6721
  ARMI_VSTR_S 255,6749
  ARMI_VSTR_S = 0xed000a00,xed000a00255,6749
  ARMI_VSTR_D 256,6777
  ARMI_VSTR_D = 0xed000b00,xed000b00256,6777
} ARMIns;257,6805
typedef enum ARMShift 259,6816
  ARMSH_LSL,260,6840
  ARMSH_LSL, ARMSH_LSR,260,6840
  ARMSH_LSL, ARMSH_LSR, ARMSH_ASR,260,6840
  ARMSH_LSL, ARMSH_LSR, ARMSH_ASR, ARMSH_ROR260,6840
} ARMShift;261,6885
typedef enum ARMCC 264,6925
  CC_EQ,265,6946
  CC_EQ, CC_NE,265,6946
  CC_EQ, CC_NE, CC_CS,265,6946
  CC_EQ, CC_NE, CC_CS, CC_CC,265,6946
  CC_EQ, CC_NE, CC_CS, CC_CC, CC_MI,265,6946
  CC_EQ, CC_NE, CC_CS, CC_CC, CC_MI, CC_PL,265,6946
  CC_EQ, CC_NE, CC_CS, CC_CC, CC_MI, CC_PL, CC_VS,265,6946
  CC_EQ, CC_NE, CC_CS, CC_CC, CC_MI, CC_PL, CC_VS, CC_VC,265,6946
  CC_HI,266,7004
  CC_HI, CC_LS,266,7004
  CC_HI, CC_LS, CC_GE,266,7004
  CC_HI, CC_LS, CC_GE, CC_LT,266,7004
  CC_HI, CC_LS, CC_GE, CC_LT, CC_GT,266,7004
  CC_HI, CC_LS, CC_GE, CC_LT, CC_GT, CC_LE,266,7004
  CC_HI, CC_LS, CC_GE, CC_LT, CC_GT, CC_LE, CC_AL,266,7004
  CC_HS 267,7055
  CC_HS = CC_CS,267,7055
  CC_HS = CC_CS, CC_LO 267,7055
  CC_HS = CC_CS, CC_LO = CC_CC267,7055
} ARMCC;268,7086

vendor/github.com/LuaJIT/LuaJIT/src/lj_target_arm64.h,14316
#define _LJ_TARGET_ARM64_H7,136
#define GPRDEF(11,244
#define FPRDEF(16,489
#define VRIDDEF(21,737
#define RIDENUM(23,757
  GPRDEF(26,799
  GPRDEF(RIDENUM)26,799
  FPRDEF(27,858
  FPRDEF(RIDENUM)27,858
  RID_MAX,28,916
  RID_TMP 29,927
  RID_TMP = RID_LR,29,927
  RID_ZERO 30,947
  RID_ZERO = RID_SP,30,947
  RID_RET 33,998
  RID_RET = RID_X0,33,998
  RID_FPRET 34,1018
  RID_FPRET = RID_D0,34,1018
  RID_BASE 37,1103
  RID_BASE = RID_X19,37,1103
  RID_LPC 38,1150
  RID_LPC = RID_X21,38,1150
  RID_GL 39,1194
  RID_GL = RID_X22,39,1194
  RID_LREG 40,1237
  RID_LREG = RID_X23,40,1237
  RID_MIN_GPR 43,1342
  RID_MIN_GPR = RID_X0,43,1342
  RID_MAX_GPR 44,1366
  RID_MAX_GPR = RID_SP+RID_SP44,1366
  RID_MIN_FPR 45,1392
  RID_MIN_FPR = RID_MAX_GPR,45,1392
  RID_MAX_FPR 46,1421
  RID_MAX_FPR = RID_D31+RID_D3146,1421
  RID_NUM_GPR 47,1448
  RID_NUM_GPR = RID_MAX_GPR 47,1448
  RID_NUM_GPR = RID_MAX_GPR - RID_MIN_GPR,47,1448
  RID_NUM_FPR 48,1491
  RID_NUM_FPR = RID_MAX_FPR 48,1491
  RID_NUM_FPR = RID_MAX_FPR - RID_MIN_FPR48,1491
#define RID_NUM_KREF	51,1537
#define RID_MIN_KREF	52,1571
#define RSET_FIXED 57,1745
#define RSET_GPR	60,1861
#define RSET_FPR	61,1930
#define RSET_ALL	62,1984
#define RSET_INIT	63,2021
#define RSET_SCRATCH_GPR	66,2091
#define RSET_SCRATCH_FPR 67,2148
#define RSET_SCRATCH	69,2239
#define REGARG_FIRSTGPR	70,2297
#define REGARG_LASTGPR	71,2329
#define REGARG_NUMGPR	72,2360
#define REGARG_FIRSTFPR	73,2385
#define REGARG_LASTFPR	74,2417
#define REGARG_NUMFPR	75,2448
#define SPS_FIXED	87,2899
#define SPS_FIRST	88,2919
#define SPOFS_TMP	90,2940
#define sps_scale(92,2961
#define sps_align(93,3008
  lua_Number fpr[fpr99,3221
  intptr_t gpr[gpr100,3284
  int32_t spill[spill101,3346
} ExitState;102,3388
#define EXITSTATE_CHECKEXIT	105,3448
static LJ_AINLINE uint32_t *exitstub_trace_addr_(exitstub_trace_addr_108,3530
#define exitstub_trace_addr(114,3781
#define A64I_LE(121,4061
#define A64I_LE(123,4100
#define A64F_D(127,4157
#define A64F_N(128,4179
#define A64F_A(129,4208
#define A64F_M(130,4238
#define A64F_IMMS(131,4268
#define A64F_IMMR(132,4301
#define A64F_U16(133,4334
#define A64F_U12(134,4365
#define A64F_S26(135,4397
#define A64F_S19(136,4421
#define A64F_S14(137,4475
#define A64F_S9(138,4506
#define A64F_BIT(139,4537
#define A64F_SH(140,4569
#define A64F_EX(141,4621
#define A64F_EXSH(142,4666
#define A64F_FP8(143,4729
#define A64F_CC(144,4761
#define A64F_LSL16(145,4794
#define A64F_BSH(146,4835
typedef enum A64Ins 148,4870
  A64I_S 149,4892
  A64I_S = 0x20000000,x20000000149,4892
  A64I_X 150,4915
  A64I_X = 0x80000000,x80000000150,4915
  A64I_EX 151,4938
  A64I_EX = 0x00200000,x00200000151,4938
  A64I_ON 152,4962
  A64I_ON = 0x00200000,x00200000152,4962
  A64I_K12 153,4986
  A64I_K12 = 0x1a000000,x1a000000153,4986
  A64I_K13 154,5011
  A64I_K13 = 0x18000000,x18000000154,5011
  A64I_LS_U 155,5036
  A64I_LS_U = 0x01000000,x01000000155,5036
  A64I_LS_S 156,5062
  A64I_LS_S = 0x00800000,x00800000156,5062
  A64I_LS_R 157,5088
  A64I_LS_R = 0x01200800,x01200800157,5088
  A64I_LS_SH 158,5114
  A64I_LS_SH = 0x00001000,x00001000158,5114
  A64I_LS_UXTWx 159,5141
  A64I_LS_UXTWx = 0x00004000,x00004000159,5141
  A64I_LS_SXTWx 160,5171
  A64I_LS_SXTWx = 0x0000c000,x0000c000160,5171
  A64I_LS_SXTXx 161,5201
  A64I_LS_SXTXx = 0x0000e000,x0000e000161,5201
  A64I_LS_LSLx 162,5231
  A64I_LS_LSLx = 0x00006000,x00006000162,5231
  A64I_ADDw 164,5261
  A64I_ADDw = 0x0b000000,x0b000000164,5261
  A64I_ADDx 165,5287
  A64I_ADDx = 0x8b000000,x8b000000165,5287
  A64I_ADDSw 166,5313
  A64I_ADDSw = 0x2b000000,x2b000000166,5313
  A64I_ADDSx 167,5340
  A64I_ADDSx = 0xab000000,xab000000167,5340
  A64I_NEGw 168,5367
  A64I_NEGw = 0x4b0003e0,x4b0003e0168,5367
  A64I_NEGx 169,5393
  A64I_NEGx = 0xcb0003e0,xcb0003e0169,5393
  A64I_SUBw 170,5419
  A64I_SUBw = 0x4b000000,x4b000000170,5419
  A64I_SUBx 171,5445
  A64I_SUBx = 0xcb000000,xcb000000171,5445
  A64I_SUBSw 172,5471
  A64I_SUBSw = 0x6b000000,x6b000000172,5471
  A64I_SUBSx 173,5498
  A64I_SUBSx = 0xeb000000,xeb000000173,5498
  A64I_MULw 175,5526
  A64I_MULw = 0x1b007c00,x1b007c00175,5526
  A64I_MULx 176,5552
  A64I_MULx = 0x9b007c00,x9b007c00176,5552
  A64I_SMULL 177,5578
  A64I_SMULL = 0x9b207c00,x9b207c00177,5578
  A64I_ANDw 179,5606
  A64I_ANDw = 0x0a000000,x0a000000179,5606
  A64I_ANDx 180,5632
  A64I_ANDx = 0x8a000000,x8a000000180,5632
  A64I_ANDSw 181,5658
  A64I_ANDSw = 0x6a000000,x6a000000181,5658
  A64I_ANDSx 182,5685
  A64I_ANDSx = 0xea000000,xea000000182,5685
  A64I_EORw 183,5712
  A64I_EORw = 0x4a000000,x4a000000183,5712
  A64I_EORx 184,5738
  A64I_EORx = 0xca000000,xca000000184,5738
  A64I_ORRw 185,5764
  A64I_ORRw = 0x2a000000,x2a000000185,5764
  A64I_ORRx 186,5790
  A64I_ORRx = 0xaa000000,xaa000000186,5790
  A64I_TSTw 187,5816
  A64I_TSTw  = 0x6a00001f,x6a00001f187,5816
  A64I_TSTx 188,5843
  A64I_TSTx  = 0xea00001f,xea00001f188,5843
  A64I_CMPw 190,5871
  A64I_CMPw = 0x6b00001f,x6b00001f190,5871
  A64I_CMPx 191,5897
  A64I_CMPx = 0xeb00001f,xeb00001f191,5897
  A64I_CMNw 192,5923
  A64I_CMNw = 0x2b00001f,x2b00001f192,5923
  A64I_CMNx 193,5949
  A64I_CMNx = 0xab00001f,xab00001f193,5949
  A64I_CCMPw 194,5975
  A64I_CCMPw = 0x7a400000,x7a400000194,5975
  A64I_CCMPx 195,6002
  A64I_CCMPx = 0xfa400000,xfa400000195,6002
  A64I_CSELw 196,6029
  A64I_CSELw = 0x1a800000,x1a800000196,6029
  A64I_CSELx 197,6056
  A64I_CSELx = 0x9a800000,x9a800000197,6056
  A64I_ASRw 199,6084
  A64I_ASRw = 0x13007c00,x13007c00199,6084
  A64I_ASRx 200,6110
  A64I_ASRx = 0x9340fc00,x9340fc00200,6110
  A64I_LSLx 201,6136
  A64I_LSLx = 0xd3400000,xd3400000201,6136
  A64I_LSRx 202,6162
  A64I_LSRx = 0xd340fc00,xd340fc00202,6162
  A64I_SHRw 203,6188
  A64I_SHRw = 0x1ac02000,x1ac02000203,6188
  A64I_SHRx 204,6214
  A64I_SHRx = 0x9ac02000,x9ac02000204,6214
  A64I_REVw 205,6273
  A64I_REVw = 0x5ac00800,x5ac00800205,6273
  A64I_REVx 206,6299
  A64I_REVx = 0xdac00c00,xdac00c00206,6299
  A64I_EXTRw 208,6326
  A64I_EXTRw = 0x13800000,x13800000208,6326
  A64I_EXTRx 209,6353
  A64I_EXTRx = 0x93c00000,x93c00000209,6353
  A64I_SBFMw 210,6380
  A64I_SBFMw = 0x13000000,x13000000210,6380
  A64I_SBFMx 211,6407
  A64I_SBFMx = 0x93400000,x93400000211,6407
  A64I_SXTBw 212,6434
  A64I_SXTBw = 0x13001c00,x13001c00212,6434
  A64I_SXTHw 213,6461
  A64I_SXTHw = 0x13003c00,x13003c00213,6461
  A64I_SXTW 214,6488
  A64I_SXTW = 0x93407c00,x93407c00214,6488
  A64I_UBFMw 215,6514
  A64I_UBFMw = 0x53000000,x53000000215,6514
  A64I_UBFMx 216,6541
  A64I_UBFMx = 0xd3400000,xd3400000216,6541
  A64I_UXTBw 217,6568
  A64I_UXTBw = 0x53001c00,x53001c00217,6568
  A64I_UXTHw 218,6595
  A64I_UXTHw = 0x53003c00,x53003c00218,6595
  A64I_MOVw 220,6623
  A64I_MOVw = 0x2a0003e0,x2a0003e0220,6623
  A64I_MOVx 221,6649
  A64I_MOVx = 0xaa0003e0,xaa0003e0221,6649
  A64I_MVNw 222,6675
  A64I_MVNw = 0x2a2003e0,x2a2003e0222,6675
  A64I_MVNx 223,6701
  A64I_MVNx = 0xaa2003e0,xaa2003e0223,6701
  A64I_MOVKw 224,6727
  A64I_MOVKw = 0x72800000,x72800000224,6727
  A64I_MOVKx 225,6754
  A64I_MOVKx = 0xf2800000,xf2800000225,6754
  A64I_MOVZw 226,6781
  A64I_MOVZw = 0x52800000,x52800000226,6781
  A64I_MOVZx 227,6808
  A64I_MOVZx = 0xd2800000,xd2800000227,6808
  A64I_MOVNw 228,6835
  A64I_MOVNw = 0x12800000,x12800000228,6835
  A64I_MOVNx 229,6862
  A64I_MOVNx = 0x92800000,x92800000229,6862
  A64I_LDRB 231,6890
  A64I_LDRB = 0x39400000,x39400000231,6890
  A64I_LDRH 232,6916
  A64I_LDRH = 0x79400000,x79400000232,6916
  A64I_LDRw 233,6942
  A64I_LDRw = 0xb9400000,xb9400000233,6942
  A64I_LDRx 234,6968
  A64I_LDRx = 0xf9400000,xf9400000234,6968
  A64I_LDRLw 235,6994
  A64I_LDRLw = 0x18000000,x18000000235,6994
  A64I_LDRLx 236,7021
  A64I_LDRLx = 0x58000000,x58000000236,7021
  A64I_STRB 237,7048
  A64I_STRB = 0x39000000,x39000000237,7048
  A64I_STRH 238,7074
  A64I_STRH = 0x79000000,x79000000238,7074
  A64I_STRw 239,7100
  A64I_STRw = 0xb9000000,xb9000000239,7100
  A64I_STRx 240,7126
  A64I_STRx = 0xf9000000,xf9000000240,7126
  A64I_STPw 241,7152
  A64I_STPw = 0x29000000,x29000000241,7152
  A64I_STPx 242,7178
  A64I_STPx = 0xa9000000,xa9000000242,7178
  A64I_LDPw 243,7204
  A64I_LDPw = 0x29400000,x29400000243,7204
  A64I_LDPx 244,7230
  A64I_LDPx = 0xa9400000,xa9400000244,7230
  A64I_B 246,7257
  A64I_B = 0x14000000,x14000000246,7257
  A64I_BCC 247,7280
  A64I_BCC = 0x54000000,x54000000247,7280
  A64I_BL 248,7305
  A64I_BL = 0x94000000,x94000000248,7305
  A64I_BR 249,7329
  A64I_BR = 0xd61f0000,xd61f0000249,7329
  A64I_BLR 250,7353
  A64I_BLR = 0xd63f0000,xd63f0000250,7353
  A64I_TBZ 251,7378
  A64I_TBZ = 0x36000000,x36000000251,7378
  A64I_TBNZ 252,7403
  A64I_TBNZ = 0x37000000,x37000000252,7403
  A64I_CBZ 253,7429
  A64I_CBZ = 0x34000000,x34000000253,7429
  A64I_CBNZ 254,7454
  A64I_CBNZ = 0x35000000,x35000000254,7454
  A64I_NOP 256,7481
  A64I_NOP = 0xd503201f,xd503201f256,7481
  A64I_FADDd 259,7518
  A64I_FADDd = 0x1e602800,x1e602800259,7518
  A64I_FSUBd 260,7545
  A64I_FSUBd = 0x1e603800,x1e603800260,7545
  A64I_FMADDd 261,7572
  A64I_FMADDd = 0x1f400000,x1f400000261,7572
  A64I_FMSUBd 262,7600
  A64I_FMSUBd = 0x1f408000,x1f408000262,7600
  A64I_FNMADDd 263,7628
  A64I_FNMADDd = 0x1f600000,x1f600000263,7628
  A64I_FNMSUBd 264,7657
  A64I_FNMSUBd = 0x1f608000,x1f608000264,7657
  A64I_FMULd 265,7686
  A64I_FMULd = 0x1e600800,x1e600800265,7686
  A64I_FDIVd 266,7713
  A64I_FDIVd = 0x1e601800,x1e601800266,7713
  A64I_FNEGd 267,7740
  A64I_FNEGd = 0x1e614000,x1e614000267,7740
  A64I_FABS 268,7767
  A64I_FABS = 0x1e60c000,x1e60c000268,7767
  A64I_FSQRTd 269,7793
  A64I_FSQRTd = 0x1e61c000,x1e61c000269,7793
  A64I_LDRs 270,7821
  A64I_LDRs = 0xbd400000,xbd400000270,7821
  A64I_LDRd 271,7847
  A64I_LDRd = 0xfd400000,xfd400000271,7847
  A64I_STRs 272,7873
  A64I_STRs = 0xbd000000,xbd000000272,7873
  A64I_STRd 273,7899
  A64I_STRd = 0xfd000000,xfd000000273,7899
  A64I_LDPs 274,7925
  A64I_LDPs = 0x2d400000,x2d400000274,7925
  A64I_LDPd 275,7951
  A64I_LDPd = 0x6d400000,x6d400000275,7951
  A64I_STPs 276,7977
  A64I_STPs = 0x2d000000,x2d000000276,7977
  A64I_STPd 277,8003
  A64I_STPd = 0x6d000000,x6d000000277,8003
  A64I_FCMPd 278,8029
  A64I_FCMPd = 0x1e602000,x1e602000278,8029
  A64I_FCMPZd 279,8056
  A64I_FCMPZd = 0x1e602008,x1e602008279,8056
  A64I_FCSELd 280,8084
  A64I_FCSELd = 0x1e600c00,x1e600c00280,8084
  A64I_FRINTMd 281,8112
  A64I_FRINTMd = 0x1e654000,x1e654000281,8112
  A64I_FRINTPd 282,8141
  A64I_FRINTPd = 0x1e64c000,x1e64c000282,8141
  A64I_FRINTZd 283,8170
  A64I_FRINTZd = 0x1e65c000,x1e65c000283,8170
  A64I_FCVT_F32_F64 285,8200
  A64I_FCVT_F32_F64 = 0x1e624000,x1e624000285,8200
  A64I_FCVT_F64_F32 286,8234
  A64I_FCVT_F64_F32 = 0x1e22c000,x1e22c000286,8234
  A64I_FCVT_F32_S32 287,8268
  A64I_FCVT_F32_S32 = 0x1e220000,x1e220000287,8268
  A64I_FCVT_F64_S32 288,8302
  A64I_FCVT_F64_S32 = 0x1e620000,x1e620000288,8302
  A64I_FCVT_F32_U32 289,8336
  A64I_FCVT_F32_U32 = 0x1e230000,x1e230000289,8336
  A64I_FCVT_F64_U32 290,8370
  A64I_FCVT_F64_U32 = 0x1e630000,x1e630000290,8370
  A64I_FCVT_F32_S64 291,8404
  A64I_FCVT_F32_S64 = 0x9e220000,x9e220000291,8404
  A64I_FCVT_F64_S64 292,8438
  A64I_FCVT_F64_S64 = 0x9e620000,x9e620000292,8438
  A64I_FCVT_F32_U64 293,8472
  A64I_FCVT_F32_U64 = 0x9e230000,x9e230000293,8472
  A64I_FCVT_F64_U64 294,8506
  A64I_FCVT_F64_U64 = 0x9e630000,x9e630000294,8506
  A64I_FCVT_S32_F64 295,8540
  A64I_FCVT_S32_F64 = 0x1e780000,x1e780000295,8540
  A64I_FCVT_S32_F32 296,8574
  A64I_FCVT_S32_F32 = 0x1e380000,x1e380000296,8574
  A64I_FCVT_U32_F64 297,8608
  A64I_FCVT_U32_F64 = 0x1e790000,x1e790000297,8608
  A64I_FCVT_U32_F32 298,8642
  A64I_FCVT_U32_F32 = 0x1e390000,x1e390000298,8642
  A64I_FCVT_S64_F64 299,8676
  A64I_FCVT_S64_F64 = 0x9e780000,x9e780000299,8676
  A64I_FCVT_S64_F32 300,8710
  A64I_FCVT_S64_F32 = 0x9e380000,x9e380000300,8710
  A64I_FCVT_U64_F64 301,8744
  A64I_FCVT_U64_F64 = 0x9e790000,x9e790000301,8744
  A64I_FCVT_U64_F32 302,8778
  A64I_FCVT_U64_F32 = 0x9e390000,x9e390000302,8778
  A64I_FMOV_S 304,8813
  A64I_FMOV_S = 0x1e204000,x1e204000304,8813
  A64I_FMOV_D 305,8841
  A64I_FMOV_D = 0x1e604000,x1e604000305,8841
  A64I_FMOV_R_S 306,8869
  A64I_FMOV_R_S = 0x1e260000,x1e260000306,8869
  A64I_FMOV_S_R 307,8899
  A64I_FMOV_S_R = 0x1e270000,x1e270000307,8899
  A64I_FMOV_R_D 308,8929
  A64I_FMOV_R_D = 0x9e660000,x9e660000308,8929
  A64I_FMOV_D_R 309,8959
  A64I_FMOV_D_R = 0x9e670000,x9e670000309,8959
  A64I_FMOV_DI 310,8989
  A64I_FMOV_DI = 0x1e601000,x1e601000310,8989
} A64Ins;311,9018
typedef enum A64Shift 313,9029
  A64SH_LSL,314,9053
  A64SH_LSL, A64SH_LSR,314,9053
  A64SH_LSL, A64SH_LSR, A64SH_ASR,314,9053
  A64SH_LSL, A64SH_LSR, A64SH_ASR, A64SH_ROR314,9053
} A64Shift;315,9098
typedef enum A64Extend 317,9111
  A64EX_UXTB,318,9136
  A64EX_UXTB, A64EX_UXTH,318,9136
  A64EX_UXTB, A64EX_UXTH, A64EX_UXTW,318,9136
  A64EX_UXTB, A64EX_UXTH, A64EX_UXTW, A64EX_UXTX,318,9136
  A64EX_SXTB,319,9186
  A64EX_SXTB, A64EX_SXTH,319,9186
  A64EX_SXTB, A64EX_SXTH, A64EX_SXTW,319,9186
  A64EX_SXTB, A64EX_SXTH, A64EX_SXTW, A64EX_SXTX,319,9186
} A64Extend;320,9236
typedef enum A64CC 323,9277
  CC_EQ,324,9298
  CC_EQ, CC_NE,324,9298
  CC_EQ, CC_NE, CC_CS,324,9298
  CC_EQ, CC_NE, CC_CS, CC_CC,324,9298
  CC_EQ, CC_NE, CC_CS, CC_CC, CC_MI,324,9298
  CC_EQ, CC_NE, CC_CS, CC_CC, CC_MI, CC_PL,324,9298
  CC_EQ, CC_NE, CC_CS, CC_CC, CC_MI, CC_PL, CC_VS,324,9298
  CC_EQ, CC_NE, CC_CS, CC_CC, CC_MI, CC_PL, CC_VS, CC_VC,324,9298
  CC_HI,325,9356
  CC_HI, CC_LS,325,9356
  CC_HI, CC_LS, CC_GE,325,9356
  CC_HI, CC_LS, CC_GE, CC_LT,325,9356
  CC_HI, CC_LS, CC_GE, CC_LT, CC_GT,325,9356
  CC_HI, CC_LS, CC_GE, CC_LT, CC_GT, CC_LE,325,9356
  CC_HI, CC_LS, CC_GE, CC_LT, CC_GT, CC_LE, CC_AL,325,9356
  CC_HS 326,9407
  CC_HS = CC_CS,326,9407
  CC_HS = CC_CS, CC_LO 326,9407
  CC_HS = CC_CS, CC_LO = CC_CC326,9407
} A64CC;327,9438

vendor/github.com/LuaJIT/LuaJIT/src/lj_target_mips.h,13925
#define _LJ_TARGET_MIPS_H7,134
#define GPRDEF(11,241
#define FPRDEF(17,503
#define FPRDEF(19,527
#define VRIDDEF(25,782
#define RIDENUM(27,802
  GPRDEF(30,844
  GPRDEF(RIDENUM)30,844
  FPRDEF(31,903
  FPRDEF(RIDENUM)31,903
  RID_MAX,32,961
  RID_ZERO 33,972
  RID_ZERO = RID_R0,33,972
  RID_TMP 34,993
  RID_TMP = RID_RA,34,993
  RID_GP 35,1013
  RID_GP = RID_R28,35,1013
  RID_RET 38,1063
  RID_RET = RID_R2,38,1063
  RID_RETHI 40,1093
  RID_RETHI = RID_R3,40,1093
  RID_RETLO 41,1115
  RID_RETLO = RID_R2,41,1115
  RID_RETHI 43,1143
  RID_RETHI = RID_R2,43,1143
  RID_RETLO 44,1165
  RID_RETLO = RID_R3,44,1165
  RID_FPRET 47,1208
  RID_FPRET = RID_R2,47,1208
  RID_FPRET 49,1236
  RID_FPRET = RID_F0,49,1236
  RID_CFUNCADDR 51,1265
  RID_CFUNCADDR = RID_R25,51,1265
  RID_BASE 54,1355
  RID_BASE = RID_R16,54,1355
  RID_LPC 55,1402
  RID_LPC = RID_R18,55,1402
  RID_DISPATCH 56,1446
  RID_DISPATCH = RID_R19,56,1446
  RID_LREG 57,1506
  RID_LREG = RID_R20,57,1506
  RID_JGL 58,1550
  RID_JGL = RID_R30,58,1550
  RID_MIN_GPR 61,1671
  RID_MIN_GPR = RID_R0,61,1671
  RID_MAX_GPR 62,1695
  RID_MAX_GPR = RID_RA+RID_RA62,1695
  RID_MIN_FPR 63,1721
  RID_MIN_FPR = RID_MAX_GPR,63,1721
  RID_MAX_FPR 65,1764
  RID_MAX_FPR = RID_MIN_FPR,65,1764
  RID_MAX_FPR 67,1799
  RID_MAX_FPR = RID_F31+RID_F3167,1799
  RID_NUM_GPR 69,1833
  RID_NUM_GPR = RID_MAX_GPR 69,1833
  RID_NUM_GPR = RID_MAX_GPR - RID_MIN_GPR,69,1833
  RID_NUM_FPR 70,1876
  RID_NUM_FPR = RID_MAX_FPR 70,1876
  RID_NUM_FPR = RID_MAX_FPR - RID_MIN_FPR	70,1876
#define RID_NUM_KREF	73,1953
#define RID_MIN_KREF	74,1987
#define RSET_FIXED 79,2176
#define RSET_GPR	82,2333
#define RSET_FPR	84,2416
#define RSET_FPR 87,2452
#define RSET_FPR	93,2779
#define RSET_ALL	96,2848
#define RSET_INIT	97,2886
#define RSET_SCRATCH_GPR 99,2915
#define RSET_SCRATCH_FPR	103,3031
#define RSET_SCRATCH_FPR 106,3074
#define RSET_SCRATCH_FPR	111,3296
#define RSET_SCRATCH	114,3363
#define REGARG_FIRSTGPR	115,3421
#define REGARG_LASTGPR	117,3463
#define REGARG_NUMGPR	118,3494
#define REGARG_LASTGPR	120,3525
#define REGARG_NUMGPR	121,3557
#define REGARG_FIRSTFPR	124,3607
#define REGARG_LASTFPR	125,3634
#define REGARG_NUMFPR	126,3660
#define REGARG_FIRSTFPR	128,3691
#define REGARG_LASTFPR	130,3734
#define REGARG_NUMFPR	131,3766
#define REGARG_LASTFPR	133,3797
#define REGARG_NUMFPR	134,3829
#define SPS_FIXED	148,4202
#define SPS_FIXED	150,4228
#define SPS_FIRST	152,4255
#define SPOFS_TMP	154,4276
#define sps_scale(156,4297
#define sps_align(157,4344
  lua_Number fpr[fpr164,4572
  intptr_t gpr[gpr166,4642
  int32_t spill[spill167,4704
} ExitState;168,4746
#define EXITSTATE_CHECKEXIT	171,4806
static LJ_AINLINE uint32_t *exitstub_trace_addr_(exitstub_trace_addr_174,4888
#define exitstub_trace_addr(180,5087
#define MIPSF_S(186,5304
#define MIPSF_T(187,5335
#define MIPSF_D(188,5366
#define MIPSF_R(189,5397
#define MIPSF_H(190,5428
#define MIPSF_G(191,5459
#define MIPSF_F(192,5490
#define MIPSF_A(193,5520
#define MIPSF_M(194,5550
#define MIPSF_L(195,5581
typedef enum MIPSIns 197,5612
  MIPSI_D 198,5635
  MIPSI_D = 0x38,x38198,5635
  MIPSI_DV 199,5653
  MIPSI_DV = 0x10,x10199,5653
  MIPSI_D32 200,5672
  MIPSI_D32 = 0x3c,x3c200,5672
  MIPSI_MOVE 202,5722
  MIPSI_MOVE = 0x00000025,x00000025202,5722
  MIPSI_NOP 203,5749
  MIPSI_NOP = 0x00000000,x00000000203,5749
  MIPSI_LI 205,5776
  MIPSI_LI = 0x24000000,x24000000205,5776
  MIPSI_LU 206,5801
  MIPSI_LU = 0x34000000,x34000000206,5801
  MIPSI_LUI 207,5826
  MIPSI_LUI = 0x3c000000,x3c000000207,5826
  MIPSI_AND 209,5853
  MIPSI_AND = 0x00000024,x00000024209,5853
  MIPSI_ANDI 210,5879
  MIPSI_ANDI = 0x30000000,x30000000210,5879
  MIPSI_OR 211,5906
  MIPSI_OR = 0x00000025,x00000025211,5906
  MIPSI_ORI 212,5931
  MIPSI_ORI = 0x34000000,x34000000212,5931
  MIPSI_XOR 213,5957
  MIPSI_XOR = 0x00000026,x00000026213,5957
  MIPSI_XORI 214,5983
  MIPSI_XORI = 0x38000000,x38000000214,5983
  MIPSI_NOR 215,6010
  MIPSI_NOR = 0x00000027,x00000027215,6010
  MIPSI_SLT 217,6037
  MIPSI_SLT = 0x0000002a,x0000002a217,6037
  MIPSI_SLTU 218,6063
  MIPSI_SLTU = 0x0000002b,x0000002b218,6063
  MIPSI_SLTI 219,6090
  MIPSI_SLTI = 0x28000000,x28000000219,6090
  MIPSI_SLTIU 220,6117
  MIPSI_SLTIU = 0x2c000000,x2c000000220,6117
  MIPSI_ADDU 222,6146
  MIPSI_ADDU = 0x00000021,x00000021222,6146
  MIPSI_ADDIU 223,6173
  MIPSI_ADDIU = 0x24000000,x24000000223,6173
  MIPSI_SUB 224,6201
  MIPSI_SUB = 0x00000022,x00000022224,6201
  MIPSI_SUBU 225,6227
  MIPSI_SUBU = 0x00000023,x00000023225,6227
  MIPSI_MUL 226,6254
  MIPSI_MUL = 0x70000002,x70000002226,6254
  MIPSI_DIV 227,6280
  MIPSI_DIV = 0x0000001a,x0000001a227,6280
  MIPSI_DIVU 228,6306
  MIPSI_DIVU = 0x0000001b,x0000001b228,6306
  MIPSI_MOVZ 230,6334
  MIPSI_MOVZ = 0x0000000a,x0000000a230,6334
  MIPSI_MOVN 231,6361
  MIPSI_MOVN = 0x0000000b,x0000000b231,6361
  MIPSI_MFHI 232,6388
  MIPSI_MFHI = 0x00000010,x00000010232,6388
  MIPSI_MFLO 233,6415
  MIPSI_MFLO = 0x00000012,x00000012233,6415
  MIPSI_MULT 234,6442
  MIPSI_MULT = 0x00000018,x00000018234,6442
  MIPSI_SLL 236,6470
  MIPSI_SLL = 0x00000000,x00000000236,6470
  MIPSI_SRL 237,6496
  MIPSI_SRL = 0x00000002,x00000002237,6496
  MIPSI_SRA 238,6522
  MIPSI_SRA = 0x00000003,x00000003238,6522
  MIPSI_ROTR 239,6548
  MIPSI_ROTR = 0x00200002,x00200002239,6548
  MIPSI_DROTR 240,6590
  MIPSI_DROTR = 0x0020003a,x0020003a240,6590
  MIPSI_DROTR32 241,6618
  MIPSI_DROTR32 = 0x0020003e,x0020003e241,6618
  MIPSI_SLLV 242,6648
  MIPSI_SLLV = 0x00000004,x00000004242,6648
  MIPSI_SRLV 243,6675
  MIPSI_SRLV = 0x00000006,x00000006243,6675
  MIPSI_SRAV 244,6702
  MIPSI_SRAV = 0x00000007,x00000007244,6702
  MIPSI_ROTRV 245,6729
  MIPSI_ROTRV = 0x00000046,x00000046245,6729
  MIPSI_DROTRV 246,6772
  MIPSI_DROTRV = 0x00000056,x00000056246,6772
  MIPSI_SEB 248,6802
  MIPSI_SEB = 0x7c000420,x7c000420248,6802
  MIPSI_SEH 249,6843
  MIPSI_SEH = 0x7c000620,x7c000620249,6843
  MIPSI_WSBH 250,6884
  MIPSI_WSBH = 0x7c0000a0,x7c0000a0250,6884
  MIPSI_DSBH 251,6926
  MIPSI_DSBH = 0x7c0000a4,x7c0000a4251,6926
  MIPSI_B 253,6954
  MIPSI_B = 0x10000000,x10000000253,6954
  MIPSI_J 254,6978
  MIPSI_J = 0x08000000,x08000000254,6978
  MIPSI_JAL 255,7002
  MIPSI_JAL = 0x0c000000,x0c000000255,7002
  MIPSI_JALX 256,7028
  MIPSI_JALX = 0x74000000,x74000000256,7028
  MIPSI_JR 257,7055
  MIPSI_JR = 0x00000008,x00000008257,7055
  MIPSI_JALR 258,7080
  MIPSI_JALR = 0x0000f809,x0000f809258,7080
  MIPSI_BEQ 260,7108
  MIPSI_BEQ = 0x10000000,x10000000260,7108
  MIPSI_BNE 261,7134
  MIPSI_BNE = 0x14000000,x14000000261,7134
  MIPSI_BLEZ 262,7160
  MIPSI_BLEZ = 0x18000000,x18000000262,7160
  MIPSI_BGTZ 263,7187
  MIPSI_BGTZ = 0x1c000000,x1c000000263,7187
  MIPSI_BLTZ 264,7214
  MIPSI_BLTZ = 0x04000000,x04000000264,7214
  MIPSI_BGEZ 265,7241
  MIPSI_BGEZ = 0x04010000,x04010000265,7241
  MIPSI_LW 268,7302
  MIPSI_LW = 0x8c000000,x8c000000268,7302
  MIPSI_LD 269,7327
  MIPSI_LD = 0xdc000000,xdc000000269,7327
  MIPSI_SW 270,7352
  MIPSI_SW = 0xac000000,xac000000270,7352
  MIPSI_SD 271,7377
  MIPSI_SD = 0xfc000000,xfc000000271,7377
  MIPSI_LB 272,7402
  MIPSI_LB = 0x80000000,x80000000272,7402
  MIPSI_SB 273,7427
  MIPSI_SB = 0xa0000000,xa0000000273,7427
  MIPSI_LH 274,7452
  MIPSI_LH = 0x84000000,x84000000274,7452
  MIPSI_SH 275,7477
  MIPSI_SH = 0xa4000000,xa4000000275,7477
  MIPSI_LBU 276,7502
  MIPSI_LBU = 0x90000000,x90000000276,7502
  MIPSI_LHU 277,7528
  MIPSI_LHU = 0x94000000,x94000000277,7528
  MIPSI_LWC1 278,7554
  MIPSI_LWC1 = 0xc4000000,xc4000000278,7554
  MIPSI_SWC1 279,7581
  MIPSI_SWC1 = 0xe4000000,xe4000000279,7581
  MIPSI_LDC1 280,7608
  MIPSI_LDC1 = 0xd4000000,xd4000000280,7608
  MIPSI_SDC1 281,7635
  MIPSI_SDC1 = 0xf4000000,xf4000000281,7635
  MIPSI_DADD 284,7692
  MIPSI_DADD = 0x0000002c,x0000002c284,7692
  MIPSI_DADDI 285,7719
  MIPSI_DADDI = 0x60000000,x60000000285,7719
  MIPSI_DADDU 286,7747
  MIPSI_DADDU = 0x0000002d,x0000002d286,7747
  MIPSI_DADDIU 287,7775
  MIPSI_DADDIU = 0x64000000,x64000000287,7775
  MIPSI_DSUB 288,7804
  MIPSI_DSUB = 0x0000002e,x0000002e288,7804
  MIPSI_DSUBU 289,7831
  MIPSI_DSUBU = 0x0000002f,x0000002f289,7831
  MIPSI_DDIV 290,7859
  MIPSI_DDIV = 0x0000001e,x0000001e290,7859
  MIPSI_DDIVU 291,7886
  MIPSI_DDIVU = 0x0000001f,x0000001f291,7886
  MIPSI_DMULT 292,7914
  MIPSI_DMULT = 0x0000001c,x0000001c292,7914
  MIPSI_DMULTU 293,7942
  MIPSI_DMULTU = 0x0000001d,x0000001d293,7942
  MIPSI_DSLL 295,7972
  MIPSI_DSLL = 0x00000038,x00000038295,7972
  MIPSI_DSRL 296,7999
  MIPSI_DSRL = 0x0000003a,x0000003a296,7999
  MIPSI_DSLLV 297,8026
  MIPSI_DSLLV = 0x00000014,x00000014297,8026
  MIPSI_DSRLV 298,8054
  MIPSI_DSRLV = 0x00000016,x00000016298,8054
  MIPSI_DSRA 299,8082
  MIPSI_DSRA = 0x0000003b,x0000003b299,8082
  MIPSI_DSRAV 300,8109
  MIPSI_DSRAV = 0x00000017,x00000017300,8109
  MIPSI_DSRA32 301,8137
  MIPSI_DSRA32 = 0x0000003f,x0000003f301,8137
  MIPSI_DSLL32 302,8166
  MIPSI_DSLL32 = 0x0000003c,x0000003c302,8166
  MIPSI_DSRL32 303,8195
  MIPSI_DSRL32 = 0x0000003e,x0000003e303,8195
  MIPSI_DSHD 304,8224
  MIPSI_DSHD = 0x7c000164,x7c000164304,8224
  MIPSI_AADDU 306,8252
  MIPSI_AADDU = LJ_32 306,8252
  MIPSI_AADDU = LJ_32 ? MIPSI_ADDU 306,8252
  MIPSI_AADDU = LJ_32 ? MIPSI_ADDU : MIPSI_DADDU,306,8252
  MIPSI_AADDIU 307,8302
  MIPSI_AADDIU = LJ_32 307,8302
  MIPSI_AADDIU = LJ_32 ? MIPSI_ADDIU 307,8302
  MIPSI_AADDIU = LJ_32 ? MIPSI_ADDIU : MIPSI_DADDIU,307,8302
  MIPSI_ASUBU 308,8355
  MIPSI_ASUBU = LJ_32 308,8355
  MIPSI_ASUBU = LJ_32 ? MIPSI_SUBU 308,8355
  MIPSI_ASUBU = LJ_32 ? MIPSI_SUBU : MIPSI_DSUBU,308,8355
  MIPSI_AL 309,8405
  MIPSI_AL = LJ_32 309,8405
  MIPSI_AL = LJ_32 ? MIPSI_LW 309,8405
  MIPSI_AL = LJ_32 ? MIPSI_LW : MIPSI_LD,309,8405
  MIPSI_AS 310,8447
  MIPSI_AS = LJ_32 310,8447
  MIPSI_AS = LJ_32 ? MIPSI_SW 310,8447
  MIPSI_AS = LJ_32 ? MIPSI_SW : MIPSI_SD,310,8447
  MIPSI_DEXTM 313,8527
  MIPSI_DEXTM = 0x7c000001,x7c000001313,8527
  MIPSI_DEXTU 314,8555
  MIPSI_DEXTU = 0x7c000002,x7c000002314,8555
  MIPSI_DEXT 315,8583
  MIPSI_DEXT = 0x7c000003,x7c000003315,8583
  MIPSI_DINSM 316,8610
  MIPSI_DINSM = 0x7c000005,x7c000005316,8610
  MIPSI_DINSU 317,8638
  MIPSI_DINSU = 0x7c000006,x7c000006317,8638
  MIPSI_DINS 318,8666
  MIPSI_DINS = 0x7c000007,x7c000007318,8666
  MIPSI_RINT_D 320,8694
  MIPSI_RINT_D = 0x4620001a,x4620001a320,8694
  MIPSI_RINT_S 321,8723
  MIPSI_RINT_S = 0x4600001a,x4600001a321,8723
  MIPSI_RINT 322,8752
  MIPSI_RINT = 0x4400001a,x4400001a322,8752
  MIPSI_FLOOR_D 323,8779
  MIPSI_FLOOR_D = 0x4620000b,x4620000b323,8779
  MIPSI_CEIL_D 324,8809
  MIPSI_CEIL_D = 0x4620000a,x4620000a324,8809
  MIPSI_ROUND_D 325,8838
  MIPSI_ROUND_D = 0x46200008,x46200008325,8838
  MIPSI_MOV_S 328,8894
  MIPSI_MOV_S = 0x46000006,x46000006328,8894
  MIPSI_MOV_D 329,8922
  MIPSI_MOV_D = 0x46200006,x46200006329,8922
  MIPSI_MOVT_D 330,8950
  MIPSI_MOVT_D = 0x46210011,x46210011330,8950
  MIPSI_MOVF_D 331,8979
  MIPSI_MOVF_D = 0x46200011,x46200011331,8979
  MIPSI_ABS_D 333,9009
  MIPSI_ABS_D = 0x46200005,x46200005333,9009
  MIPSI_NEG_D 334,9037
  MIPSI_NEG_D = 0x46200007,x46200007334,9037
  MIPSI_ADD_D 336,9066
  MIPSI_ADD_D = 0x46200000,x46200000336,9066
  MIPSI_SUB_D 337,9094
  MIPSI_SUB_D = 0x46200001,x46200001337,9094
  MIPSI_MUL_D 338,9122
  MIPSI_MUL_D = 0x46200002,x46200002338,9122
  MIPSI_DIV_D 339,9150
  MIPSI_DIV_D = 0x46200003,x46200003339,9150
  MIPSI_SQRT_D 340,9178
  MIPSI_SQRT_D = 0x46200004,x46200004340,9178
  MIPSI_ADD_S 342,9208
  MIPSI_ADD_S = 0x46000000,x46000000342,9208
  MIPSI_SUB_S 343,9236
  MIPSI_SUB_S = 0x46000001,x46000001343,9236
  MIPSI_CVT_D_S 345,9265
  MIPSI_CVT_D_S = 0x46000021,x46000021345,9265
  MIPSI_CVT_W_S 346,9295
  MIPSI_CVT_W_S = 0x46000024,x46000024346,9295
  MIPSI_CVT_S_D 347,9325
  MIPSI_CVT_S_D = 0x46200020,x46200020347,9325
  MIPSI_CVT_W_D 348,9355
  MIPSI_CVT_W_D = 0x46200024,x46200024348,9355
  MIPSI_CVT_S_W 349,9385
  MIPSI_CVT_S_W = 0x46800020,x46800020349,9385
  MIPSI_CVT_D_W 350,9415
  MIPSI_CVT_D_W = 0x46800021,x46800021350,9415
  MIPSI_CVT_S_L 351,9445
  MIPSI_CVT_S_L = 0x46a00020,x46a00020351,9445
  MIPSI_CVT_D_L 352,9475
  MIPSI_CVT_D_L = 0x46a00021,x46a00021352,9475
  MIPSI_TRUNC_W_S 354,9506
  MIPSI_TRUNC_W_S = 0x4600000d,x4600000d354,9506
  MIPSI_TRUNC_W_D 355,9538
  MIPSI_TRUNC_W_D = 0x4620000d,x4620000d355,9538
  MIPSI_TRUNC_L_S 356,9570
  MIPSI_TRUNC_L_S = 0x46000009,x46000009356,9570
  MIPSI_TRUNC_L_D 357,9602
  MIPSI_TRUNC_L_D = 0x46200009,x46200009357,9602
  MIPSI_FLOOR_W_S 358,9634
  MIPSI_FLOOR_W_S = 0x4600000f,x4600000f358,9634
  MIPSI_FLOOR_W_D 359,9666
  MIPSI_FLOOR_W_D = 0x4620000f,x4620000f359,9666
  MIPSI_MFC1 361,9699
  MIPSI_MFC1 = 0x44000000,x44000000361,9699
  MIPSI_MTC1 362,9726
  MIPSI_MTC1 = 0x44800000,x44800000362,9726
  MIPSI_DMTC1 363,9753
  MIPSI_DMTC1 = 0x44a00000,x44a00000363,9753
  MIPSI_DMFC1 364,9781
  MIPSI_DMFC1 = 0x44200000,x44200000364,9781
  MIPSI_BC1F 366,9810
  MIPSI_BC1F = 0x45000000,x45000000366,9810
  MIPSI_BC1T 367,9837
  MIPSI_BC1T = 0x45010000,x45010000367,9837
  MIPSI_C_EQ_D 369,9865
  MIPSI_C_EQ_D = 0x46200032,x46200032369,9865
  MIPSI_C_OLT_S 370,9894
  MIPSI_C_OLT_S = 0x46000034,x46000034370,9894
  MIPSI_C_OLT_D 371,9924
  MIPSI_C_OLT_D = 0x46200034,x46200034371,9924
  MIPSI_C_ULT_D 372,9954
  MIPSI_C_ULT_D = 0x46200035,x46200035372,9954
  MIPSI_C_OLE_D 373,9984
  MIPSI_C_OLE_D = 0x46200036,x46200036373,9984
  MIPSI_C_ULE_D 374,10014
  MIPSI_C_ULE_D = 0x46200037,x46200037374,10014
} MIPSIns;375,10044

vendor/github.com/LuaJIT/LuaJIT/src/lj_target_ppc.h,9979
#define _LJ_TARGET_PPC_H7,132
#define GPRDEF(11,238
#define FPRDEF(16,489
#define VRIDDEF(21,737
#define RIDENUM(23,757
  GPRDEF(26,799
  GPRDEF(RIDENUM)26,799
  FPRDEF(27,858
  FPRDEF(RIDENUM)27,858
  RID_MAX,28,916
  RID_TMP 29,927
  RID_TMP = RID_R0,29,927
  RID_RET 32,977
  RID_RET = RID_R3,32,977
  RID_RETHI 33,997
  RID_RETHI = RID_R3,33,997
  RID_RETLO 34,1019
  RID_RETLO = RID_R4,34,1019
  RID_FPRET 35,1041
  RID_FPRET = RID_F1,35,1041
  RID_BASE 38,1126
  RID_BASE = RID_R14,38,1126
  RID_LPC 39,1173
  RID_LPC = RID_R16,39,1173
  RID_DISPATCH 40,1217
  RID_DISPATCH = RID_R17,40,1217
  RID_LREG 41,1277
  RID_LREG = RID_R18,41,1277
  RID_JGL 42,1321
  RID_JGL = RID_R31,42,1321
  RID_MIN_GPR 45,1442
  RID_MIN_GPR = RID_R0,45,1442
  RID_MAX_GPR 46,1466
  RID_MAX_GPR = RID_R31+RID_R3146,1466
  RID_MIN_FPR 47,1493
  RID_MIN_FPR = RID_F0,47,1493
  RID_MAX_FPR 48,1517
  RID_MAX_FPR = RID_F31+RID_F3148,1517
  RID_NUM_GPR 49,1544
  RID_NUM_GPR = RID_MAX_GPR 49,1544
  RID_NUM_GPR = RID_MAX_GPR - RID_MIN_GPR,49,1544
  RID_NUM_FPR 50,1587
  RID_NUM_FPR = RID_MAX_FPR 50,1587
  RID_NUM_FPR = RID_MAX_FPR - RID_MIN_FPR50,1587
#define RID_NUM_KREF	53,1633
#define RID_MIN_KREF	54,1667
#define RSET_FIXED 59,1846
#define RSET_GPR	62,1967
#define RSET_FPR	63,2036
#define RSET_ALL	64,2090
#define RSET_INIT	65,2127
#define RSET_SCRATCH_GPR	67,2155
#define RSET_SCRATCH_FPR	68,2212
#define RSET_SCRATCH	69,2269
#define REGARG_FIRSTGPR	70,2327
#define REGARG_LASTGPR	71,2359
#define REGARG_NUMGPR	72,2391
#define REGARG_FIRSTFPR	73,2416
#define REGARG_LASTFPR	74,2448
#define REGARG_NUMFPR	75,2479
#define SPS_FIXED	90,2966
#define SPS_FIRST	91,2986
#define SPOFS_TMPW	94,3083
#define SPOFS_TMP	95,3104
#define SPOFS_TMPHI	96,3124
#define SPOFS_TMPLO	97,3146
#define sps_scale(99,3170
#define sps_align(100,3217
  lua_Number fpr[fpr106,3430
  intptr_t gpr[gpr107,3493
  int32_t spill[spill108,3555
} ExitState;109,3597
#define EXITSTATE_CHECKEXIT	112,3657
static LJ_AINLINE uint32_t *exitstub_trace_addr_(exitstub_trace_addr_115,3739
#define exitstub_trace_addr(121,3967
#define PPCF_CC(127,4194
#define PPCF_T(128,4256
#define PPCF_A(129,4286
#define PPCF_B(130,4316
#define PPCF_C(131,4346
#define PPCF_MB(132,4375
#define PPCF_ME(133,4405
#define PPCF_Y	134,4435
#define PPCF_DOT	135,4462
typedef enum PPCIns 137,4491
  PPCI_MR 139,4543
  PPCI_MR = 0x7c000378,x7c000378139,4543
  PPCI_NOP 140,4567
  PPCI_NOP = 0x60000000,x60000000140,4567
  PPCI_LI 142,4593
  PPCI_LI = 0x38000000,x38000000142,4593
  PPCI_LIS 143,4617
  PPCI_LIS = 0x3c000000,x3c000000143,4617
  PPCI_ADD 145,4643
  PPCI_ADD = 0x7c000214,x7c000214145,4643
  PPCI_ADDC 146,4668
  PPCI_ADDC = 0x7c000014,x7c000014146,4668
  PPCI_ADDO 147,4694
  PPCI_ADDO = 0x7c000614,x7c000614147,4694
  PPCI_ADDE 148,4720
  PPCI_ADDE = 0x7c000114,x7c000114148,4720
  PPCI_ADDZE 149,4746
  PPCI_ADDZE = 0x7c000194,x7c000194149,4746
  PPCI_ADDME 150,4773
  PPCI_ADDME = 0x7c0001d4,x7c0001d4150,4773
  PPCI_ADDI 151,4800
  PPCI_ADDI = 0x38000000,x38000000151,4800
  PPCI_ADDIS 152,4826
  PPCI_ADDIS = 0x3c000000,x3c000000152,4826
  PPCI_ADDIC 153,4853
  PPCI_ADDIC = 0x30000000,x30000000153,4853
  PPCI_ADDICDOT 154,4880
  PPCI_ADDICDOT = 0x34000000,x34000000154,4880
  PPCI_SUBF 156,4911
  PPCI_SUBF = 0x7c000050,x7c000050156,4911
  PPCI_SUBFC 157,4937
  PPCI_SUBFC = 0x7c000010,x7c000010157,4937
  PPCI_SUBFO 158,4964
  PPCI_SUBFO = 0x7c000450,x7c000450158,4964
  PPCI_SUBFE 159,4991
  PPCI_SUBFE = 0x7c000110,x7c000110159,4991
  PPCI_SUBFZE 160,5018
  PPCI_SUBFZE = 0x7c000190,x7c000190160,5018
  PPCI_SUBFME 161,5046
  PPCI_SUBFME = 0x7c0001d0,x7c0001d0161,5046
  PPCI_SUBFIC 162,5074
  PPCI_SUBFIC = 0x20000000,x20000000162,5074
  PPCI_NEG 164,5103
  PPCI_NEG = 0x7c0000d0,x7c0000d0164,5103
  PPCI_AND 166,5129
  PPCI_AND = 0x7c000038,x7c000038166,5129
  PPCI_ANDC 167,5154
  PPCI_ANDC = 0x7c000078,x7c000078167,5154
  PPCI_NAND 168,5180
  PPCI_NAND = 0x7c0003b8,x7c0003b8168,5180
  PPCI_ANDIDOT 169,5206
  PPCI_ANDIDOT = 0x70000000,x70000000169,5206
  PPCI_ANDISDOT 170,5235
  PPCI_ANDISDOT = 0x74000000,x74000000170,5235
  PPCI_OR 172,5266
  PPCI_OR = 0x7c000378,x7c000378172,5266
  PPCI_NOR 173,5290
  PPCI_NOR = 0x7c0000f8,x7c0000f8173,5290
  PPCI_ORI 174,5315
  PPCI_ORI = 0x60000000,x60000000174,5315
  PPCI_ORIS 175,5340
  PPCI_ORIS = 0x64000000,x64000000175,5340
  PPCI_XOR 177,5367
  PPCI_XOR = 0x7c000278,x7c000278177,5367
  PPCI_EQV 178,5392
  PPCI_EQV = 0x7c000238,x7c000238178,5392
  PPCI_XORI 179,5417
  PPCI_XORI = 0x68000000,x68000000179,5417
  PPCI_XORIS 180,5443
  PPCI_XORIS = 0x6c000000,x6c000000180,5443
  PPCI_CMPW 182,5471
  PPCI_CMPW = 0x7c000000,x7c000000182,5471
  PPCI_CMPLW 183,5497
  PPCI_CMPLW = 0x7c000040,x7c000040183,5497
  PPCI_CMPWI 184,5524
  PPCI_CMPWI = 0x2c000000,x2c000000184,5524
  PPCI_CMPLWI 185,5551
  PPCI_CMPLWI = 0x28000000,x28000000185,5551
  PPCI_MULLW 187,5580
  PPCI_MULLW = 0x7c0001d6,x7c0001d6187,5580
  PPCI_MULLI 188,5607
  PPCI_MULLI = 0x1c000000,x1c000000188,5607
  PPCI_MULLWO 189,5634
  PPCI_MULLWO = 0x7c0005d6,x7c0005d6189,5634
  PPCI_EXTSB 191,5663
  PPCI_EXTSB = 0x7c000774,x7c000774191,5663
  PPCI_EXTSH 192,5690
  PPCI_EXTSH = 0x7c000734,x7c000734192,5690
  PPCI_SLW 194,5718
  PPCI_SLW = 0x7c000030,x7c000030194,5718
  PPCI_SRW 195,5743
  PPCI_SRW = 0x7c000430,x7c000430195,5743
  PPCI_SRAW 196,5768
  PPCI_SRAW = 0x7c000630,x7c000630196,5768
  PPCI_SRAWI 197,5794
  PPCI_SRAWI = 0x7c000670,x7c000670197,5794
  PPCI_RLWNM 199,5822
  PPCI_RLWNM = 0x5c000000,x5c000000199,5822
  PPCI_RLWINM 200,5849
  PPCI_RLWINM = 0x54000000,x54000000200,5849
  PPCI_RLWIMI 201,5877
  PPCI_RLWIMI = 0x50000000,x50000000201,5877
  PPCI_B 203,5906
  PPCI_B = 0x48000000,x48000000203,5906
  PPCI_BL 204,5929
  PPCI_BL = 0x48000001,x48000001204,5929
  PPCI_BC 205,5953
  PPCI_BC = 0x40800000,x40800000205,5953
  PPCI_BCL 206,5977
  PPCI_BCL = 0x40800001,x40800001206,5977
  PPCI_BCTR 207,6002
  PPCI_BCTR = 0x4e800420,x4e800420207,6002
  PPCI_BCTRL 208,6028
  PPCI_BCTRL = 0x4e800421,x4e800421208,6028
  PPCI_CRANDC 210,6056
  PPCI_CRANDC = 0x4c000102,x4c000102210,6056
  PPCI_CRXOR 211,6084
  PPCI_CRXOR = 0x4c000182,x4c000182211,6084
  PPCI_CRAND 212,6111
  PPCI_CRAND = 0x4c000202,x4c000202212,6111
  PPCI_CREQV 213,6138
  PPCI_CREQV = 0x4c000242,x4c000242213,6138
  PPCI_CRORC 214,6165
  PPCI_CRORC = 0x4c000342,x4c000342214,6165
  PPCI_CROR 215,6192
  PPCI_CROR = 0x4c000382,x4c000382215,6192
  PPCI_MFLR 217,6219
  PPCI_MFLR = 0x7c0802a6,x7c0802a6217,6219
  PPCI_MTCTR 218,6245
  PPCI_MTCTR = 0x7c0903a6,x7c0903a6218,6245
  PPCI_MCRXR 220,6273
  PPCI_MCRXR = 0x7c000400,x7c000400220,6273
  PPCI_LWZ 223,6334
  PPCI_LWZ = 0x80000000,x80000000223,6334
  PPCI_LBZ 224,6359
  PPCI_LBZ = 0x88000000,x88000000224,6359
  PPCI_STW 225,6384
  PPCI_STW = 0x90000000,x90000000225,6384
  PPCI_STB 226,6409
  PPCI_STB = 0x98000000,x98000000226,6409
  PPCI_LHZ 227,6434
  PPCI_LHZ = 0xa0000000,xa0000000227,6434
  PPCI_LHA 228,6459
  PPCI_LHA = 0xa8000000,xa8000000228,6459
  PPCI_STH 229,6484
  PPCI_STH = 0xb0000000,xb0000000229,6484
  PPCI_STWU 231,6510
  PPCI_STWU = 0x94000000,x94000000231,6510
  PPCI_LFS 233,6537
  PPCI_LFS = 0xc0000000,xc0000000233,6537
  PPCI_LFD 234,6562
  PPCI_LFD = 0xc8000000,xc8000000234,6562
  PPCI_STFS 235,6587
  PPCI_STFS = 0xd0000000,xd0000000235,6587
  PPCI_STFD 236,6613
  PPCI_STFD = 0xd8000000,xd8000000236,6613
  PPCI_LWZX 238,6640
  PPCI_LWZX = 0x7c00002e,x7c00002e238,6640
  PPCI_LBZX 239,6666
  PPCI_LBZX = 0x7c0000ae,x7c0000ae239,6666
  PPCI_STWX 240,6692
  PPCI_STWX = 0x7c00012e,x7c00012e240,6692
  PPCI_STBX 241,6718
  PPCI_STBX = 0x7c0001ae,x7c0001ae241,6718
  PPCI_LHZX 242,6744
  PPCI_LHZX = 0x7c00022e,x7c00022e242,6744
  PPCI_LHAX 243,6770
  PPCI_LHAX = 0x7c0002ae,x7c0002ae243,6770
  PPCI_STHX 244,6796
  PPCI_STHX = 0x7c00032e,x7c00032e244,6796
  PPCI_LWBRX 246,6823
  PPCI_LWBRX = 0x7c00042c,x7c00042c246,6823
  PPCI_STWBRX 247,6850
  PPCI_STWBRX = 0x7c00052c,x7c00052c247,6850
  PPCI_LFSX 249,6879
  PPCI_LFSX = 0x7c00042e,x7c00042e249,6879
  PPCI_LFDX 250,6905
  PPCI_LFDX = 0x7c0004ae,x7c0004ae250,6905
  PPCI_STFSX 251,6931
  PPCI_STFSX = 0x7c00052e,x7c00052e251,6931
  PPCI_STFDX 252,6958
  PPCI_STFDX = 0x7c0005ae,x7c0005ae252,6958
  PPCI_FMR 255,7011
  PPCI_FMR = 0xfc000090,xfc000090255,7011
  PPCI_FNEG 256,7036
  PPCI_FNEG = 0xfc000050,xfc000050256,7036
  PPCI_FABS 257,7062
  PPCI_FABS = 0xfc000210,xfc000210257,7062
  PPCI_FRSP 259,7089
  PPCI_FRSP = 0xfc000018,xfc000018259,7089
  PPCI_FCTIWZ 260,7115
  PPCI_FCTIWZ = 0xfc00001e,xfc00001e260,7115
  PPCI_FADD 262,7144
  PPCI_FADD = 0xfc00002a,xfc00002a262,7144
  PPCI_FSUB 263,7170
  PPCI_FSUB = 0xfc000028,xfc000028263,7170
  PPCI_FMUL 264,7196
  PPCI_FMUL = 0xfc000032,xfc000032264,7196
  PPCI_FDIV 265,7222
  PPCI_FDIV = 0xfc000024,xfc000024265,7222
  PPCI_FSQRT 266,7248
  PPCI_FSQRT = 0xfc00002c,xfc00002c266,7248
  PPCI_FMADD 268,7276
  PPCI_FMADD = 0xfc00003a,xfc00003a268,7276
  PPCI_FMSUB 269,7303
  PPCI_FMSUB = 0xfc000038,xfc000038269,7303
  PPCI_FNMSUB 270,7330
  PPCI_FNMSUB = 0xfc00003c,xfc00003c270,7330
  PPCI_FCMPU 272,7359
  PPCI_FCMPU = 0xfc000000,xfc000000272,7359
  PPCI_FSEL 273,7386
  PPCI_FSEL = 0xfc00002e,xfc00002e273,7386
} PPCIns;274,7412
typedef enum PPCCC 276,7423
  CC_GE,277,7444
  CC_GE, CC_LE,277,7444
  CC_GE, CC_LE, CC_NE,277,7444
  CC_GE, CC_LE, CC_NE, CC_NS,277,7444
  CC_GE, CC_LE, CC_NE, CC_NS, CC_LT,277,7444
  CC_GE, CC_LE, CC_NE, CC_NS, CC_LT, CC_GT,277,7444
  CC_GE, CC_LE, CC_NE, CC_NS, CC_LT, CC_GT, CC_EQ,277,7444
  CC_GE, CC_LE, CC_NE, CC_NS, CC_LT, CC_GT, CC_EQ, CC_SO277,7444
} PPCCC;278,7501

vendor/github.com/LuaJIT/LuaJIT/src/lj_target_x86.h,15455
#define _LJ_TARGET_X86_H7,140
#define GPRDEF(12,256
#define FPRDEF(15,400
#define GPRDEF(19,566
#define FPRDEF(21,644
#define VRIDDEF(24,737
#define RIDENUM(27,775
  GPRDEF(30,817
  GPRDEF(RIDENUM)30,817
  FPRDEF(31,876
  FPRDEF(RIDENUM)31,876
  RID_MAX,32,934
  RID_MRM 33,945
  RID_MRM = RID_MAX,33,945
  RID_RIP 34,1002
  RID_RIP = RID_MAX+RID_MAX34,1002
  RID_SP 37,1105
  RID_SP = RID_ESP,37,1105
  RID_RET 38,1125
  RID_RET = RID_EAX,38,1125
  RID_FPRET 40,1156
  RID_FPRET = RID_XMM0,40,1156
  RID_RETLO 42,1186
  RID_RETLO = RID_EAX,42,1186
  RID_RETHI 43,1209
  RID_RETHI = RID_EDX,43,1209
  RID_BASE 47,1302
  RID_BASE = RID_EDX,47,1302
  RID_LPC 49,1374
  RID_LPC = RID_EBX,49,1374
  RID_DISPATCH 50,1418
  RID_DISPATCH = RID_R14D,50,1418
  RID_LPC 52,1485
  RID_LPC = RID_ESI,52,1485
  RID_DISPATCH 53,1529
  RID_DISPATCH = RID_EBX,53,1529
  RID_MIN_GPR 57,1657
  RID_MIN_GPR = RID_EAX,57,1657
  RID_MIN_FPR 58,1682
  RID_MIN_FPR = RID_XMM0,58,1682
  RID_MAX_GPR 59,1708
  RID_MAX_GPR = RID_MIN_FPR,59,1708
  RID_MAX_FPR 60,1737
  RID_MAX_FPR = RID_MAX,60,1737
  RID_NUM_GPR 61,1762
  RID_NUM_GPR = RID_MAX_GPR 61,1762
  RID_NUM_GPR = RID_MAX_GPR - RID_MIN_GPR,61,1762
  RID_NUM_FPR 62,1805
  RID_NUM_FPR = RID_MAX_FPR 62,1805
  RID_NUM_FPR = RID_MAX_FPR - RID_MIN_FPR,62,1805
#define RSET_GPR	68,2012
#define RSET_FPR	71,2133
#define RSET_ALL	72,2189
#define RSET_INIT	73,2226
#define RSET_GPR8	77,2312
#define RSET_GPR8	79,2345
#define RSET_ACD	83,2438
#define RSET_SCRATCH 87,2559
#define REGARG_GPRS 89,2660
#define REGARG_NUMGPR	91,2737
#define REGARG_NUMFPR	92,2761
#define REGARG_FIRSTFPR	93,2785
#define REGARG_LASTFPR	94,2818
#define STACKARG_OFS	95,2850
#define RSET_SCRATCH 98,2943
#define REGARG_GPRS 100,3020
#define REGARG_NUMGPR	103,3133
#define REGARG_NUMFPR	104,3157
#define REGARG_FIRSTFPR	105,3181
#define REGARG_LASTFPR	106,3214
#define STACKARG_OFS	107,3246
#define RSET_SCRATCH	111,3304
#define REGARG_GPRS	112,3345
#define REGARG_NUMGPR	113,3410
#define REGARG_NUMFPR	114,3456
#define STACKARG_OFS	115,3480
#undef rset_picktop120,3586
#define rset_picktop(121,3606
#define SPS_FIXED	135,4048
#define SPS_FIRST	136,4072
#define SPS_FIXED	139,4157
#define SPS_FIXED	141,4183
#define SPS_FIRST	143,4210
#define SPS_FIXED	146,4243
#define SPS_FIRST	147,4263
#define SPOFS_TMP	150,4291
#define sps_scale(152,4312
#define sps_align(153,4359
  lua_Number fpr[fpr159,4572
  intptr_t gpr[gpr160,4635
  int32_t spill[spill161,4697
} ExitState;162,4739
#define EXITSTUB_SPACING	165,4829
#define EXITSTUBS_PER_GROUP	166,4860
  XM_OFS0 171,4987
  XM_OFS0 = 0x00,x00171,4987
  XM_OFS0 = 0x00, XM_OFS8 171,4987
  XM_OFS0 = 0x00, XM_OFS8 = 0x40,x40171,4987
  XM_OFS0 = 0x00, XM_OFS8 = 0x40, XM_OFS32 171,4987
  XM_OFS0 = 0x00, XM_OFS8 = 0x40, XM_OFS32 = 0x80,x80171,4987
  XM_OFS0 = 0x00, XM_OFS8 = 0x40, XM_OFS32 = 0x80, XM_REG 171,4987
  XM_OFS0 = 0x00, XM_OFS8 = 0x40, XM_OFS32 = 0x80, XM_REG = 0xc0,xc0171,4987
  XM_SCALE1 172,5053
  XM_SCALE1 = 0x00,x00172,5053
  XM_SCALE1 = 0x00, XM_SCALE2 172,5053
  XM_SCALE1 = 0x00, XM_SCALE2 = 0x40,x40172,5053
  XM_SCALE1 = 0x00, XM_SCALE2 = 0x40, XM_SCALE4 172,5053
  XM_SCALE1 = 0x00, XM_SCALE2 = 0x40, XM_SCALE4 = 0x80,x80172,5053
  XM_SCALE1 = 0x00, XM_SCALE2 = 0x40, XM_SCALE4 = 0x80, XM_SCALE8 172,5053
  XM_SCALE1 = 0x00, XM_SCALE2 = 0x40, XM_SCALE4 = 0x80, XM_SCALE8 = 0xc0,xc0172,5053
  XM_MASK 173,5127
  XM_MASK = 0xc0xc0173,5127
} x86Mode;174,5144
  int32_t ofs;178,5221
  uint8_t base;179,5251
  uint8_t idx;180,5301
  uint8_t scale;181,5351
} x86ModRM;182,5412
#define XO_(187,5580
#define XO_FPU(188,5633
#define XO_0f(189,5700
#define XO_66(190,5754
#define XO_660f(191,5808
#define XO_f20f(192,5864
#define XO_f30f(193,5920
#define XV_660f38(195,5977
#define XV_f20f38(196,6035
#define XV_f20f3a(197,6093
#define XV_f30f38(198,6151
  XI_O16 206,6436
  XI_O16 =	0x66,x66206,6436
  XI_NOP 207,6453
  XI_NOP =	0x90,x90207,6453
  XI_XCHGa 208,6470
  XI_XCHGa =	0x90,x90208,6470
  XI_CALL 209,6489
  XI_CALL =	0xe8,xe8209,6489
  XI_JMP 210,6507
  XI_JMP =	0xe9,xe9210,6507
  XI_JMPs 211,6524
  XI_JMPs =	0xeb,xeb211,6524
  XI_PUSH 212,6542
  XI_PUSH =	0x50,x50212,6542
  XI_JCCs 213,6579
  XI_JCCs =	0x70,x70213,6579
  XI_JCCn 214,6614
  XI_JCCn =	0x80,x80214,6614
  XI_LEA 215,6651
  XI_LEA =	0x8d,x8d215,6651
  XI_MOVrib 216,6668
  XI_MOVrib =	0xb0,xb0216,6668
  XI_MOVri 217,6707
  XI_MOVri =	0xb8,xb8217,6707
  XI_ARITHib 218,6745
  XI_ARITHib =	0x80,x80218,6745
  XI_ARITHi 219,6766
  XI_ARITHi =	0x81,x81219,6766
  XI_ARITHi8 220,6786
  XI_ARITHi8 =	0x83,x83220,6786
  XI_PUSHi8 221,6807
  XI_PUSHi8 =	0x6a,x6a221,6807
  XI_TESTb 222,6827
  XI_TESTb =	0x84,x84222,6827
  XI_TEST 223,6846
  XI_TEST =	0x85,x85223,6846
  XI_INT3 224,6864
  XI_INT3 =	0xcc,xcc224,6864
  XI_MOVmi 225,6882
  XI_MOVmi =	0xc7,xc7225,6882
  XI_GROUP5 226,6901
  XI_GROUP5 =	0xff,xff226,6901
  XI_FLDZ 229,6962
  XI_FLDZ =	0xeed9,xeed9229,6962
  XI_FLD1 230,6982
  XI_FLD1 =	0xe8d9,xe8d9230,6982
  XI_FLDLG2 231,7002
  XI_FLDLG2 =	0xecd9,xecd9231,7002
  XI_FLDLN2 232,7024
  XI_FLDLN2 =	0xedd9,xedd9232,7024
  XI_FDUP 233,7046
  XI_FDUP =	0xc0d9,xc0d9233,7046
  XI_FPOP 234,7089
  XI_FPOP =	0xd8dd,xd8dd234,7089
  XI_FPOP1 235,7133
  XI_FPOP1 =	0xd9dd,xd9dd235,7133
  XI_FRNDINT 236,7178
  XI_FRNDINT =	0xfcd9,xfcd9236,7178
  XI_FSIN 237,7201
  XI_FSIN =	0xfed9,xfed9237,7201
  XI_FCOS 238,7221
  XI_FCOS =	0xffd9,xffd9238,7221
  XI_FPTAN 239,7241
  XI_FPTAN =	0xf2d9,xf2d9239,7241
  XI_FPATAN 240,7262
  XI_FPATAN =	0xf3d9,xf3d9240,7262
  XI_FSCALE 241,7284
  XI_FSCALE =	0xfdd9,xfdd9241,7284
  XI_FYL2X 242,7306
  XI_FYL2X =	0xf1d9,xf1d9242,7306
  XV_RORX 245,7375
  XV_RORX =	XV_f20f3a(245,7375
  XV_RORX =	XV_f20f3a(f0)245,7375
  XV_SARX 246,7402
  XV_SARX =	XV_f30f38(246,7402
  XV_SARX =	XV_f30f38(f7)246,7402
  XV_SHLX 247,7429
  XV_SHLX =	XV_660f38(247,7429
  XV_SHLX =	XV_660f38(f7)247,7429
  XV_SHRX 248,7456
  XV_SHRX =	XV_f20f38(248,7456
  XV_SHRX =	XV_f20f38(f7)248,7456
  XO_OR 251,7530
  XO_OR =	XO_(251,7530
  XO_OR =	XO_(0b)b251,7530
  XO_MOV 252,7549
  XO_MOV =	XO_(252,7549
  XO_MOV =	XO_(8b)b252,7549
  XO_MOVto 253,7569
  XO_MOVto =	XO_(253,7569
  XO_MOVtow 254,7591
  XO_MOVtow =	XO_66(254,7591
  XO_MOVtob 255,7616
  XO_MOVtob =	XO_(255,7616
  XO_MOVmi 256,7639
  XO_MOVmi =	XO_(256,7639
  XO_MOVmi =	XO_(c7)256,7639
  XO_MOVmib 257,7661
  XO_MOVmib =	XO_(257,7661
  XO_MOVmib =	XO_(c6)257,7661
  XO_LEA 258,7684
  XO_LEA =	XO_(258,7684
  XO_LEA =	XO_(8d)d258,7684
  XO_ARITHib 259,7704
  XO_ARITHib =	XO_(259,7704
  XO_ARITHi 260,7728
  XO_ARITHi =	XO_(260,7728
  XO_ARITHi8 261,7751
  XO_ARITHi8 =	XO_(261,7751
  XO_ARITHiw8 262,7775
  XO_ARITHiw8 =	XO_66(262,7775
  XO_SHIFTi 263,7802
  XO_SHIFTi =	XO_(263,7802
  XO_SHIFTi =	XO_(c1)263,7802
  XO_SHIFT1 264,7825
  XO_SHIFT1 =	XO_(264,7825
  XO_SHIFT1 =	XO_(d1)264,7825
  XO_SHIFTcl 265,7848
  XO_SHIFTcl =	XO_(265,7848
  XO_SHIFTcl =	XO_(d3)265,7848
  XO_IMUL 266,7872
  XO_IMUL =	XO_0f(266,7872
  XO_IMUL =	XO_0f(af)266,7872
  XO_IMULi 267,7895
  XO_IMULi =	XO_(267,7895
  XO_IMULi8 268,7917
  XO_IMULi8 =	XO_(268,7917
  XO_IMULi8 =	XO_(6b)b268,7917
  XO_CMP 269,7940
  XO_CMP =	XO_(269,7940
  XO_CMP =	XO_(3b)b269,7940
  XO_TESTb 270,7960
  XO_TESTb =	XO_(270,7960
  XO_TEST 271,7982
  XO_TEST =	XO_(271,7982
  XO_GROUP3b 272,8003
  XO_GROUP3b =	XO_(272,8003
  XO_GROUP3b =	XO_(f6)272,8003
  XO_GROUP3 273,8027
  XO_GROUP3 =	XO_(273,8027
  XO_GROUP3 =	XO_(f7)273,8027
  XO_GROUP5b 274,8050
  XO_GROUP5b =	XO_(274,8050
  XO_GROUP5b =	XO_(fe)274,8050
  XO_GROUP5 275,8074
  XO_GROUP5 =	XO_(275,8074
  XO_GROUP5 =	XO_(ff)275,8074
  XO_MOVZXb 276,8097
  XO_MOVZXb =	XO_0f(276,8097
  XO_MOVZXb =	XO_0f(b6)276,8097
  XO_MOVZXw 277,8122
  XO_MOVZXw =	XO_0f(277,8122
  XO_MOVZXw =	XO_0f(b7)277,8122
  XO_MOVSXb 278,8147
  XO_MOVSXb =	XO_0f(278,8147
  XO_MOVSXb =	XO_0f(be)278,8147
  XO_MOVSXw 279,8172
  XO_MOVSXw =	XO_0f(279,8172
  XO_MOVSXw =	XO_0f(bf)279,8172
  XO_MOVSXd 280,8197
  XO_MOVSXd =	XO_(280,8197
  XO_BSWAP 281,8220
  XO_BSWAP =	XO_0f(281,8220
  XO_BSWAP =	XO_0f(c8)281,8220
  XO_CMOV 282,8244
  XO_CMOV =	XO_0f(282,8244
  XO_MOVSD 284,8268
  XO_MOVSD =	XO_f20f(284,8268
  XO_MOVSDto 285,8294
  XO_MOVSDto =	XO_f20f(285,8294
  XO_MOVSS 286,8322
  XO_MOVSS =	XO_f30f(286,8322
  XO_MOVSSto 287,8348
  XO_MOVSSto =	XO_f30f(287,8348
  XO_MOVLPD 288,8376
  XO_MOVLPD =	XO_660f(288,8376
  XO_MOVAPS 289,8403
  XO_MOVAPS =	XO_0f(289,8403
  XO_XORPS 290,8428
  XO_XORPS =	XO_0f(290,8428
  XO_ANDPS 291,8452
  XO_ANDPS =	XO_0f(291,8452
  XO_ADDSD 292,8476
  XO_ADDSD =	XO_f20f(292,8476
  XO_SUBSD 293,8502
  XO_SUBSD =	XO_f20f(293,8502
  XO_SUBSD =	XO_f20f(5c)c293,8502
  XO_MULSD 294,8528
  XO_MULSD =	XO_f20f(294,8528
  XO_DIVSD 295,8554
  XO_DIVSD =	XO_f20f(295,8554
  XO_DIVSD =	XO_f20f(5e)e295,8554
  XO_SQRTSD 296,8580
  XO_SQRTSD =	XO_f20f(296,8580
  XO_MINSD 297,8607
  XO_MINSD =	XO_f20f(297,8607
  XO_MINSD =	XO_f20f(5d)d297,8607
  XO_MAXSD 298,8633
  XO_MAXSD =	XO_f20f(298,8633
  XO_MAXSD =	XO_f20f(5f)f298,8633
  XO_ROUNDSD 299,8659
  XO_ROUNDSD =	0x0b3a0ffc,x0b3a0ffc299,8659
  XO_UCOMISD 300,8729
  XO_UCOMISD =	XO_660f(300,8729
  XO_UCOMISD =	XO_660f(2e)e300,8729
  XO_CVTSI2SD 301,8757
  XO_CVTSI2SD =	XO_f20f(301,8757
  XO_CVTSI2SD =	XO_f20f(2a)a301,8757
  XO_CVTTSD2SI=302,8786
  XO_CVTTSD2SI=	XO_f20f(302,8786
  XO_CVTTSD2SI=	XO_f20f(2c)c302,8786
  XO_CVTSI2SS 303,8815
  XO_CVTSI2SS =	XO_f30f(303,8815
  XO_CVTSI2SS =	XO_f30f(2a)a303,8815
  XO_CVTTSS2SI=304,8844
  XO_CVTTSS2SI=	XO_f30f(304,8844
  XO_CVTTSS2SI=	XO_f30f(2c)c304,8844
  XO_CVTSS2SD 305,8873
  XO_CVTSS2SD =	XO_f30f(305,8873
  XO_CVTSS2SD =	XO_f30f(5a)a305,8873
  XO_CVTSD2SS 306,8902
  XO_CVTSD2SS =	XO_f20f(306,8902
  XO_CVTSD2SS =	XO_f20f(5a)a306,8902
  XO_ADDSS 307,8931
  XO_ADDSS =	XO_f30f(307,8931
  XO_MOVD 308,8957
  XO_MOVD =	XO_660f(308,8957
  XO_MOVD =	XO_660f(6e)e308,8957
  XO_MOVDto 309,8982
  XO_MOVDto =	XO_660f(309,8982
  XO_MOVDto =	XO_660f(7e)e309,8982
  XO_FLDd 311,9010
  XO_FLDd =	XO_(311,9010
  XO_FLDd =	XO_(d9)311,9010
  XO_FLDd =	XO_(d9), XOg_FLDd 311,9010
  XO_FLDq 312,9045
  XO_FLDq =	XO_(312,9045
  XO_FLDq =	XO_(dd)312,9045
  XO_FLDq =	XO_(dd), XOg_FLDq 312,9045
  XO_FILDd 313,9080
  XO_FILDd =	XO_(313,9080
  XO_FILDd =	XO_(db)313,9080
  XO_FILDd =	XO_(db), XOg_FILDd 313,9080
  XO_FILDq 314,9117
  XO_FILDq =	XO_(314,9117
  XO_FILDq =	XO_(df)314,9117
  XO_FILDq =	XO_(df), XOg_FILDq 314,9117
  XO_FSTPd 315,9154
  XO_FSTPd =	XO_(315,9154
  XO_FSTPd =	XO_(d9)315,9154
  XO_FSTPd =	XO_(d9), XOg_FSTPd 315,9154
  XO_FSTPq 316,9191
  XO_FSTPq =	XO_(316,9191
  XO_FSTPq =	XO_(dd)316,9191
  XO_FSTPq =	XO_(dd), XOg_FSTPq 316,9191
  XO_FISTPq 317,9228
  XO_FISTPq =	XO_(317,9228
  XO_FISTPq =	XO_(df)317,9228
  XO_FISTPq =	XO_(df), XOg_FISTPq 317,9228
  XO_FISTTPq 318,9267
  XO_FISTTPq =	XO_(318,9267
  XO_FISTTPq =	XO_(dd)318,9267
  XO_FISTTPq =	XO_(dd), XOg_FISTTPq 318,9267
  XO_FADDq 319,9308
  XO_FADDq =	XO_(319,9308
  XO_FADDq =	XO_(dc)319,9308
  XO_FADDq =	XO_(dc), XOg_FADDq 319,9308
  XO_FLDCW 320,9345
  XO_FLDCW =	XO_(320,9345
  XO_FLDCW =	XO_(d9)320,9345
  XO_FLDCW =	XO_(d9), XOg_FLDCW 320,9345
  XO_FNSTCW 321,9382
  XO_FNSTCW =	XO_(321,9382
  XO_FNSTCW =	XO_(d9)321,9382
  XO_FNSTCW =	XO_(d9), XOg_FNSTCW 321,9382
} x86Op;322,9420
typedef uint32_t x86Group;325,9455
#define XG_(327,9483
#define XG_ARITHi(328,9551
#define XG_TOXOi(329,9602
#define XG_TOXOi8(330,9673
#define XO_ARITH(332,9745
#define XO_ARITHw(333,9799
  XOg_ADD,336,9870
  XOg_ADD, XOg_OR,336,9870
  XOg_ADD, XOg_OR, XOg_ADC,336,9870
  XOg_ADD, XOg_OR, XOg_ADC, XOg_SBB,336,9870
  XOg_ADD, XOg_OR, XOg_ADC, XOg_SBB, XOg_AND,336,9870
  XOg_ADD, XOg_OR, XOg_ADC, XOg_SBB, XOg_AND, XOg_SUB,336,9870
  XOg_ADD, XOg_OR, XOg_ADC, XOg_SBB, XOg_AND, XOg_SUB, XOg_XOR,336,9870
  XOg_ADD, XOg_OR, XOg_ADC, XOg_SBB, XOg_AND, XOg_SUB, XOg_XOR, XOg_CMP,336,9870
  XOg_X_IMUL337,9943
} x86Arith;338,9956
  XOg_ROL,341,9984
  XOg_ROL, XOg_ROR,341,9984
  XOg_ROL, XOg_ROR, XOg_RCL,341,9984
  XOg_ROL, XOg_ROR, XOg_RCL, XOg_RCR,341,9984
  XOg_ROL, XOg_ROR, XOg_RCL, XOg_RCR, XOg_SHL,341,9984
  XOg_ROL, XOg_ROR, XOg_RCL, XOg_RCR, XOg_SHL, XOg_SHR,341,9984
  XOg_ROL, XOg_ROR, XOg_RCL, XOg_RCR, XOg_SHL, XOg_SHR, XOg_SAL,341,9984
  XOg_ROL, XOg_ROR, XOg_RCL, XOg_RCR, XOg_SHL, XOg_SHR, XOg_SAL, XOg_SAR341,9984
} x86Shift;342,10057
  XOg_TEST,345,10085
  XOg_TEST, XOg_TEST_,345,10085
  XOg_TEST, XOg_TEST_, XOg_NOT,345,10085
  XOg_TEST, XOg_TEST_, XOg_NOT, XOg_NEG,345,10085
  XOg_TEST, XOg_TEST_, XOg_NOT, XOg_NEG, XOg_MUL,345,10085
  XOg_TEST, XOg_TEST_, XOg_NOT, XOg_NEG, XOg_MUL, XOg_IMUL,345,10085
  XOg_TEST, XOg_TEST_, XOg_NOT, XOg_NEG, XOg_MUL, XOg_IMUL, XOg_DIV,345,10085
  XOg_TEST, XOg_TEST_, XOg_NOT, XOg_NEG, XOg_MUL, XOg_IMUL, XOg_DIV, XOg_IDIV345,10085
} x86Group3;346,10163
  XOg_INC,349,10192
  XOg_INC, XOg_DEC,349,10192
  XOg_INC, XOg_DEC, XOg_CALL,349,10192
  XOg_INC, XOg_DEC, XOg_CALL, XOg_CALLfar,349,10192
  XOg_INC, XOg_DEC, XOg_CALL, XOg_CALLfar, XOg_JMP,349,10192
  XOg_INC, XOg_DEC, XOg_CALL, XOg_CALLfar, XOg_JMP, XOg_JMPfar,349,10192
  XOg_INC, XOg_DEC, XOg_CALL, XOg_CALLfar, XOg_JMP, XOg_JMPfar, XOg_PUSH349,10192
} x86Group5;350,10265
  CC_O,354,10321
  CC_O, CC_NO,354,10321
  CC_O, CC_NO, CC_B,354,10321
  CC_O, CC_NO, CC_B, CC_NB,354,10321
  CC_O, CC_NO, CC_B, CC_NB, CC_E,354,10321
  CC_O, CC_NO, CC_B, CC_NB, CC_E, CC_NE,354,10321
  CC_O, CC_NO, CC_B, CC_NB, CC_E, CC_NE, CC_BE,354,10321
  CC_O, CC_NO, CC_B, CC_NB, CC_E, CC_NE, CC_BE, CC_NBE,354,10321
  CC_S,355,10377
  CC_S, CC_NS,355,10377
  CC_S, CC_NS, CC_P,355,10377
  CC_S, CC_NS, CC_P, CC_NP,355,10377
  CC_S, CC_NS, CC_P, CC_NP, CC_L,355,10377
  CC_S, CC_NS, CC_P, CC_NP, CC_L, CC_NL,355,10377
  CC_S, CC_NS, CC_P, CC_NP, CC_L, CC_NL, CC_LE,355,10377
  CC_S, CC_NS, CC_P, CC_NP, CC_L, CC_NL, CC_LE, CC_NLE,355,10377
  CC_C 356,10433
  CC_C = CC_B,356,10433
  CC_C = CC_B, CC_NAE 356,10433
  CC_C = CC_B, CC_NAE = CC_C,356,10433
  CC_C = CC_B, CC_NAE = CC_C, CC_NC 356,10433
  CC_C = CC_B, CC_NAE = CC_C, CC_NC = CC_NB,356,10433
  CC_C = CC_B, CC_NAE = CC_C, CC_NC = CC_NB, CC_AE 356,10433
  CC_C = CC_B, CC_NAE = CC_C, CC_NC = CC_NB, CC_AE = CC_NB,356,10433
  CC_Z 357,10493
  CC_Z = CC_E,357,10493
  CC_Z = CC_E, CC_NZ 357,10493
  CC_Z = CC_E, CC_NZ = CC_NE,357,10493
  CC_Z = CC_E, CC_NZ = CC_NE, CC_NA 357,10493
  CC_Z = CC_E, CC_NZ = CC_NE, CC_NA = CC_BE,357,10493
  CC_Z = CC_E, CC_NZ = CC_NE, CC_NA = CC_BE, CC_A 357,10493
  CC_Z = CC_E, CC_NZ = CC_NE, CC_NA = CC_BE, CC_A = CC_NBE,357,10493
  CC_PE 358,10553
  CC_PE = CC_P,358,10553
  CC_PE = CC_P, CC_PO 358,10553
  CC_PE = CC_P, CC_PO = CC_NP,358,10553
  CC_PE = CC_P, CC_PO = CC_NP, CC_NGE 358,10553
  CC_PE = CC_P, CC_PO = CC_NP, CC_NGE = CC_L,358,10553
  CC_PE = CC_P, CC_PO = CC_NP, CC_NGE = CC_L, CC_GE 358,10553
  CC_PE = CC_P, CC_PO = CC_NP, CC_NGE = CC_L, CC_GE = CC_NL,358,10553
  CC_NG 359,10614
  CC_NG = CC_LE,359,10614
  CC_NG = CC_LE, CC_G 359,10614
  CC_NG = CC_LE, CC_G = CC_NLE359,10614
} x86CC;360,10645

vendor/github.com/LuaJIT/LuaJIT/src/lj_trace.c,1402
#define lj_trace_c6,99
#define LUA_CORE7,118
void lj_trace_err(37,724
void lj_trace_err_info(45,950
static TraceNo trace_findfree(60,1458
#define TRACE_APPENDVEC(80,2066
static void perftools_addtrace(96,2502
GCtrace * LJ_FASTCALL lj_trace_alloc(121,3236
static void trace_save(143,3868
void LJ_FASTCALL lj_trace_free(167,4603
void lj_trace_reenableproto(182,5077
static void trace_unpatch(199,5569
static void trace_flushroot(237,6507
void lj_trace_flush(259,7235
void lj_trace_flushproto(269,7489
int lj_trace_flushall(276,7656
void lj_trace_initstate(306,8484
void lj_trace_freestate(349,9719
static void blacklist_pc(369,10416
static void penalty_pc(376,10597
static void trace_start(403,11485
static void trace_stop(468,13408
static int trace_downrec(536,15378
static int trace_abort(551,15742
static LJ_AINLINE void trace_pendpatch(623,18020
static TValue *trace_state(trace_state636,18323
void lj_trace_ins(717,20629
void LJ_FASTCALL lj_trace_hot(728,21002
static void trace_hotside(746,21620
void LJ_FASTCALL lj_trace_stitch(761,22123
typedef struct ExitDataCP 775,22584
  jit_State *J;J776,22612
  void *exptr;exptr777,22628
  const BCIns *pc;pc778,22673
} ExitDataCP;779,22730
static TValue *trace_exit_cp(trace_exit_cp782,22805
static void trace_exit_regs(793,23141
static TraceNo trace_exit_find(817,23737
int LJ_FASTCALL lj_trace_exit(831,24102

vendor/github.com/LuaJIT/LuaJIT/src/lj_trace.h,324
#define _LJ_TRACE_H7,119
#define TREDEF(17,256
  LJ_TRERR__MAX19,324
} TraceError;20,340
#define lj_trace_abort(42,1319
#define lj_trace_end(43,1381
#define lj_trace_flushall(47,1440
#define lj_trace_initstate(48,1484
#define lj_trace_freestate(49,1524
#define lj_trace_abort(50,1564
#define lj_trace_end(51,1600

vendor/github.com/LuaJIT/LuaJIT/src/lj_traceerr.h,36
TREDEF(9,207
#undef TREDEF57,1924

vendor/github.com/LuaJIT/LuaJIT/src/lj_udata.c,130
#define lj_udata_c6,100
#define LUA_CORE7,119
GCudata *lj_udata_new(lj_udata_new13,199
void LJ_FASTCALL lj_udata_free(30,745

vendor/github.com/LuaJIT/LuaJIT/src/lj_udata.h,26
#define _LJ_UDATA_H7,120

vendor/github.com/LuaJIT/LuaJIT/src/lj_vm.h,334
#define _LJ_VM_H7,134
typedef TValue *(*lua_CPFunction)lua_CPFunction14,355
#define lj_vm_floor	58,1896
#define lj_vm_ceil	59,1922
#define lj_vm_log2	71,2195
#define lj_vm_powi	83,2520
#define lj_vm_trunc	88,2638
#define lj_vm_exp2	98,2840
LJ_ASMF char lj_vm_asm_begin[lj_vm_asm_begin115,3477
#define makeasmfunc(118,3566

vendor/github.com/LuaJIT/LuaJIT/src/lj_vmevent.c,116
#define lj_vmevent_c8,120
#define LUA_CORE9,141
ptrdiff_t lj_vmevent_prepare(19,310
void lj_vmevent_call(38,874

vendor/github.com/LuaJIT/LuaJIT/src/lj_vmevent.h,817
#define _LJ_VMEVENT_H7,122
#define LJ_VMEVENTS_REGKEY	12,213
#define LJ_VMEVENTS_HSIZE	13,252
#define VMEVENT_MASK(15,281
#define VMEVENT_HASH(16,338
#define VMEVENT_HASHIDX(17,380
#define VMEVENT_NOCACHE	18,423
#define VMEVENT_DEF(20,453
  VMEVENT_DEF(26,614
  VMEVENT_DEF(BC,26,614
  VMEVENT_DEF(BC,	0x00003883)x0000388326,614
  VMEVENT_DEF(27,645
  VMEVENT_DEF(TRACE,27,645
  VMEVENT_DEF(TRACE,	0xb2d91467)xb2d9146727,645
  VMEVENT_DEF(28,679
  VMEVENT_DEF(RECORD,28,679
  VMEVENT_DEF(RECORD,	0x9284bf4f)x9284bf4f28,679
  VMEVENT_DEF(29,714
  VMEVENT_DEF(TEXIT,29,714
  VMEVENT_DEF(TEXIT,	0xb29df2b0)xb29df2b029,714
  LJ_VMEVENT__MAX30,748
} VMEvent;31,766
#define lj_vmevent_send(34,808
#define lj_vmevent_send_(35,856
#define lj_vmevent_send(37,916
#define lj_vmevent_send_(45,1162

vendor/github.com/LuaJIT/LuaJIT/src/lj_vmmath.c,851
#define lj_vmmath_c6,121
#define LUA_CORE7,141
LJ_FUNCA double lj_wrap_log(20,439
LJ_FUNCA double lj_wrap_log10(21,496
LJ_FUNCA double lj_wrap_exp(22,557
LJ_FUNCA double lj_wrap_sin(23,614
LJ_FUNCA double lj_wrap_cos(24,671
LJ_FUNCA double lj_wrap_tan(25,728
LJ_FUNCA double lj_wrap_asin(26,785
LJ_FUNCA double lj_wrap_acos(27,844
LJ_FUNCA double lj_wrap_atan(28,903
LJ_FUNCA double lj_wrap_sinh(29,962
LJ_FUNCA double lj_wrap_cosh(30,1021
LJ_FUNCA double lj_wrap_tanh(31,1080
LJ_FUNCA double lj_wrap_atan2(32,1139
LJ_FUNCA double lj_wrap_pow(33,1213
LJ_FUNCA double lj_wrap_fmod(34,1283
double lj_vm_foldarith(39,1443
int32_t LJ_FASTCALL lj_vm_modi(61,2238
double lj_vm_log2(77,2654
double lj_vm_exp2(84,2757
static double lj_vm_powui(92,2879
double lj_vm_powi(111,3185
double lj_vm_foldfpm(125,3462
int lj_vm_errno(146,4026

vendor/github.com/LuaJIT/LuaJIT/src/ljamalg.c,99
#define ljamalg_c16,667
#define LUA_CORE17,685
#define _GNU_SOURCE21,830
#define WINVER 25,873

vendor/github.com/LuaJIT/LuaJIT/src/lua.h,2898
#define lua_h10,221
#define LUA_VERSION	20,321
#define LUA_RELEASE	21,351
#define LUA_VERSION_NUM	22,383
#define LUA_COPYRIGHT	23,411
#define LUA_AUTHORS	24,476
#define	LUA_SIGNATURE	28,594
#define LUA_MULTRET	31,691
#define LUA_REGISTRYINDEX	37,742
#define LUA_ENVIRONINDEX	38,777
#define LUA_GLOBALSINDEX	39,811
#define lua_upvalueindex(40,845
#define LUA_OK	44,918
#define LUA_YIELD	45,936
#define LUA_ERRRUN	46,956
#define LUA_ERRSYNTAX	47,977
#define LUA_ERRMEM	48,1001
#define LUA_ERRERR	49,1022
typedef struct lua_State lua_State;52,1045
typedef int (*lua_CFunction)lua_CFunction54,1082
typedef const char * (*lua_Reader)lua_Reader60,1203
typedef int (*lua_Writer)lua_Writer62,1277
typedef void * (*lua_Alloc)lua_Alloc68,1408
#define LUA_TNONE	74,1510
#define LUA_TNIL	76,1535
#define LUA_TBOOLEAN	77,1555
#define LUA_TLIGHTUSERDATA	78,1579
#define LUA_TNUMBER	79,1608
#define LUA_TSTRING	80,1631
#define LUA_TTABLE	81,1654
#define LUA_TFUNCTION	82,1676
#define LUA_TUSERDATA	83,1701
#define LUA_TTHREAD	84,1726
#define LUA_MINSTACK	89,1802
typedef LUA_NUMBER lua_Number;101,1946
typedef LUA_INTEGER lua_Integer;105,2012
#define LUA_GCSTOP	225,6578
#define LUA_GCRESTART	226,6600
#define LUA_GCCOLLECT	227,6625
#define LUA_GCCOUNT	228,6650
#define LUA_GCCOUNTB	229,6673
#define LUA_GCSTEP	230,6697
#define LUA_GCSETPAUSE	231,6719
#define LUA_GCSETSTEPMUL	232,6745
#define LUA_GCISRUNNING	233,6772
#define lua_pop(259,7331
#define lua_newtable(261,7376
#define lua_register(263,7427
#define lua_pushcfunction(265,7507
#define lua_strlen(267,7567
#define lua_isfunction(269,7612
#define lua_istable(270,7676
#define lua_islightuserdata(271,7734
#define lua_isnil(272,7808
#define lua_isboolean(273,7863
#define lua_isthread(274,7925
#define lua_isnone(275,7985
#define lua_isnoneornil(276,8042
#define lua_pushliteral(278,8097
#define lua_setglobal(281,8184
#define lua_getglobal(282,8250
#define lua_tostring(284,8317
#define lua_open(292,8419
#define lua_getregistry(294,8455
#define lua_getgccount(296,8519
#define lua_Chunkreader	298,8572
#define lua_Chunkwriter	299,8608
#define LUA_HOOKCALL	316,8911
#define LUA_HOOKRET	317,8934
#define LUA_HOOKLINE	318,8956
#define LUA_HOOKCOUNT	319,8979
#define LUA_HOOKTAILRET 320,9003
#define LUA_MASKCALL	326,9052
#define LUA_MASKRET	327,9093
#define LUA_MASKLINE	328,9132
#define LUA_MASKCOUNT	329,9173
typedef struct lua_Debug lua_Debug;331,9217
typedef void (*lua_Hook)lua_Hook335,9343
struct lua_Debug 363,10655
  int event;364,10674
  const char *name;name365,10687
  const char *namewhat;namewhat366,10717
  const char *what;what367,10788
  const char *source;source368,10845
  int currentline;369,10877
  int nups;370,10906
  int linedefined;371,10948
  int lastlinedefined;372,10977
  char short_src[short_src373,11010
  int i_ci;375,11071

vendor/github.com/LuaJIT/LuaJIT/src/luaconf.h,1952
#define luaconf_h7,121
#define WINVER 10,155
#define LUA_LDIR	21,461
#define LUA_CDIR	22,489
#define LUA_PATH_DEFAULT 23,512
#define LUA_CPATH_DEFAULT 25,593
#define LUA_MULTILIB	33,850
#define LUA_LMULTILIB	36,906
#define LUA_LROOT	38,941
#define LUA_LUADIR	39,972
#define LUA_LJDIR	40,1003
#define LUA_JROOT	43,1061
#define LUA_RLDIR	44,1088
#define LUA_RCDIR	45,1135
#define LUA_RLPATH	46,1190
#define LUA_RCPATH	47,1255
#define LUA_JROOT	49,1301
#define LUA_RLPATH50,1329
#define LUA_RCPATH51,1348
#define LUA_JPATH	54,1375
#define LUA_LLDIR	55,1434
#define LUA_LCDIR	56,1482
#define LUA_LLPATH	57,1539
#define LUA_LCPATH1	58,1604
#define LUA_LCPATH2	59,1645
#define LUA_PATH_DEFAULT	61,1693
#define LUA_CPATH_DEFAULT	62,1760
#define LUA_PATH	66,1915
#define LUA_CPATH	67,1943
#define LUA_INIT	68,1973
#define LUA_DIRSEP	72,2060
#define LUA_DIRSEP	74,2090
#define LUA_PATHSEP	76,2120
#define LUA_PATH_MARK	77,2144
#define LUA_EXECDIR	78,2170
#define LUA_IGMARK	79,2194
#define LUA_PATH_CONFIG 80,2217
#define LUA_QL(85,2368
#define LUA_QS	86,2396
#define LUAI_MAXSTACK	89,2450
#define LUAI_MAXCSTACK	90,2527
#define LUAI_GCPAUSE	91,2604
#define LUAI_GCMUL	92,2669
#define LUA_MAXCAPTURES	93,2734
#define LUA_PROGNAME	97,2875
#define LUA_PROMPT	98,2936
#define LUA_PROMPT2	99,2986
#define LUA_MAXINPUT	100,3039
#define LUA_INTEGER	104,3169
#define LUA_IDSIZE	105,3199
#define LUAL_BUFFERSIZE	111,3493
#define LUA_NUMBER_DOUBLE116,3702
#define LUA_NUMBER	117,3728
#define LUAI_UACNUMBER	118,3755
#define LUA_NUMBER_SCAN	119,3786
#define LUA_NUMBER_FMT	120,3817
#define lua_number2str(121,3849
#define LUAI_MAXNUMBER2STR	122,3912
#define LUA_INTFRMLEN	123,3942
#define LUA_INTFRM_T	124,3969
#define LUA_API	129,4108
#define LUA_API	131,4153
#define LUA_API	134,4205
#define LUALIB_API	137,4237
#define lua_assert(144,4410
#define luai_apicheck(147,4474
#define luai_apicheck(149,4532

vendor/github.com/LuaJIT/LuaJIT/src/luajit-ffi-ctypeid.c,89
luajit_push_cdata_int64(16,253
luajit_push_cdata_uint64(39,836
luajit_ctypeid(62,1424

vendor/github.com/LuaJIT/LuaJIT/src/luajit-ffi-ctypeid.h,35
#define _LUAJIT_FFI_CTYPEID_H2,30

vendor/github.com/LuaJIT/LuaJIT/src/luajit.c,1461
#define luajit_c13,358
#define lua_stdin_is_tty(24,517
#define lua_stdin_is_tty(28,614
#define lua_stdin_is_tty(30,670
#define lua_stdin_is_tty(33,734
static lua_State *globalL globalL40,822
static const char *progname progname41,856
static void lstop(44,924
static void laction(54,1199
static void print_usage(62,1423
static void l_message(81,2134
static int report(88,2337
static int traceback(99,2597
static int docall(112,3006
static void print_version(131,3625
static void print_jit_status(136,3740
static void createargtable(155,4230
static int dofile(166,4487
static int dostring(172,4628
static int dolibrary(178,4802
static void write_prompt(185,4955
static int incomplete(196,5266
static int pushline(210,5605
static int loadline(227,6001
static void dotty(246,6607
static int handle_script(269,7250
static int loadjitmodule(297,7940
static int runcmdopt(321,8525
static int dojitcmd(344,9055
static int dojitopt(365,9757
static int dobytecode(376,10062
#define notail(394,10483
#define FLAGS_INTERACTIVE	396,10535
#define FLAGS_VERSION	397,10563
#define FLAGS_EXEC	398,10588
#define FLAGS_OPTION	399,10610
#define FLAGS_NOENV	400,10634
static int collectargs(402,10659
static int runargs(446,11632
static int handle_luainit(489,12690
static struct Smain 504,12983
  char **argv;argv505,13005
  int argc;506,13020
  int status;507,13032
} smain;508,13046
static int pmain(510,13056
int main(570,14415

vendor/github.com/LuaJIT/LuaJIT/src/luajit.h,682
#define _LUAJIT_H29,1304
#define LUAJIT_VERSION	33,1341
#define LUAJIT_VERSION_NUM	34,1386
#define LUAJIT_VERSION_SYM	35,1452
#define LUAJIT_COPYRIGHT	36,1506
#define LUAJIT_URL	37,1567
#define LUAJIT_MODE_MASK	40,1641
  LUAJIT_MODE_ENGINE,43,1681
  LUAJIT_MODE_DEBUG,44,1741
  LUAJIT_MODE_FUNC,46,1800
  LUAJIT_MODE_ALLFUNC,47,1855
  LUAJIT_MODE_ALLSUBFUNC,48,1917
  LUAJIT_MODE_TRACE,50,1979
  LUAJIT_MODE_WRAPCFUNC 52,2032
  LUAJIT_MODE_WRAPCFUNC = 0x10,x1052,2032
  LUAJIT_MODE_MAX54,2110
#define LUAJIT_MODE_OFF	58,2166
#define LUAJIT_MODE_ON	59,2222
#define LUAJIT_MODE_FLUSH	60,2276
typedef void (*luaJIT_profile_callback)luaJIT_profile_callback68,2495

vendor/github.com/LuaJIT/LuaJIT/src/lualib.h,422
#define _LUALIB_H7,124
#define LUA_FILEHANDLE	11,161
#define LUA_COLIBNAME	13,193
#define LUA_MATHLIBNAME	14,227
#define LUA_STRLIBNAME	15,258
#define LUA_TABLIBNAME	16,290
#define LUA_IOLIBNAME	17,321
#define LUA_OSLIBNAME	18,348
#define LUA_LOADLIBNAME	19,375
#define LUA_DBLIBNAME	20,409
#define LUA_BITLIBNAME	21,439
#define LUA_JITLIBNAME	22,468
#define LUA_FFILIBNAME	23,497
#define lua_assert(40,1066

vm_x86.dasc,4965
#define DASM_SECTION_CODE_OP	11,
#define DASM_SECTION_CODE_SUB	12,
#define DASM_MAXSECTION	13,
static const unsigned char build_actionlist[build_actionlist13,
  GLOB_vm_returnp,15,
  GLOB_cont_dispatch,16,
  GLOB_vm_returnc,17,
  GLOB_vm_unwind_yield,18,
  GLOB_BC_RET_Z,19,
  GLOB_vm_return,20,
  GLOB_vm_leave_cp,21,
  GLOB_vm_leave_unw,22,
  GLOB_vm_unwind_c_eh,23,
  GLOB_vm_unwind_c,24,
  GLOB_vm_unwind_rethrow,25,
  GLOB_vm_unwind_ff,26,
  GLOB_vm_unwind_ff_eh,27,
  GLOB_vm_growstack_c,28,
  GLOB_vm_growstack_v,29,
  GLOB_vm_growstack_f,30,
  GLOB_vm_resume,31,
  GLOB_vm_pcall,32,
  GLOB_vm_call,33,
  GLOB_vm_call_dispatch,34,
  GLOB_vmeta_call,35,
  GLOB_vm_call_dispatch_f,36,
  GLOB_vm_cpcall,37,
  GLOB_cont_ffi_callback,38,
  GLOB_vm_call_tail,39,
  GLOB_cont_cat,40,
  GLOB_cont_ra,41,
  GLOB_BC_CAT_Z,42,
  GLOB_vmeta_tgets,43,
  GLOB_vmeta_tgetb,44,
  GLOB_vmeta_tgetv,45,
  GLOB_vmeta_tgetr,46,
  GLOB_BC_TGETR_Z,47,
  GLOB_BC_TGETR2_Z,48,
  GLOB_vmeta_tsets,49,
  GLOB_vmeta_tsetb,50,
  GLOB_vmeta_tsetv,51,
  GLOB_cont_nop,52,
  GLOB_vmeta_tsetr,53,
  GLOB_BC_TSETR_Z,54,
  GLOB_vmeta_comp,55,
  GLOB_vmeta_binop,56,
  GLOB_cont_condt,57,
  GLOB_cont_condf,58,
  GLOB_vmeta_equal,59,
  GLOB_vmeta_equal_cd,60,
  GLOB_vmeta_istype,61,
  GLOB_vmeta_arith_vno,62,
  GLOB_vmeta_arith_vn,63,
  GLOB_vmeta_arith_nvo,64,
  GLOB_vmeta_arith_nv,65,
  GLOB_vmeta_unm,66,
  GLOB_vmeta_arith_vvo,67,
  GLOB_vmeta_arith_vv,68,
  GLOB_vmeta_len,69,
  GLOB_BC_LEN_Z,70,
  GLOB_vmeta_call_ra,71,
  GLOB_BC_CALLT_Z,72,
  GLOB_vmeta_for,73,
  GLOB_ff_assert,74,
  GLOB_fff_fallback,75,
  GLOB_fff_res_,76,
  GLOB_ff_type,77,
  GLOB_fff_res1,78,
  GLOB_ff_getmetatable,79,
  GLOB_ff_setmetatable,80,
  GLOB_ff_rawget,81,
  GLOB_ff_tonumber,82,
  GLOB_fff_resxmm0,83,
  GLOB_ff_tostring,84,
  GLOB_fff_gcstep,85,
  GLOB_ff_next,86,
  GLOB_fff_res2,87,
  GLOB_fff_res,88,
  GLOB_ff_pairs,89,
  GLOB_ff_ipairs_aux,90,
  GLOB_fff_res0,91,
  GLOB_ff_ipairs,92,
  GLOB_ff_pcall,93,
  GLOB_ff_xpcall,94,
  GLOB_ff_coroutine_resume,95,
  GLOB_ff_coroutine_wrap_aux,96,
  GLOB_ff_coroutine_yield,97,
  GLOB_fff_resi,98,
  GLOB_fff_resn,99,
  GLOB_ff_math_abs,100,
  GLOB_ff_math_floor,101,
  GLOB_vm_floor_sse,102,
  GLOB_ff_math_ceil,103,
  GLOB_vm_ceil_sse,104,
  GLOB_ff_math_sqrt,105,
  GLOB_ff_math_log,106,
  GLOB_ff_math_log10,107,
  GLOB_ff_math_exp,108,
  GLOB_ff_math_sin,109,
  GLOB_ff_math_cos,110,
  GLOB_ff_math_tan,111,
  GLOB_ff_math_asin,112,
  GLOB_ff_math_acos,113,
  GLOB_ff_math_atan,114,
  GLOB_ff_math_sinh,115,
  GLOB_ff_math_cosh,116,
  GLOB_ff_math_tanh,117,
  GLOB_ff_math_pow,118,
  GLOB_ff_math_atan2,119,
  GLOB_ff_math_fmod,120,
  GLOB_ff_math_ldexp,121,
  GLOB_ff_math_frexp,122,
  GLOB_ff_math_modf,123,
  GLOB_vm_trunc_sse,124,
  GLOB_ff_math_min,125,
  GLOB_ff_math_max,126,
  GLOB_ff_string_byte,127,
  GLOB_ff_string_char,128,
  GLOB_fff_newstr,129,
  GLOB_fff_resstr,130,
  GLOB_ff_string_sub,131,
  GLOB_fff_emptystr,132,
  GLOB_ff_string_reverse,133,
  GLOB_ff_string_lower,134,
  GLOB_ff_string_upper,135,
  GLOB_ff_bit_tobit,136,
  GLOB_fff_resbit,137,
  GLOB_ff_bit_band,138,
  GLOB_fff_fallback_bit_op,139,
  GLOB_ff_bit_bor,140,
  GLOB_ff_bit_bxor,141,
  GLOB_ff_bit_bswap,142,
  GLOB_ff_bit_bnot,143,
  GLOB_ff_bit_lshift,144,
  GLOB_ff_bit_rshift,145,
  GLOB_ff_bit_arshift,146,
  GLOB_ff_bit_rol,147,
  GLOB_ff_bit_ror,148,
  GLOB_fff_fallback_2,149,
  GLOB_fff_fallback_1,150,
  GLOB_vm_record,151,
  GLOB_vm_rethook,152,
  GLOB_vm_inshook,153,
  GLOB_cont_hook,154,
  GLOB_vm_hotloop,155,
  GLOB_vm_callhook,156,
  GLOB_vm_hotcall,157,
  GLOB_cont_stitch,158,
  GLOB_vm_profhook,159,
  GLOB_vm_exit_handler,160,
  GLOB_vm_exit_interp,161,
  GLOB_vm_floor,162,
  GLOB_vm_ceil,163,
  GLOB_vm_trunc,164,
  GLOB_vm_mod,165,
  GLOB_vm_powi_sse,166,
  GLOB_vm_cpuid,167,
  GLOB_assert_bad_for_arg_type,168,
  GLOB_vm_ffi_callback,169,
  GLOB_vm_ffi_call,170,
  GLOB_BC_MODVN_Z,171,
  GLOB_BC_TGETS_Z,172,
  GLOB_BC_TSETS_Z,173,
  GLOB__MAX174,
static const char *const globnames[globnames15,
static const char *const extnames[extnames16,
#define Dt1(106,
#define Dt2(107,
#define Dt3(108,
#define Dt4(109,
#define Dt5(110,
#define Dt6(111,
#define Dt7(112,
#define Dt8(113,
#define Dt9(114,
#define DtA(115,
#define DtB(116,
#define DtC(117,
#define DtD(118,
#define DtE(119,
#define DISPATCH_GL(409,
#define DISPATCH_J(410,
#define PC2PROTO(412,
static void build_subroutines(489,
#define DtF(3155,
#define Dt10(3253,
static void build_ins(3351,
#define TV2MARKOFS 4017,
#undef TV2MARKOFS4053,
static int build_backend(5455,
static void emit_asm_debug(5467,
#define SZPTR	5471,
#define BSZPTR	5472,
#define REG_SP	5473,
#define REG_RA	5474,
#define SZPTR	5476,
#define BSZPTR	5477,
#define REG_SP	5478,
#define REG_RA	5479,

vendor/github.com/LuaJIT/LuaJIT/src/host/buildvm_arch.h,0

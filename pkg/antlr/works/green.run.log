-*- mode: compilation; default-directory: "~/go/src/github.com/go-interpreter/gi/pkg/antlr/squaw/" -*-
Compilation started at Mon Jan  8 05:43:35

 go test -v 
=== RUN   Test001EOF_versus_syntaxError_versus_complete_statement

  Antlr grammar processing should distinguish between these 3: a complete statement, early EOF, and syntax error 
2018-01-08 05:43:36.467 -0600 CST empty statement: ``
enter   replStuff, LT(1)=<EOF>
enter   replEntry, LT(1)=<EOF>
SquibbleErrorStrategy.ReportError() called.
exit    replEntry, LT(1)=<EOF>
exit    replStuff, LT(1)=<EOF>
✔✔
2018-01-08 05:43:36.467 -0600 CST complete statement: 3
enter   replStuff, LT(1)=3
enter   replEntry, LT(1)=3
enter   expression, LT(1)=3
consume [@0,0:0='3',<13>,1:0] rule expression
exit    expression, LT(1)=<EOF>
consume [@1,1:0='<EOF>',<-1>,1:1] rule replEntry
exit    replEntry, LT(1)=<EOF>
enter   eos, LT(1)=<EOF>
consume [@1,1:0='<EOF>',<-1>,1:1] rule eos
exit    eos, LT(1)=<EOF>
exit    replStuff, LT(1)=<EOF>
✔✔
2018-01-08 05:43:36.468 -0600 CST complete statement: 3 * 4
enter   replStuff, LT(1)=3
enter   replEntry, LT(1)=3
enter   expression, LT(1)=3
consume [@0,0:0='3',<13>,1:0] rule expression
exit    expression, LT(1)=*
enter   expression, LT(1)=*
consume [@2,2:2='*',<9>,1:2] rule expression
enter   expression, LT(1)=4
consume [@4,4:4='4',<13>,1:4] rule expression
exit    expression, LT(1)=<EOF>
exit    expression, LT(1)=<EOF>
consume [@5,5:4='<EOF>',<-1>,1:5] rule replEntry
exit    replEntry, LT(1)=<EOF>
enter   eos, LT(1)=<EOF>
consume [@5,5:4='<EOF>',<-1>,1:5] rule eos
exit    eos, LT(1)=<EOF>
exit    replStuff, LT(1)=<EOF>
✔✔
2018-01-08 05:43:36.494 -0600 CST syntax error 0: 3 * *
enter   replStuff, LT(1)=3
enter   replEntry, LT(1)=3
enter   expression, LT(1)=3
consume [@0,0:0='3',<13>,1:0] rule expression
exit    expression, LT(1)=*
enter   expression, LT(1)=*
consume [@2,2:2='*',<9>,1:2] rule expression
enter   expression, LT(1)=*
SquibbleErrorStrategy.RecoverInline called!
exit    expression, LT(1)=*
exit    expression, LT(1)=*
exit    replEntry, LT(1)=*
exit    replStuff, LT(1)=*
✔✔
2018-01-08 05:43:36.494 -0600 CST syntax error 0: 3 4
enter   replStuff, LT(1)=3
enter   replEntry, LT(1)=3
enter   expression, LT(1)=3
consume [@0,0:0='3',<13>,1:0] rule expression
exit    expression, LT(1)=4
SquibbleErrorStrategy.RecoverInline called!
exit    replEntry, LT(1)=4
exit    replStuff, LT(1)=4
✔✔
2018-01-08 05:43:36.517 -0600 CST syntax error 0: 3 newline 4
enter   replStuff, LT(1)=3
enter   replEntry, LT(1)=3
enter   expression, LT(1)=3
consume [@0,0:0='3',<13>,1:0] rule expression
exit    expression, LT(1)=4
SquibbleErrorStrategy.RecoverInline called!
exit    replEntry, LT(1)=4
exit    replStuff, LT(1)=4
✔✔
2018-01-08 05:43:36.517 -0600 CST 0th test
enter   replStuff, LT(1)=3
enter   replEntry, LT(1)=3
enter   expression, LT(1)=3
consume [@0,0:0='3',<13>,1:0] rule expression
exit    expression, LT(1)=*
enter   expression, LT(1)=*
consume [@2,2:2='*',<9>,1:2] rule expression
enter   expression, LT(1)=<EOF>
SquibbleErrorStrategy.RecoverInline called!
exit    expression, LT(1)=<EOF>
exit    expression, LT(1)=<EOF>
exit    replEntry, LT(1)=<EOF>
exit    replStuff, LT(1)=<EOF>
✔✔
2018-01-08 05:43:36.517 -0600 CST newline test
enter   replStuff, LT(1)=3
enter   replEntry, LT(1)=3
enter   expression, LT(1)=3
consume [@0,0:0='3',<13>,1:0] rule expression
exit    expression, LT(1)=*
enter   expression, LT(1)=*
consume [@2,2:2='*',<9>,1:2] rule expression
enter   expression, LT(1)=4
consume [@6,6:6='4',<13>,2:1] rule expression
exit    expression, LT(1)=<EOF>
exit    expression, LT(1)=<EOF>
consume [@7,7:6='<EOF>',<-1>,2:2] rule replEntry
exit    replEntry, LT(1)=<EOF>
enter   eos, LT(1)=<EOF>
consume [@7,7:6='<EOF>',<-1>,2:2] rule eos
exit    eos, LT(1)=<EOF>
exit    replStuff, LT(1)=<EOF>
✔✔
2018-01-08 05:43:36.528 -0600 CST first test
enter   replStuff, LT(1)=3
enter   replEntry, LT(1)=3
enter   expression, LT(1)=3
consume [@0,0:0='3',<13>,1:0] rule expression
exit    expression, LT(1)=*
enter   expression, LT(1)=*
consume [@2,2:2='*',<9>,1:2] rule expression
enter   expression, LT(1)=4
consume [@4,4:4='4',<13>,1:4] rule expression
exit    expression, LT(1)=<EOF>
exit    expression, LT(1)=<EOF>
consume [@5,5:4='<EOF>',<-1>,1:5] rule replEntry
exit    replEntry, LT(1)=<EOF>
enter   eos, LT(1)=<EOF>
consume [@5,5:4='<EOF>',<-1>,1:5] rule eos
exit    eos, LT(1)=<EOF>
exit    replStuff, LT(1)=<EOF>
✔✔
2018-01-08 05:43:36.554 -0600 CST 2nd test
enter   replStuff, LT(1)=2
enter   replEntry, LT(1)=2
enter   expression, LT(1)=2
consume [@0,0:0='2',<13>,1:0] rule expression
exit    expression, LT(1)=/
enter   expression, LT(1)=/
consume [@2,2:2='/',<10>,1:2] rule expression
enter   expression, LT(1)=3
consume [@4,4:4='3',<13>,1:4] rule expression
exit    expression, LT(1)=*
exit    expression, LT(1)=*
enter   expression, LT(1)=*
consume [@6,6:6='*',<9>,1:6] rule expression
enter   expression, LT(1)=<EOF>
SquibbleErrorStrategy.RecoverInline called!
exit    expression, LT(1)=<EOF>
exit    expression, LT(1)=<EOF>
exit    replEntry, LT(1)=<EOF>
exit    replStuff, LT(1)=<EOF>
✔✔enter   replStuff, LT(1)=2
enter   replEntry, LT(1)=2
enter   expression, LT(1)=2
consume [@0,0:0='2',<13>,1:0] rule expression
exit    expression, LT(1)=/
enter   expression, LT(1)=/
consume [@2,2:2='/',<10>,1:2] rule expression
enter   expression, LT(1)=3
consume [@4,4:4='3',<13>,1:4] rule expression
exit    expression, LT(1)=*
exit    expression, LT(1)=*
enter   expression, LT(1)=*
consume [@6,6:6='*',<9>,1:6] rule expression
enter   expression, LT(1)=1
consume [@10,10:10='1',<13>,2:1] rule expression
exit    expression, LT(1)=<EOF>
exit    expression, LT(1)=<EOF>
consume [@11,11:10='<EOF>',<-1>,2:2] rule replEntry
exit    replEntry, LT(1)=<EOF>
enter   eos, LT(1)=<EOF>
consume [@11,11:10='<EOF>',<-1>,2:2] rule eos
exit    eos, LT(1)=<EOF>
exit    replStuff, LT(1)=<EOF>
✔✔enter   replStuff, LT(1)=2
enter   replEntry, LT(1)=2
enter   expression, LT(1)=2
consume [@0,0:0='2',<13>,1:0] rule expression
exit    expression, LT(1)=/
enter   expression, LT(1)=/
consume [@2,2:2='/',<10>,1:2] rule expression
enter   expression, LT(1)=3
consume [@4,4:4='3',<13>,1:4] rule expression
exit    expression, LT(1)=*
exit    expression, LT(1)=*
enter   expression, LT(1)=*
consume [@6,6:6='*',<9>,1:6] rule expression
enter   expression, LT(1)=<EOF>
SquibbleErrorStrategy.RecoverInline called!
exit    expression, LT(1)=<EOF>
exit    expression, LT(1)=<EOF>
exit    replEntry, LT(1)=<EOF>
exit    replStuff, LT(1)=<EOF>
✔✔enter   replStuff, LT(1)=2
enter   replEntry, LT(1)=2
enter   expression, LT(1)=2
consume [@0,0:0='2',<13>,1:0] rule expression
exit    expression, LT(1)=/
enter   expression, LT(1)=/
consume [@2,2:2='/',<10>,1:2] rule expression
enter   expression, LT(1)=3
consume [@4,4:4='3',<13>,1:4] rule expression
exit    expression, LT(1)=*
exit    expression, LT(1)=*
enter   expression, LT(1)=*
consume [@6,6:6='*',<9>,1:6] rule expression
enter   expression, LT(1)=*
SquibbleErrorStrategy.RecoverInline called!
exit    expression, LT(1)=*
exit    expression, LT(1)=*
exit    replEntry, LT(1)=*
exit    replStuff, LT(1)=*
✔✔


26 assertions thus far

--- PASS: Test001EOF_versus_syntaxError_versus_complete_statement (0.13s)
=== RUN   Test002EOF_versus_syntaxError_versus_complete_statement

  complete statement, early EOF, and syntax error distinction: should work for multiple assignment a,b := 3 newline 4; and for func a(
  
 
2018-01-08 05:43:36.627 -0600 CST multiple assign: `a,b := 3,4`
enter   replStuff, LT(1)=a
enter   replEntry, LT(1)=a
enter   assignment, LT(1)=a
enter   identifierList, LT(1)=a
consume [@0,0:0='a',<14>,1:0] rule identifierList
consume [@1,1:1=',',<8>,1:1] rule identifierList
consume [@3,3:3='b',<14>,1:3] rule identifierList
exit    identifierList, LT(1)=:=
consume [@5,5:6=':=',<7>,1:5] rule assignment
enter   expressionList, LT(1)=3
enter   expression, LT(1)=3
consume [@7,8:8='3',<13>,1:8] rule expression
exit    expression, LT(1)=,
consume [@8,9:9=',',<8>,1:9] rule expressionList
enter   expression, LT(1)=4
consume [@10,11:11='4',<13>,1:11] rule expression
exit    expression, LT(1)=<EOF>
exit    expressionList, LT(1)=<EOF>
exit    assignment, LT(1)=<EOF>
consume [@11,12:11='<EOF>',<-1>,1:12] rule replEntry
exit    replEntry, LT(1)=<EOF>
enter   eos, LT(1)=<EOF>
consume [@11,12:11='<EOF>',<-1>,1:12] rule eos
exit    eos, LT(1)=<EOF>
exit    replStuff, LT(1)=<EOF>
✔✔enter   replStuff, LT(1)=a
enter   replEntry, LT(1)=a
enter   assignment, LT(1)=a
enter   identifierList, LT(1)=a
consume [@0,0:0='a',<14>,1:0] rule identifierList
consume [@1,1:1=',',<8>,1:1] rule identifierList
consume [@2,2:2='b',<14>,1:2] rule identifierList
exit    identifierList, LT(1)=:=
consume [@4,4:5=':=',<7>,1:4] rule assignment
enter   expressionList, LT(1)=3
enter   expression, LT(1)=3
consume [@5,6:6='3',<13>,1:6] rule expression
exit    expression, LT(1)=,
consume [@6,7:7=',',<8>,1:7] rule expressionList
enter   expression, LT(1)=4
consume [@10,11:11='4',<13>,2:1] rule expression
exit    expression, LT(1)=<EOF>
exit    expressionList, LT(1)=<EOF>
exit    assignment, LT(1)=<EOF>
consume [@11,12:11='<EOF>',<-1>,2:2] rule replEntry
exit    replEntry, LT(1)=<EOF>
enter   eos, LT(1)=<EOF>
consume [@11,12:11='<EOF>',<-1>,2:2] rule eos
exit    eos, LT(1)=<EOF>
exit    replStuff, LT(1)=<EOF>
✔✔enter   replStuff, LT(1)=a
enter   replEntry, LT(1)=a
enter   assignment, LT(1)=a
enter   identifierList, LT(1)=a
consume [@0,0:0='a',<14>,1:0] rule identifierList
consume [@1,1:1=',',<8>,1:1] rule identifierList
consume [@2,2:2='b',<14>,1:2] rule identifierList
exit    identifierList, LT(1)=:=
consume [@4,4:5=':=',<7>,1:4] rule assignment
enter   expressionList, LT(1)=3
enter   expression, LT(1)=3
consume [@5,6:6='3',<13>,1:6] rule expression
exit    expression, LT(1)=,
consume [@6,7:7=',',<8>,1:7] rule expressionList
enter   expression, LT(1)=<EOF>
SquibbleErrorStrategy.RecoverInline called!
exit    expression, LT(1)=<EOF>
exit    expressionList, LT(1)=<EOF>
exit    assignment, LT(1)=<EOF>
exit    replEntry, LT(1)=<EOF>
exit    replStuff, LT(1)=<EOF>
✔✔enter   replStuff, LT(1)=a
enter   replEntry, LT(1)=a
enter   assignment, LT(1)=a
enter   identifierList, LT(1)=a
consume [@0,0:0='a',<14>,1:0] rule identifierList
consume [@1,1:1=',',<8>,1:1] rule identifierList
consume [@2,2:2='b',<14>,1:2] rule identifierList
exit    identifierList, LT(1)=:=
consume [@4,4:5=':=',<7>,1:4] rule assignment
enter   expressionList, LT(1)=,
enter   expression, LT(1)=,
SquibbleErrorStrategy.RecoverInline called!
exit    expression, LT(1)=,
exit    expressionList, LT(1)=,
exit    assignment, LT(1)=,
exit    replEntry, LT(1)=,
exit    replStuff, LT(1)=,
✔✔


34 assertions thus far

--- PASS: Test002EOF_versus_syntaxError_versus_complete_statement (0.10s)
PASS
ok  	github.com/go-interpreter/gi/pkg/antlr/squaw	0.242s

Compilation finished at Mon Jan  8 05:43:36
